
TEst.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040b8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f4  08004258  08004258  00014258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800444c  0800444c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800444c  0800444c  0001444c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004454  08004454  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004454  08004454  00014454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004458  08004458  00014458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800445c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000070  080044cc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  080044cc  00020138  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a26d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a9b  00000000  00000000  0002a30d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007e0  00000000  00000000  0002bda8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000730  00000000  00000000  0002c588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001697f  00000000  00000000  0002ccb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a114  00000000  00000000  00043637  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008652d  00000000  00000000  0004d74b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d3c78  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b70  00000000  00000000  000d3ccc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004240 	.word	0x08004240

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08004240 	.word	0x08004240

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <LCD_I2C_Write_CMD>:
#include "main.h"
#include "stm32f4xx_hal.h"
#define addr_pcf8574 0x27 << 1
extern I2C_HandleTypeDef hi2c1;

void LCD_I2C_Write_CMD(uint8_t data){
 8000588:	b580      	push	{r7, lr}
 800058a:	b086      	sub	sp, #24
 800058c:	af02      	add	r7, sp, #8
 800058e:	4603      	mov	r3, r0
 8000590:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer[4] = {(data & 0xF0) | 0x04 ,(data & 0xF0) | 0x00, (data << 4) | 0x04, (data << 4) | 0x00 };
 8000592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000596:	f023 030f 	bic.w	r3, r3, #15
 800059a:	b25b      	sxtb	r3, r3
 800059c:	f043 0304 	orr.w	r3, r3, #4
 80005a0:	b25b      	sxtb	r3, r3
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	733b      	strb	r3, [r7, #12]
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	f023 030f 	bic.w	r3, r3, #15
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	737b      	strb	r3, [r7, #13]
 80005b0:	79fb      	ldrb	r3, [r7, #7]
 80005b2:	011b      	lsls	r3, r3, #4
 80005b4:	b25b      	sxtb	r3, r3
 80005b6:	f043 0304 	orr.w	r3, r3, #4
 80005ba:	b25b      	sxtb	r3, r3
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	73bb      	strb	r3, [r7, #14]
 80005c0:	79fb      	ldrb	r3, [r7, #7]
 80005c2:	011b      	lsls	r3, r3, #4
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c1, addr_pcf8574, buffer, 4, HAL_MAX_DELAY);
 80005c8:	f107 020c 	add.w	r2, r7, #12
 80005cc:	f04f 33ff 	mov.w	r3, #4294967295
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2304      	movs	r3, #4
 80005d4:	214e      	movs	r1, #78	; 0x4e
 80005d6:	4803      	ldr	r0, [pc, #12]	; (80005e4 <LCD_I2C_Write_CMD+0x5c>)
 80005d8:	f000 ff9a 	bl	8001510 <HAL_I2C_Master_Transmit>
}
 80005dc:	bf00      	nop
 80005de:	3710      	adds	r7, #16
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	2000009c 	.word	0x2000009c

080005e8 <LCD_I2C_Write_DATA>:
void LCD_I2C_Write_DATA(uint8_t data){
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b086      	sub	sp, #24
 80005ec:	af02      	add	r7, sp, #8
 80005ee:	4603      	mov	r3, r0
 80005f0:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer[4] = {(data & 0xF0) | 0x05 ,(data & 0xF0) | 0x01, (data << 4) | 0x05, (data << 4) | 0x01 };
 80005f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005f6:	f023 030f 	bic.w	r3, r3, #15
 80005fa:	b25b      	sxtb	r3, r3
 80005fc:	f043 0305 	orr.w	r3, r3, #5
 8000600:	b25b      	sxtb	r3, r3
 8000602:	b2db      	uxtb	r3, r3
 8000604:	733b      	strb	r3, [r7, #12]
 8000606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800060a:	f023 030f 	bic.w	r3, r3, #15
 800060e:	b25b      	sxtb	r3, r3
 8000610:	f043 0301 	orr.w	r3, r3, #1
 8000614:	b25b      	sxtb	r3, r3
 8000616:	b2db      	uxtb	r3, r3
 8000618:	737b      	strb	r3, [r7, #13]
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	011b      	lsls	r3, r3, #4
 800061e:	b25b      	sxtb	r3, r3
 8000620:	f043 0305 	orr.w	r3, r3, #5
 8000624:	b25b      	sxtb	r3, r3
 8000626:	b2db      	uxtb	r3, r3
 8000628:	73bb      	strb	r3, [r7, #14]
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	011b      	lsls	r3, r3, #4
 800062e:	b25b      	sxtb	r3, r3
 8000630:	f043 0301 	orr.w	r3, r3, #1
 8000634:	b25b      	sxtb	r3, r3
 8000636:	b2db      	uxtb	r3, r3
 8000638:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c1, addr_pcf8574, buffer, 4, HAL_MAX_DELAY);
 800063a:	f107 020c 	add.w	r2, r7, #12
 800063e:	f04f 33ff 	mov.w	r3, #4294967295
 8000642:	9300      	str	r3, [sp, #0]
 8000644:	2304      	movs	r3, #4
 8000646:	214e      	movs	r1, #78	; 0x4e
 8000648:	4803      	ldr	r0, [pc, #12]	; (8000658 <LCD_I2C_Write_DATA+0x70>)
 800064a:	f000 ff61 	bl	8001510 <HAL_I2C_Master_Transmit>
}
 800064e:	bf00      	nop
 8000650:	3710      	adds	r7, #16
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	2000009c 	.word	0x2000009c

0800065c <LCD_I2C_Init>:
void LCD_I2C_Init(void){
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
	LCD_I2C_Write_CMD(0x33);		//Khoi tao
 8000660:	2033      	movs	r0, #51	; 0x33
 8000662:	f7ff ff91 	bl	8000588 <LCD_I2C_Write_CMD>
	LCD_I2C_Write_CMD(0x32);		//Khoi tao
 8000666:	2032      	movs	r0, #50	; 0x32
 8000668:	f7ff ff8e 	bl	8000588 <LCD_I2C_Write_CMD>
	LCD_I2C_Write_CMD(0x28);		//Che do 4 bit, 2 hang
 800066c:	2028      	movs	r0, #40	; 0x28
 800066e:	f7ff ff8b 	bl	8000588 <LCD_I2C_Write_CMD>
	LCD_I2C_Write_CMD(0x0C);		//Hien thi man hinh, tat con tro
 8000672:	200c      	movs	r0, #12
 8000674:	f7ff ff88 	bl	8000588 <LCD_I2C_Write_CMD>
	LCD_I2C_Write_CMD(0x06);		//Tang con tro
 8000678:	2006      	movs	r0, #6
 800067a:	f7ff ff85 	bl	8000588 <LCD_I2C_Write_CMD>
	LCD_I2C_Write_CMD(0x01);		//Xoa man hinh
 800067e:	2001      	movs	r0, #1
 8000680:	f7ff ff82 	bl	8000588 <LCD_I2C_Write_CMD>
	HAL_Delay(2);					// Delay de xoa man hinh, ham khac thuc hien nhanh nen khong can Delay
 8000684:	2002      	movs	r0, #2
 8000686:	f000 fb71 	bl	8000d6c <HAL_Delay>
}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}

0800068e <LCD_I2C_Clear>:
void LCD_I2C_Clear(void){
 800068e:	b580      	push	{r7, lr}
 8000690:	af00      	add	r7, sp, #0
	LCD_I2C_Write_CMD(0x01);
 8000692:	2001      	movs	r0, #1
 8000694:	f7ff ff78 	bl	8000588 <LCD_I2C_Write_CMD>
	HAL_Delay(2);
 8000698:	2002      	movs	r0, #2
 800069a:	f000 fb67 	bl	8000d6c <HAL_Delay>
}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}

080006a2 <LCD_I2C_Location>:
void LCD_I2C_Location(uint8_t x, uint8_t y){
 80006a2:	b580      	push	{r7, lr}
 80006a4:	b082      	sub	sp, #8
 80006a6:	af00      	add	r7, sp, #0
 80006a8:	4603      	mov	r3, r0
 80006aa:	460a      	mov	r2, r1
 80006ac:	71fb      	strb	r3, [r7, #7]
 80006ae:	4613      	mov	r3, r2
 80006b0:	71bb      	strb	r3, [r7, #6]
	if(x == 0){
 80006b2:	79fb      	ldrb	r3, [r7, #7]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d106      	bne.n	80006c6 <LCD_I2C_Location+0x24>
		LCD_I2C_Write_CMD(0x80+y);
 80006b8:	79bb      	ldrb	r3, [r7, #6]
 80006ba:	3b80      	subs	r3, #128	; 0x80
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	4618      	mov	r0, r3
 80006c0:	f7ff ff62 	bl	8000588 <LCD_I2C_Write_CMD>
	}
	else if(x == 1){
		LCD_I2C_Write_CMD(0xC0+y);
	}
}
 80006c4:	e008      	b.n	80006d8 <LCD_I2C_Location+0x36>
	else if(x == 1){
 80006c6:	79fb      	ldrb	r3, [r7, #7]
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	d105      	bne.n	80006d8 <LCD_I2C_Location+0x36>
		LCD_I2C_Write_CMD(0xC0+y);
 80006cc:	79bb      	ldrb	r3, [r7, #6]
 80006ce:	3b40      	subs	r3, #64	; 0x40
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	4618      	mov	r0, r3
 80006d4:	f7ff ff58 	bl	8000588 <LCD_I2C_Write_CMD>
}
 80006d8:	bf00      	nop
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <LCD_I2C_Write_String>:
void LCD_I2C_Write_String(char* string){
 80006e0:	b590      	push	{r4, r7, lr}
 80006e2:	b085      	sub	sp, #20
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < strlen(string); i++){
 80006e8:	2300      	movs	r3, #0
 80006ea:	73fb      	strb	r3, [r7, #15]
 80006ec:	e009      	b.n	8000702 <LCD_I2C_Write_String+0x22>
		LCD_I2C_Write_DATA(string[i]);
 80006ee:	7bfb      	ldrb	r3, [r7, #15]
 80006f0:	687a      	ldr	r2, [r7, #4]
 80006f2:	4413      	add	r3, r2
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	4618      	mov	r0, r3
 80006f8:	f7ff ff76 	bl	80005e8 <LCD_I2C_Write_DATA>
	for(uint8_t i = 0; i < strlen(string); i++){
 80006fc:	7bfb      	ldrb	r3, [r7, #15]
 80006fe:	3301      	adds	r3, #1
 8000700:	73fb      	strb	r3, [r7, #15]
 8000702:	7bfc      	ldrb	r4, [r7, #15]
 8000704:	6878      	ldr	r0, [r7, #4]
 8000706:	f7ff fdbb 	bl	8000280 <strlen>
 800070a:	4603      	mov	r3, r0
 800070c:	429c      	cmp	r4, r3
 800070e:	d3ee      	bcc.n	80006ee <LCD_I2C_Write_String+0xe>
	}
}
 8000710:	bf00      	nop
 8000712:	bf00      	nop
 8000714:	3714      	adds	r7, #20
 8000716:	46bd      	mov	sp, r7
 8000718:	bd90      	pop	{r4, r7, pc}
	...

0800071c <LCD_I2C_Write_Number>:
void LCD_I2C_Write_Number(int number){
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	char buffer[8];
	sprintf(buffer, "%d", number);
 8000724:	f107 0308 	add.w	r3, r7, #8
 8000728:	687a      	ldr	r2, [r7, #4]
 800072a:	4906      	ldr	r1, [pc, #24]	; (8000744 <LCD_I2C_Write_Number+0x28>)
 800072c:	4618      	mov	r0, r3
 800072e:	f002 fc7d 	bl	800302c <siprintf>
	LCD_I2C_Write_String(buffer);
 8000732:	f107 0308 	add.w	r3, r7, #8
 8000736:	4618      	mov	r0, r3
 8000738:	f7ff ffd2 	bl	80006e0 <LCD_I2C_Write_String>
}
 800073c:	bf00      	nop
 800073e:	3710      	adds	r7, #16
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	08004258 	.word	0x08004258

08000748 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800074c:	f000 fa9c 	bl	8000c88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000750:	f000 f828 	bl	80007a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000754:	f000 f8b4 	bl	80008c0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000758:	f000 f884 	bl	8000864 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  LCD_I2C_Init();
 800075c:	f7ff ff7e 	bl	800065c <LCD_I2C_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  openFileAndReadData();
 8000760:	f000 f8dc 	bl	800091c <openFileAndReadData>
  while (1)
  {
	  LCD_I2C_Location(0, 0);
 8000764:	2100      	movs	r1, #0
 8000766:	2000      	movs	r0, #0
 8000768:	f7ff ff9b 	bl	80006a2 <LCD_I2C_Location>
	  LCD_I2C_Write_Number(number);
 800076c:	4b0b      	ldr	r3, [pc, #44]	; (800079c <main+0x54>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4618      	mov	r0, r3
 8000772:	f7ff ffd3 	bl	800071c <LCD_I2C_Write_Number>
	  LCD_I2C_Location(1, 0);
 8000776:	2100      	movs	r1, #0
 8000778:	2001      	movs	r0, #1
 800077a:	f7ff ff92 	bl	80006a2 <LCD_I2C_Location>
	  LCD_I2C_Write_String(string);
 800077e:	4808      	ldr	r0, [pc, #32]	; (80007a0 <main+0x58>)
 8000780:	f7ff ffae 	bl	80006e0 <LCD_I2C_Write_String>
	  HAL_Delay(1500);
 8000784:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000788:	f000 faf0 	bl	8000d6c <HAL_Delay>
	  LCD_I2C_Clear();
 800078c:	f7ff ff7f 	bl	800068e <LCD_I2C_Clear>
	  HAL_Delay(1500);
 8000790:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000794:	f000 faea 	bl	8000d6c <HAL_Delay>
	  LCD_I2C_Location(0, 0);
 8000798:	e7e4      	b.n	8000764 <main+0x1c>
 800079a:	bf00      	nop
 800079c:	2000008c 	.word	0x2000008c
 80007a0:	200000f0 	.word	0x200000f0

080007a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b094      	sub	sp, #80	; 0x50
 80007a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007aa:	f107 0320 	add.w	r3, r7, #32
 80007ae:	2230      	movs	r2, #48	; 0x30
 80007b0:	2100      	movs	r1, #0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f002 fad2 	bl	8002d5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b8:	f107 030c 	add.w	r3, r7, #12
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]
 80007c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c8:	2300      	movs	r3, #0
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	4b23      	ldr	r3, [pc, #140]	; (800085c <SystemClock_Config+0xb8>)
 80007ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d0:	4a22      	ldr	r2, [pc, #136]	; (800085c <SystemClock_Config+0xb8>)
 80007d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d6:	6413      	str	r3, [r2, #64]	; 0x40
 80007d8:	4b20      	ldr	r3, [pc, #128]	; (800085c <SystemClock_Config+0xb8>)
 80007da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e0:	60bb      	str	r3, [r7, #8]
 80007e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007e4:	2300      	movs	r3, #0
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	4b1d      	ldr	r3, [pc, #116]	; (8000860 <SystemClock_Config+0xbc>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007f0:	4a1b      	ldr	r2, [pc, #108]	; (8000860 <SystemClock_Config+0xbc>)
 80007f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007f6:	6013      	str	r3, [r2, #0]
 80007f8:	4b19      	ldr	r3, [pc, #100]	; (8000860 <SystemClock_Config+0xbc>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000804:	2302      	movs	r3, #2
 8000806:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000808:	2301      	movs	r3, #1
 800080a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800080c:	2310      	movs	r3, #16
 800080e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000810:	2300      	movs	r3, #0
 8000812:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000814:	f107 0320 	add.w	r3, r7, #32
 8000818:	4618      	mov	r0, r3
 800081a:	f001 f981 	bl	8001b20 <HAL_RCC_OscConfig>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000824:	f000 f874 	bl	8000910 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000828:	230f      	movs	r3, #15
 800082a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800082c:	2300      	movs	r3, #0
 800082e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000834:	2300      	movs	r3, #0
 8000836:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000838:	2300      	movs	r3, #0
 800083a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800083c:	f107 030c 	add.w	r3, r7, #12
 8000840:	2100      	movs	r1, #0
 8000842:	4618      	mov	r0, r3
 8000844:	f001 fbe4 	bl	8002010 <HAL_RCC_ClockConfig>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800084e:	f000 f85f 	bl	8000910 <Error_Handler>
  }
}
 8000852:	bf00      	nop
 8000854:	3750      	adds	r7, #80	; 0x50
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40023800 	.word	0x40023800
 8000860:	40007000 	.word	0x40007000

08000864 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000868:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <MX_I2C1_Init+0x50>)
 800086a:	4a13      	ldr	r2, [pc, #76]	; (80008b8 <MX_I2C1_Init+0x54>)
 800086c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800086e:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <MX_I2C1_Init+0x50>)
 8000870:	4a12      	ldr	r2, [pc, #72]	; (80008bc <MX_I2C1_Init+0x58>)
 8000872:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000874:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <MX_I2C1_Init+0x50>)
 8000876:	2200      	movs	r2, #0
 8000878:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800087a:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <MX_I2C1_Init+0x50>)
 800087c:	2200      	movs	r2, #0
 800087e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000880:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <MX_I2C1_Init+0x50>)
 8000882:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000886:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000888:	4b0a      	ldr	r3, [pc, #40]	; (80008b4 <MX_I2C1_Init+0x50>)
 800088a:	2200      	movs	r2, #0
 800088c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800088e:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <MX_I2C1_Init+0x50>)
 8000890:	2200      	movs	r2, #0
 8000892:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000894:	4b07      	ldr	r3, [pc, #28]	; (80008b4 <MX_I2C1_Init+0x50>)
 8000896:	2200      	movs	r2, #0
 8000898:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800089a:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <MX_I2C1_Init+0x50>)
 800089c:	2200      	movs	r2, #0
 800089e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008a0:	4804      	ldr	r0, [pc, #16]	; (80008b4 <MX_I2C1_Init+0x50>)
 80008a2:	f000 fcf1 	bl	8001288 <HAL_I2C_Init>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008ac:	f000 f830 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008b0:	bf00      	nop
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	2000009c 	.word	0x2000009c
 80008b8:	40005400 	.word	0x40005400
 80008bc:	000186a0 	.word	0x000186a0

080008c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	4b10      	ldr	r3, [pc, #64]	; (800090c <MX_GPIO_Init+0x4c>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	4a0f      	ldr	r2, [pc, #60]	; (800090c <MX_GPIO_Init+0x4c>)
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	6313      	str	r3, [r2, #48]	; 0x30
 80008d6:	4b0d      	ldr	r3, [pc, #52]	; (800090c <MX_GPIO_Init+0x4c>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	603b      	str	r3, [r7, #0]
 80008e6:	4b09      	ldr	r3, [pc, #36]	; (800090c <MX_GPIO_Init+0x4c>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	4a08      	ldr	r2, [pc, #32]	; (800090c <MX_GPIO_Init+0x4c>)
 80008ec:	f043 0302 	orr.w	r3, r3, #2
 80008f0:	6313      	str	r3, [r2, #48]	; 0x30
 80008f2:	4b06      	ldr	r3, [pc, #24]	; (800090c <MX_GPIO_Init+0x4c>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	f003 0302 	and.w	r3, r3, #2
 80008fa:	603b      	str	r3, [r7, #0]
 80008fc:	683b      	ldr	r3, [r7, #0]

}
 80008fe:	bf00      	nop
 8000900:	370c      	adds	r7, #12
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	40023800 	.word	0x40023800

08000910 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000914:	b672      	cpsid	i
}
 8000916:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000918:	e7fe      	b.n	8000918 <Error_Handler+0x8>
	...

0800091c <openFileAndReadData>:

#include <stdio.h>
#include <read_file.h>
int number = 0;
char string[50];
void openFileAndReadData() {
 800091c:	b580      	push	{r7, lr}
 800091e:	b09a      	sub	sp, #104	; 0x68
 8000920:	af00      	add	r7, sp, #0
    FILE *file;
    file = fopen("data.txt", "r"); // Mở file data.txt ở chế độ đọc
 8000922:	4910      	ldr	r1, [pc, #64]	; (8000964 <openFileAndReadData+0x48>)
 8000924:	4810      	ldr	r0, [pc, #64]	; (8000968 <openFileAndReadData+0x4c>)
 8000926:	f002 f82b 	bl	8002980 <fopen>
 800092a:	6678      	str	r0, [r7, #100]	; 0x64
    if (file == NULL) {
 800092c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800092e:	2b00      	cmp	r3, #0
 8000930:	d109      	bne.n	8000946 <openFileAndReadData+0x2a>
        number = 1;
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <openFileAndReadData+0x50>)
 8000934:	2201      	movs	r2, #1
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	e011      	b.n	800095e <openFileAndReadData+0x42>
        return;
    }
    // Thực hiện các thao tác với file
    char buffer[100];
    while (fgets(buffer, sizeof(buffer), file) != NULL) {
        sscanf(buffer, "%d %s", &number, string);
 800093a:	4638      	mov	r0, r7
 800093c:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <openFileAndReadData+0x54>)
 800093e:	4a0b      	ldr	r2, [pc, #44]	; (800096c <openFileAndReadData+0x50>)
 8000940:	490c      	ldr	r1, [pc, #48]	; (8000974 <openFileAndReadData+0x58>)
 8000942:	f002 fb93 	bl	800306c <siscanf>
    while (fgets(buffer, sizeof(buffer), file) != NULL) {
 8000946:	463b      	mov	r3, r7
 8000948:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800094a:	2164      	movs	r1, #100	; 0x64
 800094c:	4618      	mov	r0, r3
 800094e:	f001 fee3 	bl	8002718 <fgets>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d1f0      	bne.n	800093a <openFileAndReadData+0x1e>
        // Lưu dữ liệu vào biến hoặc xử lý dữ liệu
    }

    fclose(file); // Đóng file
 8000958:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800095a:	f001 fd87 	bl	800246c <fclose>

}
 800095e:	3768      	adds	r7, #104	; 0x68
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	0800425c 	.word	0x0800425c
 8000968:	08004260 	.word	0x08004260
 800096c:	2000008c 	.word	0x2000008c
 8000970:	200000f0 	.word	0x200000f0
 8000974:	0800426c 	.word	0x0800426c

08000978 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	4b10      	ldr	r3, [pc, #64]	; (80009c4 <HAL_MspInit+0x4c>)
 8000984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000986:	4a0f      	ldr	r2, [pc, #60]	; (80009c4 <HAL_MspInit+0x4c>)
 8000988:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800098c:	6453      	str	r3, [r2, #68]	; 0x44
 800098e:	4b0d      	ldr	r3, [pc, #52]	; (80009c4 <HAL_MspInit+0x4c>)
 8000990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000992:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	603b      	str	r3, [r7, #0]
 800099e:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <HAL_MspInit+0x4c>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a2:	4a08      	ldr	r2, [pc, #32]	; (80009c4 <HAL_MspInit+0x4c>)
 80009a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a8:	6413      	str	r3, [r2, #64]	; 0x40
 80009aa:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <HAL_MspInit+0x4c>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b2:	603b      	str	r3, [r7, #0]
 80009b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b6:	bf00      	nop
 80009b8:	370c      	adds	r7, #12
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	40023800 	.word	0x40023800

080009c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08a      	sub	sp, #40	; 0x28
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a19      	ldr	r2, [pc, #100]	; (8000a4c <HAL_I2C_MspInit+0x84>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d12b      	bne.n	8000a42 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	613b      	str	r3, [r7, #16]
 80009ee:	4b18      	ldr	r3, [pc, #96]	; (8000a50 <HAL_I2C_MspInit+0x88>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a17      	ldr	r2, [pc, #92]	; (8000a50 <HAL_I2C_MspInit+0x88>)
 80009f4:	f043 0302 	orr.w	r3, r3, #2
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b15      	ldr	r3, [pc, #84]	; (8000a50 <HAL_I2C_MspInit+0x88>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0302 	and.w	r3, r3, #2
 8000a02:	613b      	str	r3, [r7, #16]
 8000a04:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a06:	23c0      	movs	r3, #192	; 0xc0
 8000a08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a0a:	2312      	movs	r3, #18
 8000a0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a12:	2303      	movs	r3, #3
 8000a14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a16:	2304      	movs	r3, #4
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a1a:	f107 0314 	add.w	r3, r7, #20
 8000a1e:	4619      	mov	r1, r3
 8000a20:	480c      	ldr	r0, [pc, #48]	; (8000a54 <HAL_I2C_MspInit+0x8c>)
 8000a22:	f000 faad 	bl	8000f80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	60fb      	str	r3, [r7, #12]
 8000a2a:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <HAL_I2C_MspInit+0x88>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2e:	4a08      	ldr	r2, [pc, #32]	; (8000a50 <HAL_I2C_MspInit+0x88>)
 8000a30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a34:	6413      	str	r3, [r2, #64]	; 0x40
 8000a36:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <HAL_I2C_MspInit+0x88>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a42:	bf00      	nop
 8000a44:	3728      	adds	r7, #40	; 0x28
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40005400 	.word	0x40005400
 8000a50:	40023800 	.word	0x40023800
 8000a54:	40020400 	.word	0x40020400

08000a58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a5c:	e7fe      	b.n	8000a5c <NMI_Handler+0x4>

08000a5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a62:	e7fe      	b.n	8000a62 <HardFault_Handler+0x4>

08000a64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <MemManage_Handler+0x4>

08000a6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a6e:	e7fe      	b.n	8000a6e <BusFault_Handler+0x4>

08000a70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <UsageFault_Handler+0x4>

08000a76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr

08000a92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a96:	bf00      	nop
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr

08000aa0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aa4:	f000 f942 	bl	8000d2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aa8:	bf00      	nop
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b086      	sub	sp, #24
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	60f8      	str	r0, [r7, #12]
 8000ab4:	60b9      	str	r1, [r7, #8]
 8000ab6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ab8:	2300      	movs	r3, #0
 8000aba:	617b      	str	r3, [r7, #20]
 8000abc:	e00a      	b.n	8000ad4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000abe:	f3af 8000 	nop.w
 8000ac2:	4601      	mov	r1, r0
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	1c5a      	adds	r2, r3, #1
 8000ac8:	60ba      	str	r2, [r7, #8]
 8000aca:	b2ca      	uxtb	r2, r1
 8000acc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	617b      	str	r3, [r7, #20]
 8000ad4:	697a      	ldr	r2, [r7, #20]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	dbf0      	blt.n	8000abe <_read+0x12>
	}

return len;
 8000adc:	687b      	ldr	r3, [r7, #4]
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3718      	adds	r7, #24
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}

08000ae6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	b086      	sub	sp, #24
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	60f8      	str	r0, [r7, #12]
 8000aee:	60b9      	str	r1, [r7, #8]
 8000af0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af2:	2300      	movs	r3, #0
 8000af4:	617b      	str	r3, [r7, #20]
 8000af6:	e009      	b.n	8000b0c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	1c5a      	adds	r2, r3, #1
 8000afc:	60ba      	str	r2, [r7, #8]
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	4618      	mov	r0, r3
 8000b02:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	617b      	str	r3, [r7, #20]
 8000b0c:	697a      	ldr	r2, [r7, #20]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	dbf1      	blt.n	8000af8 <_write+0x12>
	}
	return len;
 8000b14:	687b      	ldr	r3, [r7, #4]
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3718      	adds	r7, #24
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <_close>:

int _close(int file)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	b083      	sub	sp, #12
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	6078      	str	r0, [r7, #4]
	return -1;
 8000b26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr

08000b36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b36:	b480      	push	{r7}
 8000b38:	b083      	sub	sp, #12
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	6078      	str	r0, [r7, #4]
 8000b3e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b46:	605a      	str	r2, [r3, #4]
	return 0;
 8000b48:	2300      	movs	r3, #0
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	370c      	adds	r7, #12
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr

08000b56 <_isatty>:

int _isatty(int file)
{
 8000b56:	b480      	push	{r7}
 8000b58:	b083      	sub	sp, #12
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
	return 1;
 8000b5e:	2301      	movs	r3, #1
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	60b9      	str	r1, [r7, #8]
 8000b76:	607a      	str	r2, [r7, #4]
	return 0;
 8000b78:	2300      	movs	r3, #0
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3714      	adds	r7, #20
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr

08000b86 <_open>:

int _open(char *path, int flags, ...)
{
 8000b86:	b40e      	push	{r1, r2, r3}
 8000b88:	b480      	push	{r7}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
	/* Pretend like we always fail */
	return -1;
 8000b90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	b003      	add	sp, #12
 8000ba0:	4770      	bx	lr
	...

08000ba4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b086      	sub	sp, #24
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bac:	4a14      	ldr	r2, [pc, #80]	; (8000c00 <_sbrk+0x5c>)
 8000bae:	4b15      	ldr	r3, [pc, #84]	; (8000c04 <_sbrk+0x60>)
 8000bb0:	1ad3      	subs	r3, r2, r3
 8000bb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bb8:	4b13      	ldr	r3, [pc, #76]	; (8000c08 <_sbrk+0x64>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d102      	bne.n	8000bc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bc0:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <_sbrk+0x64>)
 8000bc2:	4a12      	ldr	r2, [pc, #72]	; (8000c0c <_sbrk+0x68>)
 8000bc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bc6:	4b10      	ldr	r3, [pc, #64]	; (8000c08 <_sbrk+0x64>)
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4413      	add	r3, r2
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	d207      	bcs.n	8000be4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bd4:	f001 fbd8 	bl	8002388 <__errno>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	220c      	movs	r2, #12
 8000bdc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bde:	f04f 33ff 	mov.w	r3, #4294967295
 8000be2:	e009      	b.n	8000bf8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000be4:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <_sbrk+0x64>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bea:	4b07      	ldr	r3, [pc, #28]	; (8000c08 <_sbrk+0x64>)
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	4a05      	ldr	r2, [pc, #20]	; (8000c08 <_sbrk+0x64>)
 8000bf4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bf6:	68fb      	ldr	r3, [r7, #12]
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3718      	adds	r7, #24
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20010000 	.word	0x20010000
 8000c04:	00000400 	.word	0x00000400
 8000c08:	20000090 	.word	0x20000090
 8000c0c:	20000138 	.word	0x20000138

08000c10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c14:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <SystemInit+0x20>)
 8000c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c1a:	4a05      	ldr	r2, [pc, #20]	; (8000c30 <SystemInit+0x20>)
 8000c1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c6c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c38:	480d      	ldr	r0, [pc, #52]	; (8000c70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c3a:	490e      	ldr	r1, [pc, #56]	; (8000c74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c3c:	4a0e      	ldr	r2, [pc, #56]	; (8000c78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c40:	e002      	b.n	8000c48 <LoopCopyDataInit>

08000c42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c46:	3304      	adds	r3, #4

08000c48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c4c:	d3f9      	bcc.n	8000c42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c4e:	4a0b      	ldr	r2, [pc, #44]	; (8000c7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c50:	4c0b      	ldr	r4, [pc, #44]	; (8000c80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c54:	e001      	b.n	8000c5a <LoopFillZerobss>

08000c56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c58:	3204      	adds	r2, #4

08000c5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c5c:	d3fb      	bcc.n	8000c56 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c5e:	f7ff ffd7 	bl	8000c10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c62:	f001 ffe1 	bl	8002c28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c66:	f7ff fd6f 	bl	8000748 <main>
  bx  lr    
 8000c6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c6c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000c70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c74:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c78:	0800445c 	.word	0x0800445c
  ldr r2, =_sbss
 8000c7c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c80:	20000138 	.word	0x20000138

08000c84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c84:	e7fe      	b.n	8000c84 <ADC_IRQHandler>
	...

08000c88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c8c:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <HAL_Init+0x40>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a0d      	ldr	r2, [pc, #52]	; (8000cc8 <HAL_Init+0x40>)
 8000c92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c98:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <HAL_Init+0x40>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a0a      	ldr	r2, [pc, #40]	; (8000cc8 <HAL_Init+0x40>)
 8000c9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ca2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ca4:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <HAL_Init+0x40>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a07      	ldr	r2, [pc, #28]	; (8000cc8 <HAL_Init+0x40>)
 8000caa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb0:	2003      	movs	r0, #3
 8000cb2:	f000 f931 	bl	8000f18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cb6:	200f      	movs	r0, #15
 8000cb8:	f000 f808 	bl	8000ccc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cbc:	f7ff fe5c 	bl	8000978 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40023c00 	.word	0x40023c00

08000ccc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cd4:	4b12      	ldr	r3, [pc, #72]	; (8000d20 <HAL_InitTick+0x54>)
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <HAL_InitTick+0x58>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	4619      	mov	r1, r3
 8000cde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ce2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cea:	4618      	mov	r0, r3
 8000cec:	f000 f93b 	bl	8000f66 <HAL_SYSTICK_Config>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e00e      	b.n	8000d18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2b0f      	cmp	r3, #15
 8000cfe:	d80a      	bhi.n	8000d16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d00:	2200      	movs	r2, #0
 8000d02:	6879      	ldr	r1, [r7, #4]
 8000d04:	f04f 30ff 	mov.w	r0, #4294967295
 8000d08:	f000 f911 	bl	8000f2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d0c:	4a06      	ldr	r2, [pc, #24]	; (8000d28 <HAL_InitTick+0x5c>)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d12:	2300      	movs	r3, #0
 8000d14:	e000      	b.n	8000d18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d16:	2301      	movs	r3, #1
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20000000 	.word	0x20000000
 8000d24:	20000008 	.word	0x20000008
 8000d28:	20000004 	.word	0x20000004

08000d2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d30:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <HAL_IncTick+0x20>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	461a      	mov	r2, r3
 8000d36:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <HAL_IncTick+0x24>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	4a04      	ldr	r2, [pc, #16]	; (8000d50 <HAL_IncTick+0x24>)
 8000d3e:	6013      	str	r3, [r2, #0]
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	20000008 	.word	0x20000008
 8000d50:	20000124 	.word	0x20000124

08000d54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  return uwTick;
 8000d58:	4b03      	ldr	r3, [pc, #12]	; (8000d68 <HAL_GetTick+0x14>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	20000124 	.word	0x20000124

08000d6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d74:	f7ff ffee 	bl	8000d54 <HAL_GetTick>
 8000d78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d84:	d005      	beq.n	8000d92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d86:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <HAL_Delay+0x44>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	4413      	add	r3, r2
 8000d90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d92:	bf00      	nop
 8000d94:	f7ff ffde 	bl	8000d54 <HAL_GetTick>
 8000d98:	4602      	mov	r2, r0
 8000d9a:	68bb      	ldr	r3, [r7, #8]
 8000d9c:	1ad3      	subs	r3, r2, r3
 8000d9e:	68fa      	ldr	r2, [r7, #12]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d8f7      	bhi.n	8000d94 <HAL_Delay+0x28>
  {
  }
}
 8000da4:	bf00      	nop
 8000da6:	bf00      	nop
 8000da8:	3710      	adds	r7, #16
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	20000008 	.word	0x20000008

08000db4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	f003 0307 	and.w	r3, r3, #7
 8000dc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dc4:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dca:	68ba      	ldr	r2, [r7, #8]
 8000dcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ddc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000de0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000de4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000de6:	4a04      	ldr	r2, [pc, #16]	; (8000df8 <__NVIC_SetPriorityGrouping+0x44>)
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	60d3      	str	r3, [r2, #12]
}
 8000dec:	bf00      	nop
 8000dee:	3714      	adds	r7, #20
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e00:	4b04      	ldr	r3, [pc, #16]	; (8000e14 <__NVIC_GetPriorityGrouping+0x18>)
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	0a1b      	lsrs	r3, r3, #8
 8000e06:	f003 0307 	and.w	r3, r3, #7
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	6039      	str	r1, [r7, #0]
 8000e22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	db0a      	blt.n	8000e42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	b2da      	uxtb	r2, r3
 8000e30:	490c      	ldr	r1, [pc, #48]	; (8000e64 <__NVIC_SetPriority+0x4c>)
 8000e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e36:	0112      	lsls	r2, r2, #4
 8000e38:	b2d2      	uxtb	r2, r2
 8000e3a:	440b      	add	r3, r1
 8000e3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e40:	e00a      	b.n	8000e58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	b2da      	uxtb	r2, r3
 8000e46:	4908      	ldr	r1, [pc, #32]	; (8000e68 <__NVIC_SetPriority+0x50>)
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	f003 030f 	and.w	r3, r3, #15
 8000e4e:	3b04      	subs	r3, #4
 8000e50:	0112      	lsls	r2, r2, #4
 8000e52:	b2d2      	uxtb	r2, r2
 8000e54:	440b      	add	r3, r1
 8000e56:	761a      	strb	r2, [r3, #24]
}
 8000e58:	bf00      	nop
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	e000e100 	.word	0xe000e100
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b089      	sub	sp, #36	; 0x24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	60f8      	str	r0, [r7, #12]
 8000e74:	60b9      	str	r1, [r7, #8]
 8000e76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	f003 0307 	and.w	r3, r3, #7
 8000e7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	f1c3 0307 	rsb	r3, r3, #7
 8000e86:	2b04      	cmp	r3, #4
 8000e88:	bf28      	it	cs
 8000e8a:	2304      	movcs	r3, #4
 8000e8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	3304      	adds	r3, #4
 8000e92:	2b06      	cmp	r3, #6
 8000e94:	d902      	bls.n	8000e9c <NVIC_EncodePriority+0x30>
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	3b03      	subs	r3, #3
 8000e9a:	e000      	b.n	8000e9e <NVIC_EncodePriority+0x32>
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea4:	69bb      	ldr	r3, [r7, #24]
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	43da      	mvns	r2, r3
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	401a      	ands	r2, r3
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	fa01 f303 	lsl.w	r3, r1, r3
 8000ebe:	43d9      	mvns	r1, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec4:	4313      	orrs	r3, r2
         );
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3724      	adds	r7, #36	; 0x24
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
	...

08000ed4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	3b01      	subs	r3, #1
 8000ee0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ee4:	d301      	bcc.n	8000eea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e00f      	b.n	8000f0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eea:	4a0a      	ldr	r2, [pc, #40]	; (8000f14 <SysTick_Config+0x40>)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ef2:	210f      	movs	r1, #15
 8000ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef8:	f7ff ff8e 	bl	8000e18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000efc:	4b05      	ldr	r3, [pc, #20]	; (8000f14 <SysTick_Config+0x40>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f02:	4b04      	ldr	r3, [pc, #16]	; (8000f14 <SysTick_Config+0x40>)
 8000f04:	2207      	movs	r2, #7
 8000f06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	e000e010 	.word	0xe000e010

08000f18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f7ff ff47 	bl	8000db4 <__NVIC_SetPriorityGrouping>
}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b086      	sub	sp, #24
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	4603      	mov	r3, r0
 8000f36:	60b9      	str	r1, [r7, #8]
 8000f38:	607a      	str	r2, [r7, #4]
 8000f3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f40:	f7ff ff5c 	bl	8000dfc <__NVIC_GetPriorityGrouping>
 8000f44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	68b9      	ldr	r1, [r7, #8]
 8000f4a:	6978      	ldr	r0, [r7, #20]
 8000f4c:	f7ff ff8e 	bl	8000e6c <NVIC_EncodePriority>
 8000f50:	4602      	mov	r2, r0
 8000f52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f56:	4611      	mov	r1, r2
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff ff5d 	bl	8000e18 <__NVIC_SetPriority>
}
 8000f5e:	bf00      	nop
 8000f60:	3718      	adds	r7, #24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b082      	sub	sp, #8
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f7ff ffb0 	bl	8000ed4 <SysTick_Config>
 8000f74:	4603      	mov	r3, r0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
	...

08000f80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b089      	sub	sp, #36	; 0x24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f92:	2300      	movs	r3, #0
 8000f94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f96:	2300      	movs	r3, #0
 8000f98:	61fb      	str	r3, [r7, #28]
 8000f9a:	e159      	b.n	8001250 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	697a      	ldr	r2, [r7, #20]
 8000fac:	4013      	ands	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	f040 8148 	bne.w	800124a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f003 0303 	and.w	r3, r3, #3
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d005      	beq.n	8000fd2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fce:	2b02      	cmp	r3, #2
 8000fd0:	d130      	bne.n	8001034 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	2203      	movs	r2, #3
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	68da      	ldr	r2, [r3, #12]
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001008:	2201      	movs	r2, #1
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	43db      	mvns	r3, r3
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	4013      	ands	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	091b      	lsrs	r3, r3, #4
 800101e:	f003 0201 	and.w	r2, r3, #1
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4313      	orrs	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f003 0303 	and.w	r3, r3, #3
 800103c:	2b03      	cmp	r3, #3
 800103e:	d017      	beq.n	8001070 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	2203      	movs	r2, #3
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	43db      	mvns	r3, r3
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	4013      	ands	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	689a      	ldr	r2, [r3, #8]
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	4313      	orrs	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f003 0303 	and.w	r3, r3, #3
 8001078:	2b02      	cmp	r3, #2
 800107a:	d123      	bne.n	80010c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	08da      	lsrs	r2, r3, #3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3208      	adds	r2, #8
 8001084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001088:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	f003 0307 	and.w	r3, r3, #7
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	220f      	movs	r2, #15
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	43db      	mvns	r3, r3
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	4013      	ands	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	691a      	ldr	r2, [r3, #16]
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	f003 0307 	and.w	r3, r3, #7
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	08da      	lsrs	r2, r3, #3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	3208      	adds	r2, #8
 80010be:	69b9      	ldr	r1, [r7, #24]
 80010c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	2203      	movs	r2, #3
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4013      	ands	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f003 0203 	and.w	r2, r3, #3
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001100:	2b00      	cmp	r3, #0
 8001102:	f000 80a2 	beq.w	800124a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	60fb      	str	r3, [r7, #12]
 800110a:	4b57      	ldr	r3, [pc, #348]	; (8001268 <HAL_GPIO_Init+0x2e8>)
 800110c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110e:	4a56      	ldr	r2, [pc, #344]	; (8001268 <HAL_GPIO_Init+0x2e8>)
 8001110:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001114:	6453      	str	r3, [r2, #68]	; 0x44
 8001116:	4b54      	ldr	r3, [pc, #336]	; (8001268 <HAL_GPIO_Init+0x2e8>)
 8001118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001122:	4a52      	ldr	r2, [pc, #328]	; (800126c <HAL_GPIO_Init+0x2ec>)
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	089b      	lsrs	r3, r3, #2
 8001128:	3302      	adds	r3, #2
 800112a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800112e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	f003 0303 	and.w	r3, r3, #3
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	220f      	movs	r2, #15
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43db      	mvns	r3, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4013      	ands	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a49      	ldr	r2, [pc, #292]	; (8001270 <HAL_GPIO_Init+0x2f0>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d019      	beq.n	8001182 <HAL_GPIO_Init+0x202>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a48      	ldr	r2, [pc, #288]	; (8001274 <HAL_GPIO_Init+0x2f4>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d013      	beq.n	800117e <HAL_GPIO_Init+0x1fe>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a47      	ldr	r2, [pc, #284]	; (8001278 <HAL_GPIO_Init+0x2f8>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d00d      	beq.n	800117a <HAL_GPIO_Init+0x1fa>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a46      	ldr	r2, [pc, #280]	; (800127c <HAL_GPIO_Init+0x2fc>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d007      	beq.n	8001176 <HAL_GPIO_Init+0x1f6>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a45      	ldr	r2, [pc, #276]	; (8001280 <HAL_GPIO_Init+0x300>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d101      	bne.n	8001172 <HAL_GPIO_Init+0x1f2>
 800116e:	2304      	movs	r3, #4
 8001170:	e008      	b.n	8001184 <HAL_GPIO_Init+0x204>
 8001172:	2307      	movs	r3, #7
 8001174:	e006      	b.n	8001184 <HAL_GPIO_Init+0x204>
 8001176:	2303      	movs	r3, #3
 8001178:	e004      	b.n	8001184 <HAL_GPIO_Init+0x204>
 800117a:	2302      	movs	r3, #2
 800117c:	e002      	b.n	8001184 <HAL_GPIO_Init+0x204>
 800117e:	2301      	movs	r3, #1
 8001180:	e000      	b.n	8001184 <HAL_GPIO_Init+0x204>
 8001182:	2300      	movs	r3, #0
 8001184:	69fa      	ldr	r2, [r7, #28]
 8001186:	f002 0203 	and.w	r2, r2, #3
 800118a:	0092      	lsls	r2, r2, #2
 800118c:	4093      	lsls	r3, r2
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4313      	orrs	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001194:	4935      	ldr	r1, [pc, #212]	; (800126c <HAL_GPIO_Init+0x2ec>)
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	089b      	lsrs	r3, r3, #2
 800119a:	3302      	adds	r3, #2
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011a2:	4b38      	ldr	r3, [pc, #224]	; (8001284 <HAL_GPIO_Init+0x304>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	43db      	mvns	r3, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4013      	ands	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d003      	beq.n	80011c6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011c6:	4a2f      	ldr	r2, [pc, #188]	; (8001284 <HAL_GPIO_Init+0x304>)
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80011cc:	4b2d      	ldr	r3, [pc, #180]	; (8001284 <HAL_GPIO_Init+0x304>)
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	43db      	mvns	r3, r3
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4013      	ands	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d003      	beq.n	80011f0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011f0:	4a24      	ldr	r2, [pc, #144]	; (8001284 <HAL_GPIO_Init+0x304>)
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011f6:	4b23      	ldr	r3, [pc, #140]	; (8001284 <HAL_GPIO_Init+0x304>)
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	43db      	mvns	r3, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4013      	ands	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d003      	beq.n	800121a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	4313      	orrs	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800121a:	4a1a      	ldr	r2, [pc, #104]	; (8001284 <HAL_GPIO_Init+0x304>)
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001220:	4b18      	ldr	r3, [pc, #96]	; (8001284 <HAL_GPIO_Init+0x304>)
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	43db      	mvns	r3, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4013      	ands	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d003      	beq.n	8001244 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	4313      	orrs	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001244:	4a0f      	ldr	r2, [pc, #60]	; (8001284 <HAL_GPIO_Init+0x304>)
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	3301      	adds	r3, #1
 800124e:	61fb      	str	r3, [r7, #28]
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	2b0f      	cmp	r3, #15
 8001254:	f67f aea2 	bls.w	8000f9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001258:	bf00      	nop
 800125a:	bf00      	nop
 800125c:	3724      	adds	r7, #36	; 0x24
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	40023800 	.word	0x40023800
 800126c:	40013800 	.word	0x40013800
 8001270:	40020000 	.word	0x40020000
 8001274:	40020400 	.word	0x40020400
 8001278:	40020800 	.word	0x40020800
 800127c:	40020c00 	.word	0x40020c00
 8001280:	40021000 	.word	0x40021000
 8001284:	40013c00 	.word	0x40013c00

08001288 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d101      	bne.n	800129a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e12b      	b.n	80014f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d106      	bne.n	80012b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2200      	movs	r2, #0
 80012aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f7ff fb8a 	bl	80009c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2224      	movs	r2, #36	; 0x24
 80012b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f022 0201 	bic.w	r2, r2, #1
 80012ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80012da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80012ec:	f001 f838 	bl	8002360 <HAL_RCC_GetPCLK1Freq>
 80012f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	4a81      	ldr	r2, [pc, #516]	; (80014fc <HAL_I2C_Init+0x274>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d807      	bhi.n	800130c <HAL_I2C_Init+0x84>
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	4a80      	ldr	r2, [pc, #512]	; (8001500 <HAL_I2C_Init+0x278>)
 8001300:	4293      	cmp	r3, r2
 8001302:	bf94      	ite	ls
 8001304:	2301      	movls	r3, #1
 8001306:	2300      	movhi	r3, #0
 8001308:	b2db      	uxtb	r3, r3
 800130a:	e006      	b.n	800131a <HAL_I2C_Init+0x92>
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	4a7d      	ldr	r2, [pc, #500]	; (8001504 <HAL_I2C_Init+0x27c>)
 8001310:	4293      	cmp	r3, r2
 8001312:	bf94      	ite	ls
 8001314:	2301      	movls	r3, #1
 8001316:	2300      	movhi	r3, #0
 8001318:	b2db      	uxtb	r3, r3
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e0e7      	b.n	80014f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	4a78      	ldr	r2, [pc, #480]	; (8001508 <HAL_I2C_Init+0x280>)
 8001326:	fba2 2303 	umull	r2, r3, r2, r3
 800132a:	0c9b      	lsrs	r3, r3, #18
 800132c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	68ba      	ldr	r2, [r7, #8]
 800133e:	430a      	orrs	r2, r1
 8001340:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	6a1b      	ldr	r3, [r3, #32]
 8001348:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	4a6a      	ldr	r2, [pc, #424]	; (80014fc <HAL_I2C_Init+0x274>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d802      	bhi.n	800135c <HAL_I2C_Init+0xd4>
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	3301      	adds	r3, #1
 800135a:	e009      	b.n	8001370 <HAL_I2C_Init+0xe8>
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001362:	fb02 f303 	mul.w	r3, r2, r3
 8001366:	4a69      	ldr	r2, [pc, #420]	; (800150c <HAL_I2C_Init+0x284>)
 8001368:	fba2 2303 	umull	r2, r3, r2, r3
 800136c:	099b      	lsrs	r3, r3, #6
 800136e:	3301      	adds	r3, #1
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	6812      	ldr	r2, [r2, #0]
 8001374:	430b      	orrs	r3, r1
 8001376:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	69db      	ldr	r3, [r3, #28]
 800137e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001382:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	495c      	ldr	r1, [pc, #368]	; (80014fc <HAL_I2C_Init+0x274>)
 800138c:	428b      	cmp	r3, r1
 800138e:	d819      	bhi.n	80013c4 <HAL_I2C_Init+0x13c>
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	1e59      	subs	r1, r3, #1
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	fbb1 f3f3 	udiv	r3, r1, r3
 800139e:	1c59      	adds	r1, r3, #1
 80013a0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80013a4:	400b      	ands	r3, r1
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d00a      	beq.n	80013c0 <HAL_I2C_Init+0x138>
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	1e59      	subs	r1, r3, #1
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80013b8:	3301      	adds	r3, #1
 80013ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013be:	e051      	b.n	8001464 <HAL_I2C_Init+0x1dc>
 80013c0:	2304      	movs	r3, #4
 80013c2:	e04f      	b.n	8001464 <HAL_I2C_Init+0x1dc>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d111      	bne.n	80013f0 <HAL_I2C_Init+0x168>
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	1e58      	subs	r0, r3, #1
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6859      	ldr	r1, [r3, #4]
 80013d4:	460b      	mov	r3, r1
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	440b      	add	r3, r1
 80013da:	fbb0 f3f3 	udiv	r3, r0, r3
 80013de:	3301      	adds	r3, #1
 80013e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	bf0c      	ite	eq
 80013e8:	2301      	moveq	r3, #1
 80013ea:	2300      	movne	r3, #0
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	e012      	b.n	8001416 <HAL_I2C_Init+0x18e>
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	1e58      	subs	r0, r3, #1
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6859      	ldr	r1, [r3, #4]
 80013f8:	460b      	mov	r3, r1
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	440b      	add	r3, r1
 80013fe:	0099      	lsls	r1, r3, #2
 8001400:	440b      	add	r3, r1
 8001402:	fbb0 f3f3 	udiv	r3, r0, r3
 8001406:	3301      	adds	r3, #1
 8001408:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800140c:	2b00      	cmp	r3, #0
 800140e:	bf0c      	ite	eq
 8001410:	2301      	moveq	r3, #1
 8001412:	2300      	movne	r3, #0
 8001414:	b2db      	uxtb	r3, r3
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <HAL_I2C_Init+0x196>
 800141a:	2301      	movs	r3, #1
 800141c:	e022      	b.n	8001464 <HAL_I2C_Init+0x1dc>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d10e      	bne.n	8001444 <HAL_I2C_Init+0x1bc>
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	1e58      	subs	r0, r3, #1
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6859      	ldr	r1, [r3, #4]
 800142e:	460b      	mov	r3, r1
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	440b      	add	r3, r1
 8001434:	fbb0 f3f3 	udiv	r3, r0, r3
 8001438:	3301      	adds	r3, #1
 800143a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800143e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001442:	e00f      	b.n	8001464 <HAL_I2C_Init+0x1dc>
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	1e58      	subs	r0, r3, #1
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6859      	ldr	r1, [r3, #4]
 800144c:	460b      	mov	r3, r1
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	440b      	add	r3, r1
 8001452:	0099      	lsls	r1, r3, #2
 8001454:	440b      	add	r3, r1
 8001456:	fbb0 f3f3 	udiv	r3, r0, r3
 800145a:	3301      	adds	r3, #1
 800145c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001460:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001464:	6879      	ldr	r1, [r7, #4]
 8001466:	6809      	ldr	r1, [r1, #0]
 8001468:	4313      	orrs	r3, r2
 800146a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	69da      	ldr	r2, [r3, #28]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6a1b      	ldr	r3, [r3, #32]
 800147e:	431a      	orrs	r2, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	430a      	orrs	r2, r1
 8001486:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001492:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	6911      	ldr	r1, [r2, #16]
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	68d2      	ldr	r2, [r2, #12]
 800149e:	4311      	orrs	r1, r2
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	6812      	ldr	r2, [r2, #0]
 80014a4:	430b      	orrs	r3, r1
 80014a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	68db      	ldr	r3, [r3, #12]
 80014ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	695a      	ldr	r2, [r3, #20]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	699b      	ldr	r3, [r3, #24]
 80014ba:	431a      	orrs	r2, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	430a      	orrs	r2, r1
 80014c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f042 0201 	orr.w	r2, r2, #1
 80014d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2220      	movs	r2, #32
 80014de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2200      	movs	r2, #0
 80014e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2200      	movs	r2, #0
 80014ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80014f0:	2300      	movs	r3, #0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3710      	adds	r7, #16
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	000186a0 	.word	0x000186a0
 8001500:	001e847f 	.word	0x001e847f
 8001504:	003d08ff 	.word	0x003d08ff
 8001508:	431bde83 	.word	0x431bde83
 800150c:	10624dd3 	.word	0x10624dd3

08001510 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b088      	sub	sp, #32
 8001514:	af02      	add	r7, sp, #8
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	607a      	str	r2, [r7, #4]
 800151a:	461a      	mov	r2, r3
 800151c:	460b      	mov	r3, r1
 800151e:	817b      	strh	r3, [r7, #10]
 8001520:	4613      	mov	r3, r2
 8001522:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001524:	f7ff fc16 	bl	8000d54 <HAL_GetTick>
 8001528:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001530:	b2db      	uxtb	r3, r3
 8001532:	2b20      	cmp	r3, #32
 8001534:	f040 80e0 	bne.w	80016f8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	9300      	str	r3, [sp, #0]
 800153c:	2319      	movs	r3, #25
 800153e:	2201      	movs	r2, #1
 8001540:	4970      	ldr	r1, [pc, #448]	; (8001704 <HAL_I2C_Master_Transmit+0x1f4>)
 8001542:	68f8      	ldr	r0, [r7, #12]
 8001544:	f000 f964 	bl	8001810 <I2C_WaitOnFlagUntilTimeout>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800154e:	2302      	movs	r3, #2
 8001550:	e0d3      	b.n	80016fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001558:	2b01      	cmp	r3, #1
 800155a:	d101      	bne.n	8001560 <HAL_I2C_Master_Transmit+0x50>
 800155c:	2302      	movs	r3, #2
 800155e:	e0cc      	b.n	80016fa <HAL_I2C_Master_Transmit+0x1ea>
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	2201      	movs	r2, #1
 8001564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	2b01      	cmp	r3, #1
 8001574:	d007      	beq.n	8001586 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f042 0201 	orr.w	r2, r2, #1
 8001584:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001594:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	2221      	movs	r2, #33	; 0x21
 800159a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2210      	movs	r2, #16
 80015a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	2200      	movs	r2, #0
 80015aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	893a      	ldrh	r2, [r7, #8]
 80015b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015bc:	b29a      	uxth	r2, r3
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	4a50      	ldr	r2, [pc, #320]	; (8001708 <HAL_I2C_Master_Transmit+0x1f8>)
 80015c6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80015c8:	8979      	ldrh	r1, [r7, #10]
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	6a3a      	ldr	r2, [r7, #32]
 80015ce:	68f8      	ldr	r0, [r7, #12]
 80015d0:	f000 f89c 	bl	800170c <I2C_MasterRequestWrite>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e08d      	b.n	80016fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015de:	2300      	movs	r3, #0
 80015e0:	613b      	str	r3, [r7, #16]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	695b      	ldr	r3, [r3, #20]
 80015e8:	613b      	str	r3, [r7, #16]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	613b      	str	r3, [r7, #16]
 80015f2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80015f4:	e066      	b.n	80016c4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015f6:	697a      	ldr	r2, [r7, #20]
 80015f8:	6a39      	ldr	r1, [r7, #32]
 80015fa:	68f8      	ldr	r0, [r7, #12]
 80015fc:	f000 f9de 	bl	80019bc <I2C_WaitOnTXEFlagUntilTimeout>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d00d      	beq.n	8001622 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160a:	2b04      	cmp	r3, #4
 800160c:	d107      	bne.n	800161e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800161c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e06b      	b.n	80016fa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001626:	781a      	ldrb	r2, [r3, #0]
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001632:	1c5a      	adds	r2, r3, #1
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800163c:	b29b      	uxth	r3, r3
 800163e:	3b01      	subs	r3, #1
 8001640:	b29a      	uxth	r2, r3
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800164a:	3b01      	subs	r3, #1
 800164c:	b29a      	uxth	r2, r3
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	695b      	ldr	r3, [r3, #20]
 8001658:	f003 0304 	and.w	r3, r3, #4
 800165c:	2b04      	cmp	r3, #4
 800165e:	d11b      	bne.n	8001698 <HAL_I2C_Master_Transmit+0x188>
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001664:	2b00      	cmp	r3, #0
 8001666:	d017      	beq.n	8001698 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166c:	781a      	ldrb	r2, [r3, #0]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001678:	1c5a      	adds	r2, r3, #1
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001682:	b29b      	uxth	r3, r3
 8001684:	3b01      	subs	r3, #1
 8001686:	b29a      	uxth	r2, r3
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001690:	3b01      	subs	r3, #1
 8001692:	b29a      	uxth	r2, r3
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001698:	697a      	ldr	r2, [r7, #20]
 800169a:	6a39      	ldr	r1, [r7, #32]
 800169c:	68f8      	ldr	r0, [r7, #12]
 800169e:	f000 f9ce 	bl	8001a3e <I2C_WaitOnBTFFlagUntilTimeout>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d00d      	beq.n	80016c4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ac:	2b04      	cmp	r3, #4
 80016ae:	d107      	bne.n	80016c0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016be:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e01a      	b.n	80016fa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d194      	bne.n	80015f6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	2220      	movs	r2, #32
 80016e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2200      	movs	r2, #0
 80016e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2200      	movs	r2, #0
 80016f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80016f4:	2300      	movs	r3, #0
 80016f6:	e000      	b.n	80016fa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80016f8:	2302      	movs	r3, #2
  }
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3718      	adds	r7, #24
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	00100002 	.word	0x00100002
 8001708:	ffff0000 	.word	0xffff0000

0800170c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b088      	sub	sp, #32
 8001710:	af02      	add	r7, sp, #8
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	607a      	str	r2, [r7, #4]
 8001716:	603b      	str	r3, [r7, #0]
 8001718:	460b      	mov	r3, r1
 800171a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001720:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	2b08      	cmp	r3, #8
 8001726:	d006      	beq.n	8001736 <I2C_MasterRequestWrite+0x2a>
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	2b01      	cmp	r3, #1
 800172c:	d003      	beq.n	8001736 <I2C_MasterRequestWrite+0x2a>
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001734:	d108      	bne.n	8001748 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	e00b      	b.n	8001760 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174c:	2b12      	cmp	r3, #18
 800174e:	d107      	bne.n	8001760 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800175e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	9300      	str	r3, [sp, #0]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2200      	movs	r2, #0
 8001768:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800176c:	68f8      	ldr	r0, [r7, #12]
 800176e:	f000 f84f 	bl	8001810 <I2C_WaitOnFlagUntilTimeout>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d00d      	beq.n	8001794 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001782:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001786:	d103      	bne.n	8001790 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800178e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e035      	b.n	8001800 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	691b      	ldr	r3, [r3, #16]
 8001798:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800179c:	d108      	bne.n	80017b0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800179e:	897b      	ldrh	r3, [r7, #10]
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	461a      	mov	r2, r3
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80017ac:	611a      	str	r2, [r3, #16]
 80017ae:	e01b      	b.n	80017e8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80017b0:	897b      	ldrh	r3, [r7, #10]
 80017b2:	11db      	asrs	r3, r3, #7
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	f003 0306 	and.w	r3, r3, #6
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	f063 030f 	orn	r3, r3, #15
 80017c0:	b2da      	uxtb	r2, r3
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	490e      	ldr	r1, [pc, #56]	; (8001808 <I2C_MasterRequestWrite+0xfc>)
 80017ce:	68f8      	ldr	r0, [r7, #12]
 80017d0:	f000 f875 	bl	80018be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e010      	b.n	8001800 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80017de:	897b      	ldrh	r3, [r7, #10]
 80017e0:	b2da      	uxtb	r2, r3
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	4907      	ldr	r1, [pc, #28]	; (800180c <I2C_MasterRequestWrite+0x100>)
 80017ee:	68f8      	ldr	r0, [r7, #12]
 80017f0:	f000 f865 	bl	80018be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e000      	b.n	8001800 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80017fe:	2300      	movs	r3, #0
}
 8001800:	4618      	mov	r0, r3
 8001802:	3718      	adds	r7, #24
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	00010008 	.word	0x00010008
 800180c:	00010002 	.word	0x00010002

08001810 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	603b      	str	r3, [r7, #0]
 800181c:	4613      	mov	r3, r2
 800181e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001820:	e025      	b.n	800186e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001828:	d021      	beq.n	800186e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800182a:	f7ff fa93 	bl	8000d54 <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	683a      	ldr	r2, [r7, #0]
 8001836:	429a      	cmp	r2, r3
 8001838:	d302      	bcc.n	8001840 <I2C_WaitOnFlagUntilTimeout+0x30>
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d116      	bne.n	800186e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2200      	movs	r2, #0
 8001844:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	2220      	movs	r2, #32
 800184a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2200      	movs	r2, #0
 8001852:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185a:	f043 0220 	orr.w	r2, r3, #32
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2200      	movs	r2, #0
 8001866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e023      	b.n	80018b6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	0c1b      	lsrs	r3, r3, #16
 8001872:	b2db      	uxtb	r3, r3
 8001874:	2b01      	cmp	r3, #1
 8001876:	d10d      	bne.n	8001894 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	43da      	mvns	r2, r3
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	4013      	ands	r3, r2
 8001884:	b29b      	uxth	r3, r3
 8001886:	2b00      	cmp	r3, #0
 8001888:	bf0c      	ite	eq
 800188a:	2301      	moveq	r3, #1
 800188c:	2300      	movne	r3, #0
 800188e:	b2db      	uxtb	r3, r3
 8001890:	461a      	mov	r2, r3
 8001892:	e00c      	b.n	80018ae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	699b      	ldr	r3, [r3, #24]
 800189a:	43da      	mvns	r2, r3
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	4013      	ands	r3, r2
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	bf0c      	ite	eq
 80018a6:	2301      	moveq	r3, #1
 80018a8:	2300      	movne	r3, #0
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	461a      	mov	r2, r3
 80018ae:	79fb      	ldrb	r3, [r7, #7]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d0b6      	beq.n	8001822 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	b084      	sub	sp, #16
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	60f8      	str	r0, [r7, #12]
 80018c6:	60b9      	str	r1, [r7, #8]
 80018c8:	607a      	str	r2, [r7, #4]
 80018ca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80018cc:	e051      	b.n	8001972 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	695b      	ldr	r3, [r3, #20]
 80018d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018dc:	d123      	bne.n	8001926 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018ec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80018f6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2200      	movs	r2, #0
 80018fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2220      	movs	r2, #32
 8001902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2200      	movs	r2, #0
 800190a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001912:	f043 0204 	orr.w	r2, r3, #4
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2200      	movs	r2, #0
 800191e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e046      	b.n	80019b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800192c:	d021      	beq.n	8001972 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800192e:	f7ff fa11 	bl	8000d54 <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	429a      	cmp	r2, r3
 800193c:	d302      	bcc.n	8001944 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d116      	bne.n	8001972 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	2200      	movs	r2, #0
 8001948:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	2220      	movs	r2, #32
 800194e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2200      	movs	r2, #0
 8001956:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195e:	f043 0220 	orr.w	r2, r3, #32
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2200      	movs	r2, #0
 800196a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e020      	b.n	80019b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	0c1b      	lsrs	r3, r3, #16
 8001976:	b2db      	uxtb	r3, r3
 8001978:	2b01      	cmp	r3, #1
 800197a:	d10c      	bne.n	8001996 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	695b      	ldr	r3, [r3, #20]
 8001982:	43da      	mvns	r2, r3
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	4013      	ands	r3, r2
 8001988:	b29b      	uxth	r3, r3
 800198a:	2b00      	cmp	r3, #0
 800198c:	bf14      	ite	ne
 800198e:	2301      	movne	r3, #1
 8001990:	2300      	moveq	r3, #0
 8001992:	b2db      	uxtb	r3, r3
 8001994:	e00b      	b.n	80019ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	43da      	mvns	r2, r3
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	4013      	ands	r3, r2
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	bf14      	ite	ne
 80019a8:	2301      	movne	r3, #1
 80019aa:	2300      	moveq	r3, #0
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d18d      	bne.n	80018ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80019b2:	2300      	movs	r3, #0
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3710      	adds	r7, #16
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}

080019bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80019c8:	e02d      	b.n	8001a26 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80019ca:	68f8      	ldr	r0, [r7, #12]
 80019cc:	f000 f878 	bl	8001ac0 <I2C_IsAcknowledgeFailed>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e02d      	b.n	8001a36 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019e0:	d021      	beq.n	8001a26 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019e2:	f7ff f9b7 	bl	8000d54 <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	68ba      	ldr	r2, [r7, #8]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d302      	bcc.n	80019f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d116      	bne.n	8001a26 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2200      	movs	r2, #0
 80019fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	2220      	movs	r2, #32
 8001a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a12:	f043 0220 	orr.w	r2, r3, #32
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e007      	b.n	8001a36 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	695b      	ldr	r3, [r3, #20]
 8001a2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a30:	2b80      	cmp	r3, #128	; 0x80
 8001a32:	d1ca      	bne.n	80019ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b084      	sub	sp, #16
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	60f8      	str	r0, [r7, #12]
 8001a46:	60b9      	str	r1, [r7, #8]
 8001a48:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001a4a:	e02d      	b.n	8001aa8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001a4c:	68f8      	ldr	r0, [r7, #12]
 8001a4e:	f000 f837 	bl	8001ac0 <I2C_IsAcknowledgeFailed>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e02d      	b.n	8001ab8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a62:	d021      	beq.n	8001aa8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a64:	f7ff f976 	bl	8000d54 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	68ba      	ldr	r2, [r7, #8]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d302      	bcc.n	8001a7a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d116      	bne.n	8001aa8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2220      	movs	r2, #32
 8001a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a94:	f043 0220 	orr.w	r2, r3, #32
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e007      	b.n	8001ab8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	695b      	ldr	r3, [r3, #20]
 8001aae:	f003 0304 	and.w	r3, r3, #4
 8001ab2:	2b04      	cmp	r3, #4
 8001ab4:	d1ca      	bne.n	8001a4c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3710      	adds	r7, #16
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	695b      	ldr	r3, [r3, #20]
 8001ace:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ad2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ad6:	d11b      	bne.n	8001b10 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001ae0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2220      	movs	r2, #32
 8001aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afc:	f043 0204 	orr.w	r2, r3, #4
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e000      	b.n	8001b12 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
	...

08001b20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e264      	b.n	8001ffc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d075      	beq.n	8001c2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b3e:	4ba3      	ldr	r3, [pc, #652]	; (8001dcc <HAL_RCC_OscConfig+0x2ac>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f003 030c 	and.w	r3, r3, #12
 8001b46:	2b04      	cmp	r3, #4
 8001b48:	d00c      	beq.n	8001b64 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b4a:	4ba0      	ldr	r3, [pc, #640]	; (8001dcc <HAL_RCC_OscConfig+0x2ac>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b52:	2b08      	cmp	r3, #8
 8001b54:	d112      	bne.n	8001b7c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b56:	4b9d      	ldr	r3, [pc, #628]	; (8001dcc <HAL_RCC_OscConfig+0x2ac>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b62:	d10b      	bne.n	8001b7c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b64:	4b99      	ldr	r3, [pc, #612]	; (8001dcc <HAL_RCC_OscConfig+0x2ac>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d05b      	beq.n	8001c28 <HAL_RCC_OscConfig+0x108>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d157      	bne.n	8001c28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e23f      	b.n	8001ffc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b84:	d106      	bne.n	8001b94 <HAL_RCC_OscConfig+0x74>
 8001b86:	4b91      	ldr	r3, [pc, #580]	; (8001dcc <HAL_RCC_OscConfig+0x2ac>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a90      	ldr	r2, [pc, #576]	; (8001dcc <HAL_RCC_OscConfig+0x2ac>)
 8001b8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b90:	6013      	str	r3, [r2, #0]
 8001b92:	e01d      	b.n	8001bd0 <HAL_RCC_OscConfig+0xb0>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b9c:	d10c      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x98>
 8001b9e:	4b8b      	ldr	r3, [pc, #556]	; (8001dcc <HAL_RCC_OscConfig+0x2ac>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a8a      	ldr	r2, [pc, #552]	; (8001dcc <HAL_RCC_OscConfig+0x2ac>)
 8001ba4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ba8:	6013      	str	r3, [r2, #0]
 8001baa:	4b88      	ldr	r3, [pc, #544]	; (8001dcc <HAL_RCC_OscConfig+0x2ac>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a87      	ldr	r2, [pc, #540]	; (8001dcc <HAL_RCC_OscConfig+0x2ac>)
 8001bb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bb4:	6013      	str	r3, [r2, #0]
 8001bb6:	e00b      	b.n	8001bd0 <HAL_RCC_OscConfig+0xb0>
 8001bb8:	4b84      	ldr	r3, [pc, #528]	; (8001dcc <HAL_RCC_OscConfig+0x2ac>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a83      	ldr	r2, [pc, #524]	; (8001dcc <HAL_RCC_OscConfig+0x2ac>)
 8001bbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bc2:	6013      	str	r3, [r2, #0]
 8001bc4:	4b81      	ldr	r3, [pc, #516]	; (8001dcc <HAL_RCC_OscConfig+0x2ac>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a80      	ldr	r2, [pc, #512]	; (8001dcc <HAL_RCC_OscConfig+0x2ac>)
 8001bca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d013      	beq.n	8001c00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd8:	f7ff f8bc 	bl	8000d54 <HAL_GetTick>
 8001bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bde:	e008      	b.n	8001bf2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001be0:	f7ff f8b8 	bl	8000d54 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b64      	cmp	r3, #100	; 0x64
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e204      	b.n	8001ffc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bf2:	4b76      	ldr	r3, [pc, #472]	; (8001dcc <HAL_RCC_OscConfig+0x2ac>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d0f0      	beq.n	8001be0 <HAL_RCC_OscConfig+0xc0>
 8001bfe:	e014      	b.n	8001c2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c00:	f7ff f8a8 	bl	8000d54 <HAL_GetTick>
 8001c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c06:	e008      	b.n	8001c1a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c08:	f7ff f8a4 	bl	8000d54 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b64      	cmp	r3, #100	; 0x64
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e1f0      	b.n	8001ffc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c1a:	4b6c      	ldr	r3, [pc, #432]	; (8001dcc <HAL_RCC_OscConfig+0x2ac>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d1f0      	bne.n	8001c08 <HAL_RCC_OscConfig+0xe8>
 8001c26:	e000      	b.n	8001c2a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d063      	beq.n	8001cfe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c36:	4b65      	ldr	r3, [pc, #404]	; (8001dcc <HAL_RCC_OscConfig+0x2ac>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f003 030c 	and.w	r3, r3, #12
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d00b      	beq.n	8001c5a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c42:	4b62      	ldr	r3, [pc, #392]	; (8001dcc <HAL_RCC_OscConfig+0x2ac>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c4a:	2b08      	cmp	r3, #8
 8001c4c:	d11c      	bne.n	8001c88 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c4e:	4b5f      	ldr	r3, [pc, #380]	; (8001dcc <HAL_RCC_OscConfig+0x2ac>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d116      	bne.n	8001c88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c5a:	4b5c      	ldr	r3, [pc, #368]	; (8001dcc <HAL_RCC_OscConfig+0x2ac>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d005      	beq.n	8001c72 <HAL_RCC_OscConfig+0x152>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d001      	beq.n	8001c72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e1c4      	b.n	8001ffc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c72:	4b56      	ldr	r3, [pc, #344]	; (8001dcc <HAL_RCC_OscConfig+0x2ac>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	691b      	ldr	r3, [r3, #16]
 8001c7e:	00db      	lsls	r3, r3, #3
 8001c80:	4952      	ldr	r1, [pc, #328]	; (8001dcc <HAL_RCC_OscConfig+0x2ac>)
 8001c82:	4313      	orrs	r3, r2
 8001c84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c86:	e03a      	b.n	8001cfe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d020      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c90:	4b4f      	ldr	r3, [pc, #316]	; (8001dd0 <HAL_RCC_OscConfig+0x2b0>)
 8001c92:	2201      	movs	r2, #1
 8001c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c96:	f7ff f85d 	bl	8000d54 <HAL_GetTick>
 8001c9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c9c:	e008      	b.n	8001cb0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c9e:	f7ff f859 	bl	8000d54 <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d901      	bls.n	8001cb0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e1a5      	b.n	8001ffc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cb0:	4b46      	ldr	r3, [pc, #280]	; (8001dcc <HAL_RCC_OscConfig+0x2ac>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0302 	and.w	r3, r3, #2
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d0f0      	beq.n	8001c9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cbc:	4b43      	ldr	r3, [pc, #268]	; (8001dcc <HAL_RCC_OscConfig+0x2ac>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	691b      	ldr	r3, [r3, #16]
 8001cc8:	00db      	lsls	r3, r3, #3
 8001cca:	4940      	ldr	r1, [pc, #256]	; (8001dcc <HAL_RCC_OscConfig+0x2ac>)
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	600b      	str	r3, [r1, #0]
 8001cd0:	e015      	b.n	8001cfe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cd2:	4b3f      	ldr	r3, [pc, #252]	; (8001dd0 <HAL_RCC_OscConfig+0x2b0>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd8:	f7ff f83c 	bl	8000d54 <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ce0:	f7ff f838 	bl	8000d54 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e184      	b.n	8001ffc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cf2:	4b36      	ldr	r3, [pc, #216]	; (8001dcc <HAL_RCC_OscConfig+0x2ac>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d1f0      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0308 	and.w	r3, r3, #8
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d030      	beq.n	8001d6c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	695b      	ldr	r3, [r3, #20]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d016      	beq.n	8001d40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d12:	4b30      	ldr	r3, [pc, #192]	; (8001dd4 <HAL_RCC_OscConfig+0x2b4>)
 8001d14:	2201      	movs	r2, #1
 8001d16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d18:	f7ff f81c 	bl	8000d54 <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d20:	f7ff f818 	bl	8000d54 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e164      	b.n	8001ffc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d32:	4b26      	ldr	r3, [pc, #152]	; (8001dcc <HAL_RCC_OscConfig+0x2ac>)
 8001d34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d0f0      	beq.n	8001d20 <HAL_RCC_OscConfig+0x200>
 8001d3e:	e015      	b.n	8001d6c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d40:	4b24      	ldr	r3, [pc, #144]	; (8001dd4 <HAL_RCC_OscConfig+0x2b4>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d46:	f7ff f805 	bl	8000d54 <HAL_GetTick>
 8001d4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d4c:	e008      	b.n	8001d60 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d4e:	f7ff f801 	bl	8000d54 <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d901      	bls.n	8001d60 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e14d      	b.n	8001ffc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d60:	4b1a      	ldr	r3, [pc, #104]	; (8001dcc <HAL_RCC_OscConfig+0x2ac>)
 8001d62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d1f0      	bne.n	8001d4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0304 	and.w	r3, r3, #4
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	f000 80a0 	beq.w	8001eba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d7e:	4b13      	ldr	r3, [pc, #76]	; (8001dcc <HAL_RCC_OscConfig+0x2ac>)
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d10f      	bne.n	8001daa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60bb      	str	r3, [r7, #8]
 8001d8e:	4b0f      	ldr	r3, [pc, #60]	; (8001dcc <HAL_RCC_OscConfig+0x2ac>)
 8001d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d92:	4a0e      	ldr	r2, [pc, #56]	; (8001dcc <HAL_RCC_OscConfig+0x2ac>)
 8001d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d98:	6413      	str	r3, [r2, #64]	; 0x40
 8001d9a:	4b0c      	ldr	r3, [pc, #48]	; (8001dcc <HAL_RCC_OscConfig+0x2ac>)
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da2:	60bb      	str	r3, [r7, #8]
 8001da4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001da6:	2301      	movs	r3, #1
 8001da8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001daa:	4b0b      	ldr	r3, [pc, #44]	; (8001dd8 <HAL_RCC_OscConfig+0x2b8>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d121      	bne.n	8001dfa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001db6:	4b08      	ldr	r3, [pc, #32]	; (8001dd8 <HAL_RCC_OscConfig+0x2b8>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a07      	ldr	r2, [pc, #28]	; (8001dd8 <HAL_RCC_OscConfig+0x2b8>)
 8001dbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dc2:	f7fe ffc7 	bl	8000d54 <HAL_GetTick>
 8001dc6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc8:	e011      	b.n	8001dee <HAL_RCC_OscConfig+0x2ce>
 8001dca:	bf00      	nop
 8001dcc:	40023800 	.word	0x40023800
 8001dd0:	42470000 	.word	0x42470000
 8001dd4:	42470e80 	.word	0x42470e80
 8001dd8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ddc:	f7fe ffba 	bl	8000d54 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e106      	b.n	8001ffc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dee:	4b85      	ldr	r3, [pc, #532]	; (8002004 <HAL_RCC_OscConfig+0x4e4>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d0f0      	beq.n	8001ddc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d106      	bne.n	8001e10 <HAL_RCC_OscConfig+0x2f0>
 8001e02:	4b81      	ldr	r3, [pc, #516]	; (8002008 <HAL_RCC_OscConfig+0x4e8>)
 8001e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e06:	4a80      	ldr	r2, [pc, #512]	; (8002008 <HAL_RCC_OscConfig+0x4e8>)
 8001e08:	f043 0301 	orr.w	r3, r3, #1
 8001e0c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e0e:	e01c      	b.n	8001e4a <HAL_RCC_OscConfig+0x32a>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	2b05      	cmp	r3, #5
 8001e16:	d10c      	bne.n	8001e32 <HAL_RCC_OscConfig+0x312>
 8001e18:	4b7b      	ldr	r3, [pc, #492]	; (8002008 <HAL_RCC_OscConfig+0x4e8>)
 8001e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e1c:	4a7a      	ldr	r2, [pc, #488]	; (8002008 <HAL_RCC_OscConfig+0x4e8>)
 8001e1e:	f043 0304 	orr.w	r3, r3, #4
 8001e22:	6713      	str	r3, [r2, #112]	; 0x70
 8001e24:	4b78      	ldr	r3, [pc, #480]	; (8002008 <HAL_RCC_OscConfig+0x4e8>)
 8001e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e28:	4a77      	ldr	r2, [pc, #476]	; (8002008 <HAL_RCC_OscConfig+0x4e8>)
 8001e2a:	f043 0301 	orr.w	r3, r3, #1
 8001e2e:	6713      	str	r3, [r2, #112]	; 0x70
 8001e30:	e00b      	b.n	8001e4a <HAL_RCC_OscConfig+0x32a>
 8001e32:	4b75      	ldr	r3, [pc, #468]	; (8002008 <HAL_RCC_OscConfig+0x4e8>)
 8001e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e36:	4a74      	ldr	r2, [pc, #464]	; (8002008 <HAL_RCC_OscConfig+0x4e8>)
 8001e38:	f023 0301 	bic.w	r3, r3, #1
 8001e3c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e3e:	4b72      	ldr	r3, [pc, #456]	; (8002008 <HAL_RCC_OscConfig+0x4e8>)
 8001e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e42:	4a71      	ldr	r2, [pc, #452]	; (8002008 <HAL_RCC_OscConfig+0x4e8>)
 8001e44:	f023 0304 	bic.w	r3, r3, #4
 8001e48:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d015      	beq.n	8001e7e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e52:	f7fe ff7f 	bl	8000d54 <HAL_GetTick>
 8001e56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e58:	e00a      	b.n	8001e70 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e5a:	f7fe ff7b 	bl	8000d54 <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d901      	bls.n	8001e70 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e0c5      	b.n	8001ffc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e70:	4b65      	ldr	r3, [pc, #404]	; (8002008 <HAL_RCC_OscConfig+0x4e8>)
 8001e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d0ee      	beq.n	8001e5a <HAL_RCC_OscConfig+0x33a>
 8001e7c:	e014      	b.n	8001ea8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e7e:	f7fe ff69 	bl	8000d54 <HAL_GetTick>
 8001e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e84:	e00a      	b.n	8001e9c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e86:	f7fe ff65 	bl	8000d54 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e0af      	b.n	8001ffc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e9c:	4b5a      	ldr	r3, [pc, #360]	; (8002008 <HAL_RCC_OscConfig+0x4e8>)
 8001e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ea0:	f003 0302 	and.w	r3, r3, #2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d1ee      	bne.n	8001e86 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ea8:	7dfb      	ldrb	r3, [r7, #23]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d105      	bne.n	8001eba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eae:	4b56      	ldr	r3, [pc, #344]	; (8002008 <HAL_RCC_OscConfig+0x4e8>)
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	4a55      	ldr	r2, [pc, #340]	; (8002008 <HAL_RCC_OscConfig+0x4e8>)
 8001eb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eb8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f000 809b 	beq.w	8001ffa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ec4:	4b50      	ldr	r3, [pc, #320]	; (8002008 <HAL_RCC_OscConfig+0x4e8>)
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f003 030c 	and.w	r3, r3, #12
 8001ecc:	2b08      	cmp	r3, #8
 8001ece:	d05c      	beq.n	8001f8a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d141      	bne.n	8001f5c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ed8:	4b4c      	ldr	r3, [pc, #304]	; (800200c <HAL_RCC_OscConfig+0x4ec>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ede:	f7fe ff39 	bl	8000d54 <HAL_GetTick>
 8001ee2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ee4:	e008      	b.n	8001ef8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ee6:	f7fe ff35 	bl	8000d54 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e081      	b.n	8001ffc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ef8:	4b43      	ldr	r3, [pc, #268]	; (8002008 <HAL_RCC_OscConfig+0x4e8>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d1f0      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	69da      	ldr	r2, [r3, #28]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	431a      	orrs	r2, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f12:	019b      	lsls	r3, r3, #6
 8001f14:	431a      	orrs	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f1a:	085b      	lsrs	r3, r3, #1
 8001f1c:	3b01      	subs	r3, #1
 8001f1e:	041b      	lsls	r3, r3, #16
 8001f20:	431a      	orrs	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f26:	061b      	lsls	r3, r3, #24
 8001f28:	4937      	ldr	r1, [pc, #220]	; (8002008 <HAL_RCC_OscConfig+0x4e8>)
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f2e:	4b37      	ldr	r3, [pc, #220]	; (800200c <HAL_RCC_OscConfig+0x4ec>)
 8001f30:	2201      	movs	r2, #1
 8001f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f34:	f7fe ff0e 	bl	8000d54 <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f3a:	e008      	b.n	8001f4e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f3c:	f7fe ff0a 	bl	8000d54 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e056      	b.n	8001ffc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f4e:	4b2e      	ldr	r3, [pc, #184]	; (8002008 <HAL_RCC_OscConfig+0x4e8>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d0f0      	beq.n	8001f3c <HAL_RCC_OscConfig+0x41c>
 8001f5a:	e04e      	b.n	8001ffa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f5c:	4b2b      	ldr	r3, [pc, #172]	; (800200c <HAL_RCC_OscConfig+0x4ec>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f62:	f7fe fef7 	bl	8000d54 <HAL_GetTick>
 8001f66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f68:	e008      	b.n	8001f7c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f6a:	f7fe fef3 	bl	8000d54 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e03f      	b.n	8001ffc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f7c:	4b22      	ldr	r3, [pc, #136]	; (8002008 <HAL_RCC_OscConfig+0x4e8>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d1f0      	bne.n	8001f6a <HAL_RCC_OscConfig+0x44a>
 8001f88:	e037      	b.n	8001ffa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d101      	bne.n	8001f96 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e032      	b.n	8001ffc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f96:	4b1c      	ldr	r3, [pc, #112]	; (8002008 <HAL_RCC_OscConfig+0x4e8>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d028      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d121      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d11a      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fc0:	68fa      	ldr	r2, [r7, #12]
 8001fc2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001fcc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d111      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fdc:	085b      	lsrs	r3, r3, #1
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d107      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d001      	beq.n	8001ffa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e000      	b.n	8001ffc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3718      	adds	r7, #24
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	40007000 	.word	0x40007000
 8002008:	40023800 	.word	0x40023800
 800200c:	42470060 	.word	0x42470060

08002010 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d101      	bne.n	8002024 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e0cc      	b.n	80021be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002024:	4b68      	ldr	r3, [pc, #416]	; (80021c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0307 	and.w	r3, r3, #7
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	429a      	cmp	r2, r3
 8002030:	d90c      	bls.n	800204c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002032:	4b65      	ldr	r3, [pc, #404]	; (80021c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	b2d2      	uxtb	r2, r2
 8002038:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800203a:	4b63      	ldr	r3, [pc, #396]	; (80021c8 <HAL_RCC_ClockConfig+0x1b8>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0307 	and.w	r3, r3, #7
 8002042:	683a      	ldr	r2, [r7, #0]
 8002044:	429a      	cmp	r2, r3
 8002046:	d001      	beq.n	800204c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e0b8      	b.n	80021be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0302 	and.w	r3, r3, #2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d020      	beq.n	800209a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0304 	and.w	r3, r3, #4
 8002060:	2b00      	cmp	r3, #0
 8002062:	d005      	beq.n	8002070 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002064:	4b59      	ldr	r3, [pc, #356]	; (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	4a58      	ldr	r2, [pc, #352]	; (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 800206a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800206e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0308 	and.w	r3, r3, #8
 8002078:	2b00      	cmp	r3, #0
 800207a:	d005      	beq.n	8002088 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800207c:	4b53      	ldr	r3, [pc, #332]	; (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	4a52      	ldr	r2, [pc, #328]	; (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 8002082:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002086:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002088:	4b50      	ldr	r3, [pc, #320]	; (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	494d      	ldr	r1, [pc, #308]	; (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 8002096:	4313      	orrs	r3, r2
 8002098:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d044      	beq.n	8002130 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d107      	bne.n	80020be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ae:	4b47      	ldr	r3, [pc, #284]	; (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d119      	bne.n	80020ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e07f      	b.n	80021be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d003      	beq.n	80020ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020ca:	2b03      	cmp	r3, #3
 80020cc:	d107      	bne.n	80020de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ce:	4b3f      	ldr	r3, [pc, #252]	; (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d109      	bne.n	80020ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e06f      	b.n	80021be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020de:	4b3b      	ldr	r3, [pc, #236]	; (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d101      	bne.n	80020ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e067      	b.n	80021be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020ee:	4b37      	ldr	r3, [pc, #220]	; (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f023 0203 	bic.w	r2, r3, #3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	4934      	ldr	r1, [pc, #208]	; (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002100:	f7fe fe28 	bl	8000d54 <HAL_GetTick>
 8002104:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002106:	e00a      	b.n	800211e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002108:	f7fe fe24 	bl	8000d54 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	f241 3288 	movw	r2, #5000	; 0x1388
 8002116:	4293      	cmp	r3, r2
 8002118:	d901      	bls.n	800211e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e04f      	b.n	80021be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800211e:	4b2b      	ldr	r3, [pc, #172]	; (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f003 020c 	and.w	r2, r3, #12
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	429a      	cmp	r2, r3
 800212e:	d1eb      	bne.n	8002108 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002130:	4b25      	ldr	r3, [pc, #148]	; (80021c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0307 	and.w	r3, r3, #7
 8002138:	683a      	ldr	r2, [r7, #0]
 800213a:	429a      	cmp	r2, r3
 800213c:	d20c      	bcs.n	8002158 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800213e:	4b22      	ldr	r3, [pc, #136]	; (80021c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	b2d2      	uxtb	r2, r2
 8002144:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002146:	4b20      	ldr	r3, [pc, #128]	; (80021c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0307 	and.w	r3, r3, #7
 800214e:	683a      	ldr	r2, [r7, #0]
 8002150:	429a      	cmp	r2, r3
 8002152:	d001      	beq.n	8002158 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e032      	b.n	80021be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0304 	and.w	r3, r3, #4
 8002160:	2b00      	cmp	r3, #0
 8002162:	d008      	beq.n	8002176 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002164:	4b19      	ldr	r3, [pc, #100]	; (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	4916      	ldr	r1, [pc, #88]	; (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 8002172:	4313      	orrs	r3, r2
 8002174:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0308 	and.w	r3, r3, #8
 800217e:	2b00      	cmp	r3, #0
 8002180:	d009      	beq.n	8002196 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002182:	4b12      	ldr	r3, [pc, #72]	; (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	490e      	ldr	r1, [pc, #56]	; (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 8002192:	4313      	orrs	r3, r2
 8002194:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002196:	f000 f821 	bl	80021dc <HAL_RCC_GetSysClockFreq>
 800219a:	4602      	mov	r2, r0
 800219c:	4b0b      	ldr	r3, [pc, #44]	; (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	091b      	lsrs	r3, r3, #4
 80021a2:	f003 030f 	and.w	r3, r3, #15
 80021a6:	490a      	ldr	r1, [pc, #40]	; (80021d0 <HAL_RCC_ClockConfig+0x1c0>)
 80021a8:	5ccb      	ldrb	r3, [r1, r3]
 80021aa:	fa22 f303 	lsr.w	r3, r2, r3
 80021ae:	4a09      	ldr	r2, [pc, #36]	; (80021d4 <HAL_RCC_ClockConfig+0x1c4>)
 80021b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80021b2:	4b09      	ldr	r3, [pc, #36]	; (80021d8 <HAL_RCC_ClockConfig+0x1c8>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7fe fd88 	bl	8000ccc <HAL_InitTick>

  return HAL_OK;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3710      	adds	r7, #16
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40023c00 	.word	0x40023c00
 80021cc:	40023800 	.word	0x40023800
 80021d0:	08004280 	.word	0x08004280
 80021d4:	20000000 	.word	0x20000000
 80021d8:	20000004 	.word	0x20000004

080021dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021dc:	b5b0      	push	{r4, r5, r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80021e2:	2100      	movs	r1, #0
 80021e4:	6079      	str	r1, [r7, #4]
 80021e6:	2100      	movs	r1, #0
 80021e8:	60f9      	str	r1, [r7, #12]
 80021ea:	2100      	movs	r1, #0
 80021ec:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80021ee:	2100      	movs	r1, #0
 80021f0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021f2:	4952      	ldr	r1, [pc, #328]	; (800233c <HAL_RCC_GetSysClockFreq+0x160>)
 80021f4:	6889      	ldr	r1, [r1, #8]
 80021f6:	f001 010c 	and.w	r1, r1, #12
 80021fa:	2908      	cmp	r1, #8
 80021fc:	d00d      	beq.n	800221a <HAL_RCC_GetSysClockFreq+0x3e>
 80021fe:	2908      	cmp	r1, #8
 8002200:	f200 8094 	bhi.w	800232c <HAL_RCC_GetSysClockFreq+0x150>
 8002204:	2900      	cmp	r1, #0
 8002206:	d002      	beq.n	800220e <HAL_RCC_GetSysClockFreq+0x32>
 8002208:	2904      	cmp	r1, #4
 800220a:	d003      	beq.n	8002214 <HAL_RCC_GetSysClockFreq+0x38>
 800220c:	e08e      	b.n	800232c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800220e:	4b4c      	ldr	r3, [pc, #304]	; (8002340 <HAL_RCC_GetSysClockFreq+0x164>)
 8002210:	60bb      	str	r3, [r7, #8]
       break;
 8002212:	e08e      	b.n	8002332 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002214:	4b4b      	ldr	r3, [pc, #300]	; (8002344 <HAL_RCC_GetSysClockFreq+0x168>)
 8002216:	60bb      	str	r3, [r7, #8]
      break;
 8002218:	e08b      	b.n	8002332 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800221a:	4948      	ldr	r1, [pc, #288]	; (800233c <HAL_RCC_GetSysClockFreq+0x160>)
 800221c:	6849      	ldr	r1, [r1, #4]
 800221e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002222:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002224:	4945      	ldr	r1, [pc, #276]	; (800233c <HAL_RCC_GetSysClockFreq+0x160>)
 8002226:	6849      	ldr	r1, [r1, #4]
 8002228:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800222c:	2900      	cmp	r1, #0
 800222e:	d024      	beq.n	800227a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002230:	4942      	ldr	r1, [pc, #264]	; (800233c <HAL_RCC_GetSysClockFreq+0x160>)
 8002232:	6849      	ldr	r1, [r1, #4]
 8002234:	0989      	lsrs	r1, r1, #6
 8002236:	4608      	mov	r0, r1
 8002238:	f04f 0100 	mov.w	r1, #0
 800223c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002240:	f04f 0500 	mov.w	r5, #0
 8002244:	ea00 0204 	and.w	r2, r0, r4
 8002248:	ea01 0305 	and.w	r3, r1, r5
 800224c:	493d      	ldr	r1, [pc, #244]	; (8002344 <HAL_RCC_GetSysClockFreq+0x168>)
 800224e:	fb01 f003 	mul.w	r0, r1, r3
 8002252:	2100      	movs	r1, #0
 8002254:	fb01 f102 	mul.w	r1, r1, r2
 8002258:	1844      	adds	r4, r0, r1
 800225a:	493a      	ldr	r1, [pc, #232]	; (8002344 <HAL_RCC_GetSysClockFreq+0x168>)
 800225c:	fba2 0101 	umull	r0, r1, r2, r1
 8002260:	1863      	adds	r3, r4, r1
 8002262:	4619      	mov	r1, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	461a      	mov	r2, r3
 8002268:	f04f 0300 	mov.w	r3, #0
 800226c:	f7fe f810 	bl	8000290 <__aeabi_uldivmod>
 8002270:	4602      	mov	r2, r0
 8002272:	460b      	mov	r3, r1
 8002274:	4613      	mov	r3, r2
 8002276:	60fb      	str	r3, [r7, #12]
 8002278:	e04a      	b.n	8002310 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800227a:	4b30      	ldr	r3, [pc, #192]	; (800233c <HAL_RCC_GetSysClockFreq+0x160>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	099b      	lsrs	r3, r3, #6
 8002280:	461a      	mov	r2, r3
 8002282:	f04f 0300 	mov.w	r3, #0
 8002286:	f240 10ff 	movw	r0, #511	; 0x1ff
 800228a:	f04f 0100 	mov.w	r1, #0
 800228e:	ea02 0400 	and.w	r4, r2, r0
 8002292:	ea03 0501 	and.w	r5, r3, r1
 8002296:	4620      	mov	r0, r4
 8002298:	4629      	mov	r1, r5
 800229a:	f04f 0200 	mov.w	r2, #0
 800229e:	f04f 0300 	mov.w	r3, #0
 80022a2:	014b      	lsls	r3, r1, #5
 80022a4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80022a8:	0142      	lsls	r2, r0, #5
 80022aa:	4610      	mov	r0, r2
 80022ac:	4619      	mov	r1, r3
 80022ae:	1b00      	subs	r0, r0, r4
 80022b0:	eb61 0105 	sbc.w	r1, r1, r5
 80022b4:	f04f 0200 	mov.w	r2, #0
 80022b8:	f04f 0300 	mov.w	r3, #0
 80022bc:	018b      	lsls	r3, r1, #6
 80022be:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80022c2:	0182      	lsls	r2, r0, #6
 80022c4:	1a12      	subs	r2, r2, r0
 80022c6:	eb63 0301 	sbc.w	r3, r3, r1
 80022ca:	f04f 0000 	mov.w	r0, #0
 80022ce:	f04f 0100 	mov.w	r1, #0
 80022d2:	00d9      	lsls	r1, r3, #3
 80022d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80022d8:	00d0      	lsls	r0, r2, #3
 80022da:	4602      	mov	r2, r0
 80022dc:	460b      	mov	r3, r1
 80022de:	1912      	adds	r2, r2, r4
 80022e0:	eb45 0303 	adc.w	r3, r5, r3
 80022e4:	f04f 0000 	mov.w	r0, #0
 80022e8:	f04f 0100 	mov.w	r1, #0
 80022ec:	0299      	lsls	r1, r3, #10
 80022ee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80022f2:	0290      	lsls	r0, r2, #10
 80022f4:	4602      	mov	r2, r0
 80022f6:	460b      	mov	r3, r1
 80022f8:	4610      	mov	r0, r2
 80022fa:	4619      	mov	r1, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	461a      	mov	r2, r3
 8002300:	f04f 0300 	mov.w	r3, #0
 8002304:	f7fd ffc4 	bl	8000290 <__aeabi_uldivmod>
 8002308:	4602      	mov	r2, r0
 800230a:	460b      	mov	r3, r1
 800230c:	4613      	mov	r3, r2
 800230e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002310:	4b0a      	ldr	r3, [pc, #40]	; (800233c <HAL_RCC_GetSysClockFreq+0x160>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	0c1b      	lsrs	r3, r3, #16
 8002316:	f003 0303 	and.w	r3, r3, #3
 800231a:	3301      	adds	r3, #1
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002320:	68fa      	ldr	r2, [r7, #12]
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	fbb2 f3f3 	udiv	r3, r2, r3
 8002328:	60bb      	str	r3, [r7, #8]
      break;
 800232a:	e002      	b.n	8002332 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800232c:	4b04      	ldr	r3, [pc, #16]	; (8002340 <HAL_RCC_GetSysClockFreq+0x164>)
 800232e:	60bb      	str	r3, [r7, #8]
      break;
 8002330:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002332:	68bb      	ldr	r3, [r7, #8]
}
 8002334:	4618      	mov	r0, r3
 8002336:	3710      	adds	r7, #16
 8002338:	46bd      	mov	sp, r7
 800233a:	bdb0      	pop	{r4, r5, r7, pc}
 800233c:	40023800 	.word	0x40023800
 8002340:	00f42400 	.word	0x00f42400
 8002344:	017d7840 	.word	0x017d7840

08002348 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800234c:	4b03      	ldr	r3, [pc, #12]	; (800235c <HAL_RCC_GetHCLKFreq+0x14>)
 800234e:	681b      	ldr	r3, [r3, #0]
}
 8002350:	4618      	mov	r0, r3
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	20000000 	.word	0x20000000

08002360 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002364:	f7ff fff0 	bl	8002348 <HAL_RCC_GetHCLKFreq>
 8002368:	4602      	mov	r2, r0
 800236a:	4b05      	ldr	r3, [pc, #20]	; (8002380 <HAL_RCC_GetPCLK1Freq+0x20>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	0a9b      	lsrs	r3, r3, #10
 8002370:	f003 0307 	and.w	r3, r3, #7
 8002374:	4903      	ldr	r1, [pc, #12]	; (8002384 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002376:	5ccb      	ldrb	r3, [r1, r3]
 8002378:	fa22 f303 	lsr.w	r3, r2, r3
}
 800237c:	4618      	mov	r0, r3
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40023800 	.word	0x40023800
 8002384:	08004290 	.word	0x08004290

08002388 <__errno>:
 8002388:	4b01      	ldr	r3, [pc, #4]	; (8002390 <__errno+0x8>)
 800238a:	6818      	ldr	r0, [r3, #0]
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	2000000c 	.word	0x2000000c

08002394 <_fclose_r>:
 8002394:	b570      	push	{r4, r5, r6, lr}
 8002396:	4605      	mov	r5, r0
 8002398:	460c      	mov	r4, r1
 800239a:	b911      	cbnz	r1, 80023a2 <_fclose_r+0xe>
 800239c:	2600      	movs	r6, #0
 800239e:	4630      	mov	r0, r6
 80023a0:	bd70      	pop	{r4, r5, r6, pc}
 80023a2:	b118      	cbz	r0, 80023ac <_fclose_r+0x18>
 80023a4:	6983      	ldr	r3, [r0, #24]
 80023a6:	b90b      	cbnz	r3, 80023ac <_fclose_r+0x18>
 80023a8:	f000 fa18 	bl	80027dc <__sinit>
 80023ac:	4b2c      	ldr	r3, [pc, #176]	; (8002460 <_fclose_r+0xcc>)
 80023ae:	429c      	cmp	r4, r3
 80023b0:	d114      	bne.n	80023dc <_fclose_r+0x48>
 80023b2:	686c      	ldr	r4, [r5, #4]
 80023b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80023b6:	07d8      	lsls	r0, r3, #31
 80023b8:	d405      	bmi.n	80023c6 <_fclose_r+0x32>
 80023ba:	89a3      	ldrh	r3, [r4, #12]
 80023bc:	0599      	lsls	r1, r3, #22
 80023be:	d402      	bmi.n	80023c6 <_fclose_r+0x32>
 80023c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80023c2:	f000 fc57 	bl	8002c74 <__retarget_lock_acquire_recursive>
 80023c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80023ca:	b98b      	cbnz	r3, 80023f0 <_fclose_r+0x5c>
 80023cc:	6e66      	ldr	r6, [r4, #100]	; 0x64
 80023ce:	f016 0601 	ands.w	r6, r6, #1
 80023d2:	d1e3      	bne.n	800239c <_fclose_r+0x8>
 80023d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80023d6:	f000 fc4e 	bl	8002c76 <__retarget_lock_release_recursive>
 80023da:	e7e0      	b.n	800239e <_fclose_r+0xa>
 80023dc:	4b21      	ldr	r3, [pc, #132]	; (8002464 <_fclose_r+0xd0>)
 80023de:	429c      	cmp	r4, r3
 80023e0:	d101      	bne.n	80023e6 <_fclose_r+0x52>
 80023e2:	68ac      	ldr	r4, [r5, #8]
 80023e4:	e7e6      	b.n	80023b4 <_fclose_r+0x20>
 80023e6:	4b20      	ldr	r3, [pc, #128]	; (8002468 <_fclose_r+0xd4>)
 80023e8:	429c      	cmp	r4, r3
 80023ea:	bf08      	it	eq
 80023ec:	68ec      	ldreq	r4, [r5, #12]
 80023ee:	e7e1      	b.n	80023b4 <_fclose_r+0x20>
 80023f0:	4621      	mov	r1, r4
 80023f2:	4628      	mov	r0, r5
 80023f4:	f000 f842 	bl	800247c <__sflush_r>
 80023f8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80023fa:	4606      	mov	r6, r0
 80023fc:	b133      	cbz	r3, 800240c <_fclose_r+0x78>
 80023fe:	6a21      	ldr	r1, [r4, #32]
 8002400:	4628      	mov	r0, r5
 8002402:	4798      	blx	r3
 8002404:	2800      	cmp	r0, #0
 8002406:	bfb8      	it	lt
 8002408:	f04f 36ff 	movlt.w	r6, #4294967295
 800240c:	89a3      	ldrh	r3, [r4, #12]
 800240e:	061a      	lsls	r2, r3, #24
 8002410:	d503      	bpl.n	800241a <_fclose_r+0x86>
 8002412:	6921      	ldr	r1, [r4, #16]
 8002414:	4628      	mov	r0, r5
 8002416:	f000 fca9 	bl	8002d6c <_free_r>
 800241a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800241c:	b141      	cbz	r1, 8002430 <_fclose_r+0x9c>
 800241e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002422:	4299      	cmp	r1, r3
 8002424:	d002      	beq.n	800242c <_fclose_r+0x98>
 8002426:	4628      	mov	r0, r5
 8002428:	f000 fca0 	bl	8002d6c <_free_r>
 800242c:	2300      	movs	r3, #0
 800242e:	6363      	str	r3, [r4, #52]	; 0x34
 8002430:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8002432:	b121      	cbz	r1, 800243e <_fclose_r+0xaa>
 8002434:	4628      	mov	r0, r5
 8002436:	f000 fc99 	bl	8002d6c <_free_r>
 800243a:	2300      	movs	r3, #0
 800243c:	64a3      	str	r3, [r4, #72]	; 0x48
 800243e:	f000 f9b5 	bl	80027ac <__sfp_lock_acquire>
 8002442:	2300      	movs	r3, #0
 8002444:	81a3      	strh	r3, [r4, #12]
 8002446:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002448:	07db      	lsls	r3, r3, #31
 800244a:	d402      	bmi.n	8002452 <_fclose_r+0xbe>
 800244c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800244e:	f000 fc12 	bl	8002c76 <__retarget_lock_release_recursive>
 8002452:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002454:	f000 fc0d 	bl	8002c72 <__retarget_lock_close_recursive>
 8002458:	f000 f9ae 	bl	80027b8 <__sfp_lock_release>
 800245c:	e79f      	b.n	800239e <_fclose_r+0xa>
 800245e:	bf00      	nop
 8002460:	080042b8 	.word	0x080042b8
 8002464:	080042d8 	.word	0x080042d8
 8002468:	08004298 	.word	0x08004298

0800246c <fclose>:
 800246c:	4b02      	ldr	r3, [pc, #8]	; (8002478 <fclose+0xc>)
 800246e:	4601      	mov	r1, r0
 8002470:	6818      	ldr	r0, [r3, #0]
 8002472:	f7ff bf8f 	b.w	8002394 <_fclose_r>
 8002476:	bf00      	nop
 8002478:	2000000c 	.word	0x2000000c

0800247c <__sflush_r>:
 800247c:	898a      	ldrh	r2, [r1, #12]
 800247e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002482:	4605      	mov	r5, r0
 8002484:	0710      	lsls	r0, r2, #28
 8002486:	460c      	mov	r4, r1
 8002488:	d458      	bmi.n	800253c <__sflush_r+0xc0>
 800248a:	684b      	ldr	r3, [r1, #4]
 800248c:	2b00      	cmp	r3, #0
 800248e:	dc05      	bgt.n	800249c <__sflush_r+0x20>
 8002490:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002492:	2b00      	cmp	r3, #0
 8002494:	dc02      	bgt.n	800249c <__sflush_r+0x20>
 8002496:	2000      	movs	r0, #0
 8002498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800249c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800249e:	2e00      	cmp	r6, #0
 80024a0:	d0f9      	beq.n	8002496 <__sflush_r+0x1a>
 80024a2:	2300      	movs	r3, #0
 80024a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80024a8:	682f      	ldr	r7, [r5, #0]
 80024aa:	602b      	str	r3, [r5, #0]
 80024ac:	d032      	beq.n	8002514 <__sflush_r+0x98>
 80024ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80024b0:	89a3      	ldrh	r3, [r4, #12]
 80024b2:	075a      	lsls	r2, r3, #29
 80024b4:	d505      	bpl.n	80024c2 <__sflush_r+0x46>
 80024b6:	6863      	ldr	r3, [r4, #4]
 80024b8:	1ac0      	subs	r0, r0, r3
 80024ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80024bc:	b10b      	cbz	r3, 80024c2 <__sflush_r+0x46>
 80024be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80024c0:	1ac0      	subs	r0, r0, r3
 80024c2:	2300      	movs	r3, #0
 80024c4:	4602      	mov	r2, r0
 80024c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80024c8:	6a21      	ldr	r1, [r4, #32]
 80024ca:	4628      	mov	r0, r5
 80024cc:	47b0      	blx	r6
 80024ce:	1c43      	adds	r3, r0, #1
 80024d0:	89a3      	ldrh	r3, [r4, #12]
 80024d2:	d106      	bne.n	80024e2 <__sflush_r+0x66>
 80024d4:	6829      	ldr	r1, [r5, #0]
 80024d6:	291d      	cmp	r1, #29
 80024d8:	d82c      	bhi.n	8002534 <__sflush_r+0xb8>
 80024da:	4a2a      	ldr	r2, [pc, #168]	; (8002584 <__sflush_r+0x108>)
 80024dc:	40ca      	lsrs	r2, r1
 80024de:	07d6      	lsls	r6, r2, #31
 80024e0:	d528      	bpl.n	8002534 <__sflush_r+0xb8>
 80024e2:	2200      	movs	r2, #0
 80024e4:	6062      	str	r2, [r4, #4]
 80024e6:	04d9      	lsls	r1, r3, #19
 80024e8:	6922      	ldr	r2, [r4, #16]
 80024ea:	6022      	str	r2, [r4, #0]
 80024ec:	d504      	bpl.n	80024f8 <__sflush_r+0x7c>
 80024ee:	1c42      	adds	r2, r0, #1
 80024f0:	d101      	bne.n	80024f6 <__sflush_r+0x7a>
 80024f2:	682b      	ldr	r3, [r5, #0]
 80024f4:	b903      	cbnz	r3, 80024f8 <__sflush_r+0x7c>
 80024f6:	6560      	str	r0, [r4, #84]	; 0x54
 80024f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80024fa:	602f      	str	r7, [r5, #0]
 80024fc:	2900      	cmp	r1, #0
 80024fe:	d0ca      	beq.n	8002496 <__sflush_r+0x1a>
 8002500:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002504:	4299      	cmp	r1, r3
 8002506:	d002      	beq.n	800250e <__sflush_r+0x92>
 8002508:	4628      	mov	r0, r5
 800250a:	f000 fc2f 	bl	8002d6c <_free_r>
 800250e:	2000      	movs	r0, #0
 8002510:	6360      	str	r0, [r4, #52]	; 0x34
 8002512:	e7c1      	b.n	8002498 <__sflush_r+0x1c>
 8002514:	6a21      	ldr	r1, [r4, #32]
 8002516:	2301      	movs	r3, #1
 8002518:	4628      	mov	r0, r5
 800251a:	47b0      	blx	r6
 800251c:	1c41      	adds	r1, r0, #1
 800251e:	d1c7      	bne.n	80024b0 <__sflush_r+0x34>
 8002520:	682b      	ldr	r3, [r5, #0]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d0c4      	beq.n	80024b0 <__sflush_r+0x34>
 8002526:	2b1d      	cmp	r3, #29
 8002528:	d001      	beq.n	800252e <__sflush_r+0xb2>
 800252a:	2b16      	cmp	r3, #22
 800252c:	d101      	bne.n	8002532 <__sflush_r+0xb6>
 800252e:	602f      	str	r7, [r5, #0]
 8002530:	e7b1      	b.n	8002496 <__sflush_r+0x1a>
 8002532:	89a3      	ldrh	r3, [r4, #12]
 8002534:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002538:	81a3      	strh	r3, [r4, #12]
 800253a:	e7ad      	b.n	8002498 <__sflush_r+0x1c>
 800253c:	690f      	ldr	r7, [r1, #16]
 800253e:	2f00      	cmp	r7, #0
 8002540:	d0a9      	beq.n	8002496 <__sflush_r+0x1a>
 8002542:	0793      	lsls	r3, r2, #30
 8002544:	680e      	ldr	r6, [r1, #0]
 8002546:	bf08      	it	eq
 8002548:	694b      	ldreq	r3, [r1, #20]
 800254a:	600f      	str	r7, [r1, #0]
 800254c:	bf18      	it	ne
 800254e:	2300      	movne	r3, #0
 8002550:	eba6 0807 	sub.w	r8, r6, r7
 8002554:	608b      	str	r3, [r1, #8]
 8002556:	f1b8 0f00 	cmp.w	r8, #0
 800255a:	dd9c      	ble.n	8002496 <__sflush_r+0x1a>
 800255c:	6a21      	ldr	r1, [r4, #32]
 800255e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002560:	4643      	mov	r3, r8
 8002562:	463a      	mov	r2, r7
 8002564:	4628      	mov	r0, r5
 8002566:	47b0      	blx	r6
 8002568:	2800      	cmp	r0, #0
 800256a:	dc06      	bgt.n	800257a <__sflush_r+0xfe>
 800256c:	89a3      	ldrh	r3, [r4, #12]
 800256e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002572:	81a3      	strh	r3, [r4, #12]
 8002574:	f04f 30ff 	mov.w	r0, #4294967295
 8002578:	e78e      	b.n	8002498 <__sflush_r+0x1c>
 800257a:	4407      	add	r7, r0
 800257c:	eba8 0800 	sub.w	r8, r8, r0
 8002580:	e7e9      	b.n	8002556 <__sflush_r+0xda>
 8002582:	bf00      	nop
 8002584:	20400001 	.word	0x20400001

08002588 <_fflush_r>:
 8002588:	b538      	push	{r3, r4, r5, lr}
 800258a:	690b      	ldr	r3, [r1, #16]
 800258c:	4605      	mov	r5, r0
 800258e:	460c      	mov	r4, r1
 8002590:	b913      	cbnz	r3, 8002598 <_fflush_r+0x10>
 8002592:	2500      	movs	r5, #0
 8002594:	4628      	mov	r0, r5
 8002596:	bd38      	pop	{r3, r4, r5, pc}
 8002598:	b118      	cbz	r0, 80025a2 <_fflush_r+0x1a>
 800259a:	6983      	ldr	r3, [r0, #24]
 800259c:	b90b      	cbnz	r3, 80025a2 <_fflush_r+0x1a>
 800259e:	f000 f91d 	bl	80027dc <__sinit>
 80025a2:	4b14      	ldr	r3, [pc, #80]	; (80025f4 <_fflush_r+0x6c>)
 80025a4:	429c      	cmp	r4, r3
 80025a6:	d11b      	bne.n	80025e0 <_fflush_r+0x58>
 80025a8:	686c      	ldr	r4, [r5, #4]
 80025aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d0ef      	beq.n	8002592 <_fflush_r+0xa>
 80025b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80025b4:	07d0      	lsls	r0, r2, #31
 80025b6:	d404      	bmi.n	80025c2 <_fflush_r+0x3a>
 80025b8:	0599      	lsls	r1, r3, #22
 80025ba:	d402      	bmi.n	80025c2 <_fflush_r+0x3a>
 80025bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80025be:	f000 fb59 	bl	8002c74 <__retarget_lock_acquire_recursive>
 80025c2:	4628      	mov	r0, r5
 80025c4:	4621      	mov	r1, r4
 80025c6:	f7ff ff59 	bl	800247c <__sflush_r>
 80025ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80025cc:	07da      	lsls	r2, r3, #31
 80025ce:	4605      	mov	r5, r0
 80025d0:	d4e0      	bmi.n	8002594 <_fflush_r+0xc>
 80025d2:	89a3      	ldrh	r3, [r4, #12]
 80025d4:	059b      	lsls	r3, r3, #22
 80025d6:	d4dd      	bmi.n	8002594 <_fflush_r+0xc>
 80025d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80025da:	f000 fb4c 	bl	8002c76 <__retarget_lock_release_recursive>
 80025de:	e7d9      	b.n	8002594 <_fflush_r+0xc>
 80025e0:	4b05      	ldr	r3, [pc, #20]	; (80025f8 <_fflush_r+0x70>)
 80025e2:	429c      	cmp	r4, r3
 80025e4:	d101      	bne.n	80025ea <_fflush_r+0x62>
 80025e6:	68ac      	ldr	r4, [r5, #8]
 80025e8:	e7df      	b.n	80025aa <_fflush_r+0x22>
 80025ea:	4b04      	ldr	r3, [pc, #16]	; (80025fc <_fflush_r+0x74>)
 80025ec:	429c      	cmp	r4, r3
 80025ee:	bf08      	it	eq
 80025f0:	68ec      	ldreq	r4, [r5, #12]
 80025f2:	e7da      	b.n	80025aa <_fflush_r+0x22>
 80025f4:	080042b8 	.word	0x080042b8
 80025f8:	080042d8 	.word	0x080042d8
 80025fc:	08004298 	.word	0x08004298

08002600 <fflush>:
 8002600:	4601      	mov	r1, r0
 8002602:	b920      	cbnz	r0, 800260e <fflush+0xe>
 8002604:	4b04      	ldr	r3, [pc, #16]	; (8002618 <fflush+0x18>)
 8002606:	4905      	ldr	r1, [pc, #20]	; (800261c <fflush+0x1c>)
 8002608:	6818      	ldr	r0, [r3, #0]
 800260a:	f000 baee 	b.w	8002bea <_fwalk_reent>
 800260e:	4b04      	ldr	r3, [pc, #16]	; (8002620 <fflush+0x20>)
 8002610:	6818      	ldr	r0, [r3, #0]
 8002612:	f7ff bfb9 	b.w	8002588 <_fflush_r>
 8002616:	bf00      	nop
 8002618:	080042f8 	.word	0x080042f8
 800261c:	08002589 	.word	0x08002589
 8002620:	2000000c 	.word	0x2000000c

08002624 <_fgets_r>:
 8002624:	2a01      	cmp	r2, #1
 8002626:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800262a:	4680      	mov	r8, r0
 800262c:	460d      	mov	r5, r1
 800262e:	4617      	mov	r7, r2
 8002630:	461c      	mov	r4, r3
 8002632:	dc03      	bgt.n	800263c <_fgets_r+0x18>
 8002634:	2500      	movs	r5, #0
 8002636:	4628      	mov	r0, r5
 8002638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800263c:	b118      	cbz	r0, 8002646 <_fgets_r+0x22>
 800263e:	6983      	ldr	r3, [r0, #24]
 8002640:	b90b      	cbnz	r3, 8002646 <_fgets_r+0x22>
 8002642:	f000 f8cb 	bl	80027dc <__sinit>
 8002646:	4b31      	ldr	r3, [pc, #196]	; (800270c <_fgets_r+0xe8>)
 8002648:	429c      	cmp	r4, r3
 800264a:	d120      	bne.n	800268e <_fgets_r+0x6a>
 800264c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8002650:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002652:	07de      	lsls	r6, r3, #31
 8002654:	d405      	bmi.n	8002662 <_fgets_r+0x3e>
 8002656:	89a3      	ldrh	r3, [r4, #12]
 8002658:	0598      	lsls	r0, r3, #22
 800265a:	d402      	bmi.n	8002662 <_fgets_r+0x3e>
 800265c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800265e:	f000 fb09 	bl	8002c74 <__retarget_lock_acquire_recursive>
 8002662:	3f01      	subs	r7, #1
 8002664:	46a9      	mov	r9, r5
 8002666:	6866      	ldr	r6, [r4, #4]
 8002668:	b9f6      	cbnz	r6, 80026a8 <_fgets_r+0x84>
 800266a:	4621      	mov	r1, r4
 800266c:	4640      	mov	r0, r8
 800266e:	f000 fc43 	bl	8002ef8 <__srefill_r>
 8002672:	b1c0      	cbz	r0, 80026a6 <_fgets_r+0x82>
 8002674:	45a9      	cmp	r9, r5
 8002676:	d145      	bne.n	8002704 <_fgets_r+0xe0>
 8002678:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800267a:	07d9      	lsls	r1, r3, #31
 800267c:	d4da      	bmi.n	8002634 <_fgets_r+0x10>
 800267e:	89a5      	ldrh	r5, [r4, #12]
 8002680:	f415 7500 	ands.w	r5, r5, #512	; 0x200
 8002684:	d1d6      	bne.n	8002634 <_fgets_r+0x10>
 8002686:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002688:	f000 faf5 	bl	8002c76 <__retarget_lock_release_recursive>
 800268c:	e7d3      	b.n	8002636 <_fgets_r+0x12>
 800268e:	4b20      	ldr	r3, [pc, #128]	; (8002710 <_fgets_r+0xec>)
 8002690:	429c      	cmp	r4, r3
 8002692:	d102      	bne.n	800269a <_fgets_r+0x76>
 8002694:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8002698:	e7da      	b.n	8002650 <_fgets_r+0x2c>
 800269a:	4b1e      	ldr	r3, [pc, #120]	; (8002714 <_fgets_r+0xf0>)
 800269c:	429c      	cmp	r4, r3
 800269e:	bf08      	it	eq
 80026a0:	f8d8 400c 	ldreq.w	r4, [r8, #12]
 80026a4:	e7d4      	b.n	8002650 <_fgets_r+0x2c>
 80026a6:	6866      	ldr	r6, [r4, #4]
 80026a8:	f8d4 a000 	ldr.w	sl, [r4]
 80026ac:	42be      	cmp	r6, r7
 80026ae:	bf28      	it	cs
 80026b0:	463e      	movcs	r6, r7
 80026b2:	4632      	mov	r2, r6
 80026b4:	210a      	movs	r1, #10
 80026b6:	4650      	mov	r0, sl
 80026b8:	f7fd fd92 	bl	80001e0 <memchr>
 80026bc:	6863      	ldr	r3, [r4, #4]
 80026be:	b1a0      	cbz	r0, 80026ea <_fgets_r+0xc6>
 80026c0:	3001      	adds	r0, #1
 80026c2:	eba0 060a 	sub.w	r6, r0, sl
 80026c6:	1b9b      	subs	r3, r3, r6
 80026c8:	e9c4 0300 	strd	r0, r3, [r4]
 80026cc:	4632      	mov	r2, r6
 80026ce:	4651      	mov	r1, sl
 80026d0:	4648      	mov	r0, r9
 80026d2:	f000 fb35 	bl	8002d40 <memcpy>
 80026d6:	2300      	movs	r3, #0
 80026d8:	f809 3006 	strb.w	r3, [r9, r6]
 80026dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80026de:	07da      	lsls	r2, r3, #31
 80026e0:	d4a9      	bmi.n	8002636 <_fgets_r+0x12>
 80026e2:	89a3      	ldrh	r3, [r4, #12]
 80026e4:	059b      	lsls	r3, r3, #22
 80026e6:	d4a6      	bmi.n	8002636 <_fgets_r+0x12>
 80026e8:	e7cd      	b.n	8002686 <_fgets_r+0x62>
 80026ea:	1b9b      	subs	r3, r3, r6
 80026ec:	6063      	str	r3, [r4, #4]
 80026ee:	6823      	ldr	r3, [r4, #0]
 80026f0:	4433      	add	r3, r6
 80026f2:	4648      	mov	r0, r9
 80026f4:	6023      	str	r3, [r4, #0]
 80026f6:	4632      	mov	r2, r6
 80026f8:	4651      	mov	r1, sl
 80026fa:	f000 fb21 	bl	8002d40 <memcpy>
 80026fe:	1bbf      	subs	r7, r7, r6
 8002700:	44b1      	add	r9, r6
 8002702:	d1b0      	bne.n	8002666 <_fgets_r+0x42>
 8002704:	2300      	movs	r3, #0
 8002706:	f889 3000 	strb.w	r3, [r9]
 800270a:	e7e7      	b.n	80026dc <_fgets_r+0xb8>
 800270c:	080042b8 	.word	0x080042b8
 8002710:	080042d8 	.word	0x080042d8
 8002714:	08004298 	.word	0x08004298

08002718 <fgets>:
 8002718:	4613      	mov	r3, r2
 800271a:	460a      	mov	r2, r1
 800271c:	4601      	mov	r1, r0
 800271e:	4802      	ldr	r0, [pc, #8]	; (8002728 <fgets+0x10>)
 8002720:	6800      	ldr	r0, [r0, #0]
 8002722:	f7ff bf7f 	b.w	8002624 <_fgets_r>
 8002726:	bf00      	nop
 8002728:	2000000c 	.word	0x2000000c

0800272c <std>:
 800272c:	2300      	movs	r3, #0
 800272e:	b510      	push	{r4, lr}
 8002730:	4604      	mov	r4, r0
 8002732:	e9c0 3300 	strd	r3, r3, [r0]
 8002736:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800273a:	6083      	str	r3, [r0, #8]
 800273c:	8181      	strh	r1, [r0, #12]
 800273e:	6643      	str	r3, [r0, #100]	; 0x64
 8002740:	81c2      	strh	r2, [r0, #14]
 8002742:	6183      	str	r3, [r0, #24]
 8002744:	4619      	mov	r1, r3
 8002746:	2208      	movs	r2, #8
 8002748:	305c      	adds	r0, #92	; 0x5c
 800274a:	f000 fb07 	bl	8002d5c <memset>
 800274e:	4b05      	ldr	r3, [pc, #20]	; (8002764 <std+0x38>)
 8002750:	6263      	str	r3, [r4, #36]	; 0x24
 8002752:	4b05      	ldr	r3, [pc, #20]	; (8002768 <std+0x3c>)
 8002754:	62a3      	str	r3, [r4, #40]	; 0x28
 8002756:	4b05      	ldr	r3, [pc, #20]	; (800276c <std+0x40>)
 8002758:	62e3      	str	r3, [r4, #44]	; 0x2c
 800275a:	4b05      	ldr	r3, [pc, #20]	; (8002770 <std+0x44>)
 800275c:	6224      	str	r4, [r4, #32]
 800275e:	6323      	str	r3, [r4, #48]	; 0x30
 8002760:	bd10      	pop	{r4, pc}
 8002762:	bf00      	nop
 8002764:	080030c5 	.word	0x080030c5
 8002768:	080030eb 	.word	0x080030eb
 800276c:	08003123 	.word	0x08003123
 8002770:	08003147 	.word	0x08003147

08002774 <_cleanup_r>:
 8002774:	4901      	ldr	r1, [pc, #4]	; (800277c <_cleanup_r+0x8>)
 8002776:	f000 ba38 	b.w	8002bea <_fwalk_reent>
 800277a:	bf00      	nop
 800277c:	08002589 	.word	0x08002589

08002780 <__sfmoreglue>:
 8002780:	b570      	push	{r4, r5, r6, lr}
 8002782:	1e4a      	subs	r2, r1, #1
 8002784:	2568      	movs	r5, #104	; 0x68
 8002786:	4355      	muls	r5, r2
 8002788:	460e      	mov	r6, r1
 800278a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800278e:	f000 fb3d 	bl	8002e0c <_malloc_r>
 8002792:	4604      	mov	r4, r0
 8002794:	b140      	cbz	r0, 80027a8 <__sfmoreglue+0x28>
 8002796:	2100      	movs	r1, #0
 8002798:	e9c0 1600 	strd	r1, r6, [r0]
 800279c:	300c      	adds	r0, #12
 800279e:	60a0      	str	r0, [r4, #8]
 80027a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80027a4:	f000 fada 	bl	8002d5c <memset>
 80027a8:	4620      	mov	r0, r4
 80027aa:	bd70      	pop	{r4, r5, r6, pc}

080027ac <__sfp_lock_acquire>:
 80027ac:	4801      	ldr	r0, [pc, #4]	; (80027b4 <__sfp_lock_acquire+0x8>)
 80027ae:	f000 ba61 	b.w	8002c74 <__retarget_lock_acquire_recursive>
 80027b2:	bf00      	nop
 80027b4:	20000130 	.word	0x20000130

080027b8 <__sfp_lock_release>:
 80027b8:	4801      	ldr	r0, [pc, #4]	; (80027c0 <__sfp_lock_release+0x8>)
 80027ba:	f000 ba5c 	b.w	8002c76 <__retarget_lock_release_recursive>
 80027be:	bf00      	nop
 80027c0:	20000130 	.word	0x20000130

080027c4 <__sinit_lock_acquire>:
 80027c4:	4801      	ldr	r0, [pc, #4]	; (80027cc <__sinit_lock_acquire+0x8>)
 80027c6:	f000 ba55 	b.w	8002c74 <__retarget_lock_acquire_recursive>
 80027ca:	bf00      	nop
 80027cc:	2000012b 	.word	0x2000012b

080027d0 <__sinit_lock_release>:
 80027d0:	4801      	ldr	r0, [pc, #4]	; (80027d8 <__sinit_lock_release+0x8>)
 80027d2:	f000 ba50 	b.w	8002c76 <__retarget_lock_release_recursive>
 80027d6:	bf00      	nop
 80027d8:	2000012b 	.word	0x2000012b

080027dc <__sinit>:
 80027dc:	b510      	push	{r4, lr}
 80027de:	4604      	mov	r4, r0
 80027e0:	f7ff fff0 	bl	80027c4 <__sinit_lock_acquire>
 80027e4:	69a3      	ldr	r3, [r4, #24]
 80027e6:	b11b      	cbz	r3, 80027f0 <__sinit+0x14>
 80027e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027ec:	f7ff bff0 	b.w	80027d0 <__sinit_lock_release>
 80027f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80027f4:	6523      	str	r3, [r4, #80]	; 0x50
 80027f6:	4b13      	ldr	r3, [pc, #76]	; (8002844 <__sinit+0x68>)
 80027f8:	4a13      	ldr	r2, [pc, #76]	; (8002848 <__sinit+0x6c>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80027fe:	42a3      	cmp	r3, r4
 8002800:	bf04      	itt	eq
 8002802:	2301      	moveq	r3, #1
 8002804:	61a3      	streq	r3, [r4, #24]
 8002806:	4620      	mov	r0, r4
 8002808:	f000 f820 	bl	800284c <__sfp>
 800280c:	6060      	str	r0, [r4, #4]
 800280e:	4620      	mov	r0, r4
 8002810:	f000 f81c 	bl	800284c <__sfp>
 8002814:	60a0      	str	r0, [r4, #8]
 8002816:	4620      	mov	r0, r4
 8002818:	f000 f818 	bl	800284c <__sfp>
 800281c:	2200      	movs	r2, #0
 800281e:	60e0      	str	r0, [r4, #12]
 8002820:	2104      	movs	r1, #4
 8002822:	6860      	ldr	r0, [r4, #4]
 8002824:	f7ff ff82 	bl	800272c <std>
 8002828:	68a0      	ldr	r0, [r4, #8]
 800282a:	2201      	movs	r2, #1
 800282c:	2109      	movs	r1, #9
 800282e:	f7ff ff7d 	bl	800272c <std>
 8002832:	68e0      	ldr	r0, [r4, #12]
 8002834:	2202      	movs	r2, #2
 8002836:	2112      	movs	r1, #18
 8002838:	f7ff ff78 	bl	800272c <std>
 800283c:	2301      	movs	r3, #1
 800283e:	61a3      	str	r3, [r4, #24]
 8002840:	e7d2      	b.n	80027e8 <__sinit+0xc>
 8002842:	bf00      	nop
 8002844:	080042f8 	.word	0x080042f8
 8002848:	08002775 	.word	0x08002775

0800284c <__sfp>:
 800284c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800284e:	4607      	mov	r7, r0
 8002850:	f7ff ffac 	bl	80027ac <__sfp_lock_acquire>
 8002854:	4b1e      	ldr	r3, [pc, #120]	; (80028d0 <__sfp+0x84>)
 8002856:	681e      	ldr	r6, [r3, #0]
 8002858:	69b3      	ldr	r3, [r6, #24]
 800285a:	b913      	cbnz	r3, 8002862 <__sfp+0x16>
 800285c:	4630      	mov	r0, r6
 800285e:	f7ff ffbd 	bl	80027dc <__sinit>
 8002862:	3648      	adds	r6, #72	; 0x48
 8002864:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002868:	3b01      	subs	r3, #1
 800286a:	d503      	bpl.n	8002874 <__sfp+0x28>
 800286c:	6833      	ldr	r3, [r6, #0]
 800286e:	b30b      	cbz	r3, 80028b4 <__sfp+0x68>
 8002870:	6836      	ldr	r6, [r6, #0]
 8002872:	e7f7      	b.n	8002864 <__sfp+0x18>
 8002874:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002878:	b9d5      	cbnz	r5, 80028b0 <__sfp+0x64>
 800287a:	4b16      	ldr	r3, [pc, #88]	; (80028d4 <__sfp+0x88>)
 800287c:	60e3      	str	r3, [r4, #12]
 800287e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002882:	6665      	str	r5, [r4, #100]	; 0x64
 8002884:	f000 f9f4 	bl	8002c70 <__retarget_lock_init_recursive>
 8002888:	f7ff ff96 	bl	80027b8 <__sfp_lock_release>
 800288c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002890:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002894:	6025      	str	r5, [r4, #0]
 8002896:	61a5      	str	r5, [r4, #24]
 8002898:	2208      	movs	r2, #8
 800289a:	4629      	mov	r1, r5
 800289c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80028a0:	f000 fa5c 	bl	8002d5c <memset>
 80028a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80028a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80028ac:	4620      	mov	r0, r4
 80028ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028b0:	3468      	adds	r4, #104	; 0x68
 80028b2:	e7d9      	b.n	8002868 <__sfp+0x1c>
 80028b4:	2104      	movs	r1, #4
 80028b6:	4638      	mov	r0, r7
 80028b8:	f7ff ff62 	bl	8002780 <__sfmoreglue>
 80028bc:	4604      	mov	r4, r0
 80028be:	6030      	str	r0, [r6, #0]
 80028c0:	2800      	cmp	r0, #0
 80028c2:	d1d5      	bne.n	8002870 <__sfp+0x24>
 80028c4:	f7ff ff78 	bl	80027b8 <__sfp_lock_release>
 80028c8:	230c      	movs	r3, #12
 80028ca:	603b      	str	r3, [r7, #0]
 80028cc:	e7ee      	b.n	80028ac <__sfp+0x60>
 80028ce:	bf00      	nop
 80028d0:	080042f8 	.word	0x080042f8
 80028d4:	ffff0001 	.word	0xffff0001

080028d8 <_fopen_r>:
 80028d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80028da:	460f      	mov	r7, r1
 80028dc:	4611      	mov	r1, r2
 80028de:	aa01      	add	r2, sp, #4
 80028e0:	4605      	mov	r5, r0
 80028e2:	f000 fc57 	bl	8003194 <__sflags>
 80028e6:	4606      	mov	r6, r0
 80028e8:	b918      	cbnz	r0, 80028f2 <_fopen_r+0x1a>
 80028ea:	2400      	movs	r4, #0
 80028ec:	4620      	mov	r0, r4
 80028ee:	b003      	add	sp, #12
 80028f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028f2:	4628      	mov	r0, r5
 80028f4:	f7ff ffaa 	bl	800284c <__sfp>
 80028f8:	4604      	mov	r4, r0
 80028fa:	2800      	cmp	r0, #0
 80028fc:	d0f5      	beq.n	80028ea <_fopen_r+0x12>
 80028fe:	4639      	mov	r1, r7
 8002900:	9a01      	ldr	r2, [sp, #4]
 8002902:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 8002906:	4628      	mov	r0, r5
 8002908:	f000 fada 	bl	8002ec0 <_open_r>
 800290c:	1e07      	subs	r7, r0, #0
 800290e:	da09      	bge.n	8002924 <_fopen_r+0x4c>
 8002910:	2500      	movs	r5, #0
 8002912:	f7ff ff4b 	bl	80027ac <__sfp_lock_acquire>
 8002916:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002918:	81a5      	strh	r5, [r4, #12]
 800291a:	f000 f9aa 	bl	8002c72 <__retarget_lock_close_recursive>
 800291e:	f7ff ff4b 	bl	80027b8 <__sfp_lock_release>
 8002922:	e7e2      	b.n	80028ea <_fopen_r+0x12>
 8002924:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002926:	07db      	lsls	r3, r3, #31
 8002928:	d405      	bmi.n	8002936 <_fopen_r+0x5e>
 800292a:	89a3      	ldrh	r3, [r4, #12]
 800292c:	0598      	lsls	r0, r3, #22
 800292e:	d402      	bmi.n	8002936 <_fopen_r+0x5e>
 8002930:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002932:	f000 f99f 	bl	8002c74 <__retarget_lock_acquire_recursive>
 8002936:	4b0e      	ldr	r3, [pc, #56]	; (8002970 <_fopen_r+0x98>)
 8002938:	6263      	str	r3, [r4, #36]	; 0x24
 800293a:	4b0e      	ldr	r3, [pc, #56]	; (8002974 <_fopen_r+0x9c>)
 800293c:	62a3      	str	r3, [r4, #40]	; 0x28
 800293e:	4b0e      	ldr	r3, [pc, #56]	; (8002978 <_fopen_r+0xa0>)
 8002940:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002942:	05f1      	lsls	r1, r6, #23
 8002944:	4b0d      	ldr	r3, [pc, #52]	; (800297c <_fopen_r+0xa4>)
 8002946:	81e7      	strh	r7, [r4, #14]
 8002948:	81a6      	strh	r6, [r4, #12]
 800294a:	6224      	str	r4, [r4, #32]
 800294c:	6323      	str	r3, [r4, #48]	; 0x30
 800294e:	d505      	bpl.n	800295c <_fopen_r+0x84>
 8002950:	2302      	movs	r3, #2
 8002952:	2200      	movs	r2, #0
 8002954:	4621      	mov	r1, r4
 8002956:	4628      	mov	r0, r5
 8002958:	f000 f81a 	bl	8002990 <_fseek_r>
 800295c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800295e:	07da      	lsls	r2, r3, #31
 8002960:	d4c4      	bmi.n	80028ec <_fopen_r+0x14>
 8002962:	89a3      	ldrh	r3, [r4, #12]
 8002964:	059b      	lsls	r3, r3, #22
 8002966:	d4c1      	bmi.n	80028ec <_fopen_r+0x14>
 8002968:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800296a:	f000 f984 	bl	8002c76 <__retarget_lock_release_recursive>
 800296e:	e7bd      	b.n	80028ec <_fopen_r+0x14>
 8002970:	080030c5 	.word	0x080030c5
 8002974:	080030eb 	.word	0x080030eb
 8002978:	08003123 	.word	0x08003123
 800297c:	08003147 	.word	0x08003147

08002980 <fopen>:
 8002980:	4b02      	ldr	r3, [pc, #8]	; (800298c <fopen+0xc>)
 8002982:	460a      	mov	r2, r1
 8002984:	4601      	mov	r1, r0
 8002986:	6818      	ldr	r0, [r3, #0]
 8002988:	f7ff bfa6 	b.w	80028d8 <_fopen_r>
 800298c:	2000000c 	.word	0x2000000c

08002990 <_fseek_r>:
 8002990:	f000 b800 	b.w	8002994 <_fseeko_r>

08002994 <_fseeko_r>:
 8002994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002998:	460c      	mov	r4, r1
 800299a:	4617      	mov	r7, r2
 800299c:	461e      	mov	r6, r3
 800299e:	4605      	mov	r5, r0
 80029a0:	b118      	cbz	r0, 80029aa <_fseeko_r+0x16>
 80029a2:	6983      	ldr	r3, [r0, #24]
 80029a4:	b90b      	cbnz	r3, 80029aa <_fseeko_r+0x16>
 80029a6:	f7ff ff19 	bl	80027dc <__sinit>
 80029aa:	4b44      	ldr	r3, [pc, #272]	; (8002abc <_fseeko_r+0x128>)
 80029ac:	429c      	cmp	r4, r3
 80029ae:	d122      	bne.n	80029f6 <_fseeko_r+0x62>
 80029b0:	686c      	ldr	r4, [r5, #4]
 80029b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80029b4:	07d9      	lsls	r1, r3, #31
 80029b6:	d405      	bmi.n	80029c4 <_fseeko_r+0x30>
 80029b8:	89a3      	ldrh	r3, [r4, #12]
 80029ba:	059a      	lsls	r2, r3, #22
 80029bc:	d402      	bmi.n	80029c4 <_fseeko_r+0x30>
 80029be:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80029c0:	f000 f958 	bl	8002c74 <__retarget_lock_acquire_recursive>
 80029c4:	89a3      	ldrh	r3, [r4, #12]
 80029c6:	f403 7384 	and.w	r3, r3, #264	; 0x108
 80029ca:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 80029ce:	d103      	bne.n	80029d8 <_fseeko_r+0x44>
 80029d0:	4621      	mov	r1, r4
 80029d2:	4628      	mov	r0, r5
 80029d4:	f7ff fdd8 	bl	8002588 <_fflush_r>
 80029d8:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 80029dc:	f1b8 0f00 	cmp.w	r8, #0
 80029e0:	d113      	bne.n	8002a0a <_fseeko_r+0x76>
 80029e2:	231d      	movs	r3, #29
 80029e4:	602b      	str	r3, [r5, #0]
 80029e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80029e8:	07d9      	lsls	r1, r3, #31
 80029ea:	d55d      	bpl.n	8002aa8 <_fseeko_r+0x114>
 80029ec:	f04f 36ff 	mov.w	r6, #4294967295
 80029f0:	4630      	mov	r0, r6
 80029f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80029f6:	4b32      	ldr	r3, [pc, #200]	; (8002ac0 <_fseeko_r+0x12c>)
 80029f8:	429c      	cmp	r4, r3
 80029fa:	d101      	bne.n	8002a00 <_fseeko_r+0x6c>
 80029fc:	68ac      	ldr	r4, [r5, #8]
 80029fe:	e7d8      	b.n	80029b2 <_fseeko_r+0x1e>
 8002a00:	4b30      	ldr	r3, [pc, #192]	; (8002ac4 <_fseeko_r+0x130>)
 8002a02:	429c      	cmp	r4, r3
 8002a04:	bf08      	it	eq
 8002a06:	68ec      	ldreq	r4, [r5, #12]
 8002a08:	e7d3      	b.n	80029b2 <_fseeko_r+0x1e>
 8002a0a:	2e01      	cmp	r6, #1
 8002a0c:	d036      	beq.n	8002a7c <_fseeko_r+0xe8>
 8002a0e:	f036 0302 	bics.w	r3, r6, #2
 8002a12:	d147      	bne.n	8002aa4 <_fseeko_r+0x110>
 8002a14:	6923      	ldr	r3, [r4, #16]
 8002a16:	b91b      	cbnz	r3, 8002a20 <_fseeko_r+0x8c>
 8002a18:	4621      	mov	r1, r4
 8002a1a:	4628      	mov	r0, r5
 8002a1c:	f000 f950 	bl	8002cc0 <__smakebuf_r>
 8002a20:	4621      	mov	r1, r4
 8002a22:	4628      	mov	r0, r5
 8002a24:	f7ff fdb0 	bl	8002588 <_fflush_r>
 8002a28:	2800      	cmp	r0, #0
 8002a2a:	d1dc      	bne.n	80029e6 <_fseeko_r+0x52>
 8002a2c:	6a21      	ldr	r1, [r4, #32]
 8002a2e:	4633      	mov	r3, r6
 8002a30:	463a      	mov	r2, r7
 8002a32:	4628      	mov	r0, r5
 8002a34:	47c0      	blx	r8
 8002a36:	3001      	adds	r0, #1
 8002a38:	d0d5      	beq.n	80029e6 <_fseeko_r+0x52>
 8002a3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002a3c:	b141      	cbz	r1, 8002a50 <_fseeko_r+0xbc>
 8002a3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002a42:	4299      	cmp	r1, r3
 8002a44:	d002      	beq.n	8002a4c <_fseeko_r+0xb8>
 8002a46:	4628      	mov	r0, r5
 8002a48:	f000 f990 	bl	8002d6c <_free_r>
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	6363      	str	r3, [r4, #52]	; 0x34
 8002a50:	6923      	ldr	r3, [r4, #16]
 8002a52:	6023      	str	r3, [r4, #0]
 8002a54:	89a3      	ldrh	r3, [r4, #12]
 8002a56:	2500      	movs	r5, #0
 8002a58:	f423 6302 	bic.w	r3, r3, #2080	; 0x820
 8002a5c:	6065      	str	r5, [r4, #4]
 8002a5e:	81a3      	strh	r3, [r4, #12]
 8002a60:	2208      	movs	r2, #8
 8002a62:	4629      	mov	r1, r5
 8002a64:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002a68:	f000 f978 	bl	8002d5c <memset>
 8002a6c:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8002a6e:	f016 0601 	ands.w	r6, r6, #1
 8002a72:	d120      	bne.n	8002ab6 <_fseeko_r+0x122>
 8002a74:	89a3      	ldrh	r3, [r4, #12]
 8002a76:	059b      	lsls	r3, r3, #22
 8002a78:	d4ba      	bmi.n	80029f0 <_fseeko_r+0x5c>
 8002a7a:	e00c      	b.n	8002a96 <_fseeko_r+0x102>
 8002a7c:	4621      	mov	r1, r4
 8002a7e:	4628      	mov	r0, r5
 8002a80:	f000 f822 	bl	8002ac8 <_ftello_r>
 8002a84:	1c43      	adds	r3, r0, #1
 8002a86:	4606      	mov	r6, r0
 8002a88:	d109      	bne.n	8002a9e <_fseeko_r+0x10a>
 8002a8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002a8c:	07dd      	lsls	r5, r3, #31
 8002a8e:	d4ad      	bmi.n	80029ec <_fseeko_r+0x58>
 8002a90:	89a3      	ldrh	r3, [r4, #12]
 8002a92:	0598      	lsls	r0, r3, #22
 8002a94:	d4aa      	bmi.n	80029ec <_fseeko_r+0x58>
 8002a96:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002a98:	f000 f8ed 	bl	8002c76 <__retarget_lock_release_recursive>
 8002a9c:	e7a8      	b.n	80029f0 <_fseeko_r+0x5c>
 8002a9e:	4407      	add	r7, r0
 8002aa0:	2600      	movs	r6, #0
 8002aa2:	e7b7      	b.n	8002a14 <_fseeko_r+0x80>
 8002aa4:	2316      	movs	r3, #22
 8002aa6:	e79d      	b.n	80029e4 <_fseeko_r+0x50>
 8002aa8:	89a3      	ldrh	r3, [r4, #12]
 8002aaa:	059a      	lsls	r2, r3, #22
 8002aac:	d49e      	bmi.n	80029ec <_fseeko_r+0x58>
 8002aae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002ab0:	f000 f8e1 	bl	8002c76 <__retarget_lock_release_recursive>
 8002ab4:	e79a      	b.n	80029ec <_fseeko_r+0x58>
 8002ab6:	462e      	mov	r6, r5
 8002ab8:	e79a      	b.n	80029f0 <_fseeko_r+0x5c>
 8002aba:	bf00      	nop
 8002abc:	080042b8 	.word	0x080042b8
 8002ac0:	080042d8 	.word	0x080042d8
 8002ac4:	08004298 	.word	0x08004298

08002ac8 <_ftello_r>:
 8002ac8:	b570      	push	{r4, r5, r6, lr}
 8002aca:	460c      	mov	r4, r1
 8002acc:	4605      	mov	r5, r0
 8002ace:	b118      	cbz	r0, 8002ad8 <_ftello_r+0x10>
 8002ad0:	6983      	ldr	r3, [r0, #24]
 8002ad2:	b90b      	cbnz	r3, 8002ad8 <_ftello_r+0x10>
 8002ad4:	f7ff fe82 	bl	80027dc <__sinit>
 8002ad8:	4b32      	ldr	r3, [pc, #200]	; (8002ba4 <_ftello_r+0xdc>)
 8002ada:	429c      	cmp	r4, r3
 8002adc:	d114      	bne.n	8002b08 <_ftello_r+0x40>
 8002ade:	686c      	ldr	r4, [r5, #4]
 8002ae0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002ae2:	07da      	lsls	r2, r3, #31
 8002ae4:	d405      	bmi.n	8002af2 <_ftello_r+0x2a>
 8002ae6:	89a3      	ldrh	r3, [r4, #12]
 8002ae8:	059b      	lsls	r3, r3, #22
 8002aea:	d402      	bmi.n	8002af2 <_ftello_r+0x2a>
 8002aec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002aee:	f000 f8c1 	bl	8002c74 <__retarget_lock_acquire_recursive>
 8002af2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002af4:	b9ce      	cbnz	r6, 8002b2a <_ftello_r+0x62>
 8002af6:	231d      	movs	r3, #29
 8002af8:	602b      	str	r3, [r5, #0]
 8002afa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002afc:	07de      	lsls	r6, r3, #31
 8002afe:	d50d      	bpl.n	8002b1c <_ftello_r+0x54>
 8002b00:	f04f 35ff 	mov.w	r5, #4294967295
 8002b04:	4628      	mov	r0, r5
 8002b06:	bd70      	pop	{r4, r5, r6, pc}
 8002b08:	4b27      	ldr	r3, [pc, #156]	; (8002ba8 <_ftello_r+0xe0>)
 8002b0a:	429c      	cmp	r4, r3
 8002b0c:	d101      	bne.n	8002b12 <_ftello_r+0x4a>
 8002b0e:	68ac      	ldr	r4, [r5, #8]
 8002b10:	e7e6      	b.n	8002ae0 <_ftello_r+0x18>
 8002b12:	4b26      	ldr	r3, [pc, #152]	; (8002bac <_ftello_r+0xe4>)
 8002b14:	429c      	cmp	r4, r3
 8002b16:	bf08      	it	eq
 8002b18:	68ec      	ldreq	r4, [r5, #12]
 8002b1a:	e7e1      	b.n	8002ae0 <_ftello_r+0x18>
 8002b1c:	89a3      	ldrh	r3, [r4, #12]
 8002b1e:	059d      	lsls	r5, r3, #22
 8002b20:	d4ee      	bmi.n	8002b00 <_ftello_r+0x38>
 8002b22:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002b24:	f000 f8a7 	bl	8002c76 <__retarget_lock_release_recursive>
 8002b28:	e7ea      	b.n	8002b00 <_ftello_r+0x38>
 8002b2a:	89a2      	ldrh	r2, [r4, #12]
 8002b2c:	f002 030c 	and.w	r3, r2, #12
 8002b30:	2b08      	cmp	r3, #8
 8002b32:	d119      	bne.n	8002b68 <_ftello_r+0xa0>
 8002b34:	6823      	ldr	r3, [r4, #0]
 8002b36:	b1bb      	cbz	r3, 8002b68 <_ftello_r+0xa0>
 8002b38:	6921      	ldr	r1, [r4, #16]
 8002b3a:	1a5b      	subs	r3, r3, r1
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	dd13      	ble.n	8002b68 <_ftello_r+0xa0>
 8002b40:	05d0      	lsls	r0, r2, #23
 8002b42:	d511      	bpl.n	8002b68 <_ftello_r+0xa0>
 8002b44:	2302      	movs	r3, #2
 8002b46:	2200      	movs	r2, #0
 8002b48:	6a21      	ldr	r1, [r4, #32]
 8002b4a:	4628      	mov	r0, r5
 8002b4c:	47b0      	blx	r6
 8002b4e:	1c41      	adds	r1, r0, #1
 8002b50:	4605      	mov	r5, r0
 8002b52:	d10d      	bne.n	8002b70 <_ftello_r+0xa8>
 8002b54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002b56:	07da      	lsls	r2, r3, #31
 8002b58:	d4d2      	bmi.n	8002b00 <_ftello_r+0x38>
 8002b5a:	89a3      	ldrh	r3, [r4, #12]
 8002b5c:	059b      	lsls	r3, r3, #22
 8002b5e:	d4cf      	bmi.n	8002b00 <_ftello_r+0x38>
 8002b60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002b62:	f000 f888 	bl	8002c76 <__retarget_lock_release_recursive>
 8002b66:	e7cd      	b.n	8002b04 <_ftello_r+0x3c>
 8002b68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002b6c:	d00f      	beq.n	8002b8e <_ftello_r+0xc6>
 8002b6e:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8002b70:	89a2      	ldrh	r2, [r4, #12]
 8002b72:	0756      	lsls	r6, r2, #29
 8002b74:	d50d      	bpl.n	8002b92 <_ftello_r+0xca>
 8002b76:	6863      	ldr	r3, [r4, #4]
 8002b78:	1aed      	subs	r5, r5, r3
 8002b7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002b7c:	b10b      	cbz	r3, 8002b82 <_ftello_r+0xba>
 8002b7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002b80:	1aed      	subs	r5, r5, r3
 8002b82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002b84:	07d9      	lsls	r1, r3, #31
 8002b86:	d4bd      	bmi.n	8002b04 <_ftello_r+0x3c>
 8002b88:	0593      	lsls	r3, r2, #22
 8002b8a:	d4bb      	bmi.n	8002b04 <_ftello_r+0x3c>
 8002b8c:	e7e8      	b.n	8002b60 <_ftello_r+0x98>
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e7da      	b.n	8002b48 <_ftello_r+0x80>
 8002b92:	0710      	lsls	r0, r2, #28
 8002b94:	d5f5      	bpl.n	8002b82 <_ftello_r+0xba>
 8002b96:	6823      	ldr	r3, [r4, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d0f2      	beq.n	8002b82 <_ftello_r+0xba>
 8002b9c:	6921      	ldr	r1, [r4, #16]
 8002b9e:	1a5b      	subs	r3, r3, r1
 8002ba0:	441d      	add	r5, r3
 8002ba2:	e7ee      	b.n	8002b82 <_ftello_r+0xba>
 8002ba4:	080042b8 	.word	0x080042b8
 8002ba8:	080042d8 	.word	0x080042d8
 8002bac:	08004298 	.word	0x08004298

08002bb0 <_fwalk>:
 8002bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bb4:	460f      	mov	r7, r1
 8002bb6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002bba:	2600      	movs	r6, #0
 8002bbc:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 8002bc0:	f1b8 0801 	subs.w	r8, r8, #1
 8002bc4:	d505      	bpl.n	8002bd2 <_fwalk+0x22>
 8002bc6:	6824      	ldr	r4, [r4, #0]
 8002bc8:	2c00      	cmp	r4, #0
 8002bca:	d1f7      	bne.n	8002bbc <_fwalk+0xc>
 8002bcc:	4630      	mov	r0, r6
 8002bce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002bd2:	89ab      	ldrh	r3, [r5, #12]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d906      	bls.n	8002be6 <_fwalk+0x36>
 8002bd8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002bdc:	3301      	adds	r3, #1
 8002bde:	d002      	beq.n	8002be6 <_fwalk+0x36>
 8002be0:	4628      	mov	r0, r5
 8002be2:	47b8      	blx	r7
 8002be4:	4306      	orrs	r6, r0
 8002be6:	3568      	adds	r5, #104	; 0x68
 8002be8:	e7ea      	b.n	8002bc0 <_fwalk+0x10>

08002bea <_fwalk_reent>:
 8002bea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002bee:	4606      	mov	r6, r0
 8002bf0:	4688      	mov	r8, r1
 8002bf2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002bf6:	2700      	movs	r7, #0
 8002bf8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002bfc:	f1b9 0901 	subs.w	r9, r9, #1
 8002c00:	d505      	bpl.n	8002c0e <_fwalk_reent+0x24>
 8002c02:	6824      	ldr	r4, [r4, #0]
 8002c04:	2c00      	cmp	r4, #0
 8002c06:	d1f7      	bne.n	8002bf8 <_fwalk_reent+0xe>
 8002c08:	4638      	mov	r0, r7
 8002c0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c0e:	89ab      	ldrh	r3, [r5, #12]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d907      	bls.n	8002c24 <_fwalk_reent+0x3a>
 8002c14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002c18:	3301      	adds	r3, #1
 8002c1a:	d003      	beq.n	8002c24 <_fwalk_reent+0x3a>
 8002c1c:	4629      	mov	r1, r5
 8002c1e:	4630      	mov	r0, r6
 8002c20:	47c0      	blx	r8
 8002c22:	4307      	orrs	r7, r0
 8002c24:	3568      	adds	r5, #104	; 0x68
 8002c26:	e7e9      	b.n	8002bfc <_fwalk_reent+0x12>

08002c28 <__libc_init_array>:
 8002c28:	b570      	push	{r4, r5, r6, lr}
 8002c2a:	4d0d      	ldr	r5, [pc, #52]	; (8002c60 <__libc_init_array+0x38>)
 8002c2c:	4c0d      	ldr	r4, [pc, #52]	; (8002c64 <__libc_init_array+0x3c>)
 8002c2e:	1b64      	subs	r4, r4, r5
 8002c30:	10a4      	asrs	r4, r4, #2
 8002c32:	2600      	movs	r6, #0
 8002c34:	42a6      	cmp	r6, r4
 8002c36:	d109      	bne.n	8002c4c <__libc_init_array+0x24>
 8002c38:	4d0b      	ldr	r5, [pc, #44]	; (8002c68 <__libc_init_array+0x40>)
 8002c3a:	4c0c      	ldr	r4, [pc, #48]	; (8002c6c <__libc_init_array+0x44>)
 8002c3c:	f001 fb00 	bl	8004240 <_init>
 8002c40:	1b64      	subs	r4, r4, r5
 8002c42:	10a4      	asrs	r4, r4, #2
 8002c44:	2600      	movs	r6, #0
 8002c46:	42a6      	cmp	r6, r4
 8002c48:	d105      	bne.n	8002c56 <__libc_init_array+0x2e>
 8002c4a:	bd70      	pop	{r4, r5, r6, pc}
 8002c4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c50:	4798      	blx	r3
 8002c52:	3601      	adds	r6, #1
 8002c54:	e7ee      	b.n	8002c34 <__libc_init_array+0xc>
 8002c56:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c5a:	4798      	blx	r3
 8002c5c:	3601      	adds	r6, #1
 8002c5e:	e7f2      	b.n	8002c46 <__libc_init_array+0x1e>
 8002c60:	08004454 	.word	0x08004454
 8002c64:	08004454 	.word	0x08004454
 8002c68:	08004454 	.word	0x08004454
 8002c6c:	08004458 	.word	0x08004458

08002c70 <__retarget_lock_init_recursive>:
 8002c70:	4770      	bx	lr

08002c72 <__retarget_lock_close_recursive>:
 8002c72:	4770      	bx	lr

08002c74 <__retarget_lock_acquire_recursive>:
 8002c74:	4770      	bx	lr

08002c76 <__retarget_lock_release_recursive>:
 8002c76:	4770      	bx	lr

08002c78 <__swhatbuf_r>:
 8002c78:	b570      	push	{r4, r5, r6, lr}
 8002c7a:	460e      	mov	r6, r1
 8002c7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c80:	2900      	cmp	r1, #0
 8002c82:	b096      	sub	sp, #88	; 0x58
 8002c84:	4614      	mov	r4, r2
 8002c86:	461d      	mov	r5, r3
 8002c88:	da07      	bge.n	8002c9a <__swhatbuf_r+0x22>
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	602b      	str	r3, [r5, #0]
 8002c8e:	89b3      	ldrh	r3, [r6, #12]
 8002c90:	061a      	lsls	r2, r3, #24
 8002c92:	d410      	bmi.n	8002cb6 <__swhatbuf_r+0x3e>
 8002c94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c98:	e00e      	b.n	8002cb8 <__swhatbuf_r+0x40>
 8002c9a:	466a      	mov	r2, sp
 8002c9c:	f000 fab0 	bl	8003200 <_fstat_r>
 8002ca0:	2800      	cmp	r0, #0
 8002ca2:	dbf2      	blt.n	8002c8a <__swhatbuf_r+0x12>
 8002ca4:	9a01      	ldr	r2, [sp, #4]
 8002ca6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002caa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002cae:	425a      	negs	r2, r3
 8002cb0:	415a      	adcs	r2, r3
 8002cb2:	602a      	str	r2, [r5, #0]
 8002cb4:	e7ee      	b.n	8002c94 <__swhatbuf_r+0x1c>
 8002cb6:	2340      	movs	r3, #64	; 0x40
 8002cb8:	2000      	movs	r0, #0
 8002cba:	6023      	str	r3, [r4, #0]
 8002cbc:	b016      	add	sp, #88	; 0x58
 8002cbe:	bd70      	pop	{r4, r5, r6, pc}

08002cc0 <__smakebuf_r>:
 8002cc0:	898b      	ldrh	r3, [r1, #12]
 8002cc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002cc4:	079d      	lsls	r5, r3, #30
 8002cc6:	4606      	mov	r6, r0
 8002cc8:	460c      	mov	r4, r1
 8002cca:	d507      	bpl.n	8002cdc <__smakebuf_r+0x1c>
 8002ccc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002cd0:	6023      	str	r3, [r4, #0]
 8002cd2:	6123      	str	r3, [r4, #16]
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	6163      	str	r3, [r4, #20]
 8002cd8:	b002      	add	sp, #8
 8002cda:	bd70      	pop	{r4, r5, r6, pc}
 8002cdc:	ab01      	add	r3, sp, #4
 8002cde:	466a      	mov	r2, sp
 8002ce0:	f7ff ffca 	bl	8002c78 <__swhatbuf_r>
 8002ce4:	9900      	ldr	r1, [sp, #0]
 8002ce6:	4605      	mov	r5, r0
 8002ce8:	4630      	mov	r0, r6
 8002cea:	f000 f88f 	bl	8002e0c <_malloc_r>
 8002cee:	b948      	cbnz	r0, 8002d04 <__smakebuf_r+0x44>
 8002cf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002cf4:	059a      	lsls	r2, r3, #22
 8002cf6:	d4ef      	bmi.n	8002cd8 <__smakebuf_r+0x18>
 8002cf8:	f023 0303 	bic.w	r3, r3, #3
 8002cfc:	f043 0302 	orr.w	r3, r3, #2
 8002d00:	81a3      	strh	r3, [r4, #12]
 8002d02:	e7e3      	b.n	8002ccc <__smakebuf_r+0xc>
 8002d04:	4b0d      	ldr	r3, [pc, #52]	; (8002d3c <__smakebuf_r+0x7c>)
 8002d06:	62b3      	str	r3, [r6, #40]	; 0x28
 8002d08:	89a3      	ldrh	r3, [r4, #12]
 8002d0a:	6020      	str	r0, [r4, #0]
 8002d0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d10:	81a3      	strh	r3, [r4, #12]
 8002d12:	9b00      	ldr	r3, [sp, #0]
 8002d14:	6163      	str	r3, [r4, #20]
 8002d16:	9b01      	ldr	r3, [sp, #4]
 8002d18:	6120      	str	r0, [r4, #16]
 8002d1a:	b15b      	cbz	r3, 8002d34 <__smakebuf_r+0x74>
 8002d1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002d20:	4630      	mov	r0, r6
 8002d22:	f000 fa7f 	bl	8003224 <_isatty_r>
 8002d26:	b128      	cbz	r0, 8002d34 <__smakebuf_r+0x74>
 8002d28:	89a3      	ldrh	r3, [r4, #12]
 8002d2a:	f023 0303 	bic.w	r3, r3, #3
 8002d2e:	f043 0301 	orr.w	r3, r3, #1
 8002d32:	81a3      	strh	r3, [r4, #12]
 8002d34:	89a0      	ldrh	r0, [r4, #12]
 8002d36:	4305      	orrs	r5, r0
 8002d38:	81a5      	strh	r5, [r4, #12]
 8002d3a:	e7cd      	b.n	8002cd8 <__smakebuf_r+0x18>
 8002d3c:	08002775 	.word	0x08002775

08002d40 <memcpy>:
 8002d40:	440a      	add	r2, r1
 8002d42:	4291      	cmp	r1, r2
 8002d44:	f100 33ff 	add.w	r3, r0, #4294967295
 8002d48:	d100      	bne.n	8002d4c <memcpy+0xc>
 8002d4a:	4770      	bx	lr
 8002d4c:	b510      	push	{r4, lr}
 8002d4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002d52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002d56:	4291      	cmp	r1, r2
 8002d58:	d1f9      	bne.n	8002d4e <memcpy+0xe>
 8002d5a:	bd10      	pop	{r4, pc}

08002d5c <memset>:
 8002d5c:	4402      	add	r2, r0
 8002d5e:	4603      	mov	r3, r0
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d100      	bne.n	8002d66 <memset+0xa>
 8002d64:	4770      	bx	lr
 8002d66:	f803 1b01 	strb.w	r1, [r3], #1
 8002d6a:	e7f9      	b.n	8002d60 <memset+0x4>

08002d6c <_free_r>:
 8002d6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002d6e:	2900      	cmp	r1, #0
 8002d70:	d048      	beq.n	8002e04 <_free_r+0x98>
 8002d72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d76:	9001      	str	r0, [sp, #4]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	f1a1 0404 	sub.w	r4, r1, #4
 8002d7e:	bfb8      	it	lt
 8002d80:	18e4      	addlt	r4, r4, r3
 8002d82:	f000 fa71 	bl	8003268 <__malloc_lock>
 8002d86:	4a20      	ldr	r2, [pc, #128]	; (8002e08 <_free_r+0x9c>)
 8002d88:	9801      	ldr	r0, [sp, #4]
 8002d8a:	6813      	ldr	r3, [r2, #0]
 8002d8c:	4615      	mov	r5, r2
 8002d8e:	b933      	cbnz	r3, 8002d9e <_free_r+0x32>
 8002d90:	6063      	str	r3, [r4, #4]
 8002d92:	6014      	str	r4, [r2, #0]
 8002d94:	b003      	add	sp, #12
 8002d96:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002d9a:	f000 ba6b 	b.w	8003274 <__malloc_unlock>
 8002d9e:	42a3      	cmp	r3, r4
 8002da0:	d90b      	bls.n	8002dba <_free_r+0x4e>
 8002da2:	6821      	ldr	r1, [r4, #0]
 8002da4:	1862      	adds	r2, r4, r1
 8002da6:	4293      	cmp	r3, r2
 8002da8:	bf04      	itt	eq
 8002daa:	681a      	ldreq	r2, [r3, #0]
 8002dac:	685b      	ldreq	r3, [r3, #4]
 8002dae:	6063      	str	r3, [r4, #4]
 8002db0:	bf04      	itt	eq
 8002db2:	1852      	addeq	r2, r2, r1
 8002db4:	6022      	streq	r2, [r4, #0]
 8002db6:	602c      	str	r4, [r5, #0]
 8002db8:	e7ec      	b.n	8002d94 <_free_r+0x28>
 8002dba:	461a      	mov	r2, r3
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	b10b      	cbz	r3, 8002dc4 <_free_r+0x58>
 8002dc0:	42a3      	cmp	r3, r4
 8002dc2:	d9fa      	bls.n	8002dba <_free_r+0x4e>
 8002dc4:	6811      	ldr	r1, [r2, #0]
 8002dc6:	1855      	adds	r5, r2, r1
 8002dc8:	42a5      	cmp	r5, r4
 8002dca:	d10b      	bne.n	8002de4 <_free_r+0x78>
 8002dcc:	6824      	ldr	r4, [r4, #0]
 8002dce:	4421      	add	r1, r4
 8002dd0:	1854      	adds	r4, r2, r1
 8002dd2:	42a3      	cmp	r3, r4
 8002dd4:	6011      	str	r1, [r2, #0]
 8002dd6:	d1dd      	bne.n	8002d94 <_free_r+0x28>
 8002dd8:	681c      	ldr	r4, [r3, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	6053      	str	r3, [r2, #4]
 8002dde:	4421      	add	r1, r4
 8002de0:	6011      	str	r1, [r2, #0]
 8002de2:	e7d7      	b.n	8002d94 <_free_r+0x28>
 8002de4:	d902      	bls.n	8002dec <_free_r+0x80>
 8002de6:	230c      	movs	r3, #12
 8002de8:	6003      	str	r3, [r0, #0]
 8002dea:	e7d3      	b.n	8002d94 <_free_r+0x28>
 8002dec:	6825      	ldr	r5, [r4, #0]
 8002dee:	1961      	adds	r1, r4, r5
 8002df0:	428b      	cmp	r3, r1
 8002df2:	bf04      	itt	eq
 8002df4:	6819      	ldreq	r1, [r3, #0]
 8002df6:	685b      	ldreq	r3, [r3, #4]
 8002df8:	6063      	str	r3, [r4, #4]
 8002dfa:	bf04      	itt	eq
 8002dfc:	1949      	addeq	r1, r1, r5
 8002dfe:	6021      	streq	r1, [r4, #0]
 8002e00:	6054      	str	r4, [r2, #4]
 8002e02:	e7c7      	b.n	8002d94 <_free_r+0x28>
 8002e04:	b003      	add	sp, #12
 8002e06:	bd30      	pop	{r4, r5, pc}
 8002e08:	20000094 	.word	0x20000094

08002e0c <_malloc_r>:
 8002e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e0e:	1ccd      	adds	r5, r1, #3
 8002e10:	f025 0503 	bic.w	r5, r5, #3
 8002e14:	3508      	adds	r5, #8
 8002e16:	2d0c      	cmp	r5, #12
 8002e18:	bf38      	it	cc
 8002e1a:	250c      	movcc	r5, #12
 8002e1c:	2d00      	cmp	r5, #0
 8002e1e:	4606      	mov	r6, r0
 8002e20:	db01      	blt.n	8002e26 <_malloc_r+0x1a>
 8002e22:	42a9      	cmp	r1, r5
 8002e24:	d903      	bls.n	8002e2e <_malloc_r+0x22>
 8002e26:	230c      	movs	r3, #12
 8002e28:	6033      	str	r3, [r6, #0]
 8002e2a:	2000      	movs	r0, #0
 8002e2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e2e:	f000 fa1b 	bl	8003268 <__malloc_lock>
 8002e32:	4921      	ldr	r1, [pc, #132]	; (8002eb8 <_malloc_r+0xac>)
 8002e34:	680a      	ldr	r2, [r1, #0]
 8002e36:	4614      	mov	r4, r2
 8002e38:	b99c      	cbnz	r4, 8002e62 <_malloc_r+0x56>
 8002e3a:	4f20      	ldr	r7, [pc, #128]	; (8002ebc <_malloc_r+0xb0>)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	b923      	cbnz	r3, 8002e4a <_malloc_r+0x3e>
 8002e40:	4621      	mov	r1, r4
 8002e42:	4630      	mov	r0, r6
 8002e44:	f000 f8e2 	bl	800300c <_sbrk_r>
 8002e48:	6038      	str	r0, [r7, #0]
 8002e4a:	4629      	mov	r1, r5
 8002e4c:	4630      	mov	r0, r6
 8002e4e:	f000 f8dd 	bl	800300c <_sbrk_r>
 8002e52:	1c43      	adds	r3, r0, #1
 8002e54:	d123      	bne.n	8002e9e <_malloc_r+0x92>
 8002e56:	230c      	movs	r3, #12
 8002e58:	6033      	str	r3, [r6, #0]
 8002e5a:	4630      	mov	r0, r6
 8002e5c:	f000 fa0a 	bl	8003274 <__malloc_unlock>
 8002e60:	e7e3      	b.n	8002e2a <_malloc_r+0x1e>
 8002e62:	6823      	ldr	r3, [r4, #0]
 8002e64:	1b5b      	subs	r3, r3, r5
 8002e66:	d417      	bmi.n	8002e98 <_malloc_r+0x8c>
 8002e68:	2b0b      	cmp	r3, #11
 8002e6a:	d903      	bls.n	8002e74 <_malloc_r+0x68>
 8002e6c:	6023      	str	r3, [r4, #0]
 8002e6e:	441c      	add	r4, r3
 8002e70:	6025      	str	r5, [r4, #0]
 8002e72:	e004      	b.n	8002e7e <_malloc_r+0x72>
 8002e74:	6863      	ldr	r3, [r4, #4]
 8002e76:	42a2      	cmp	r2, r4
 8002e78:	bf0c      	ite	eq
 8002e7a:	600b      	streq	r3, [r1, #0]
 8002e7c:	6053      	strne	r3, [r2, #4]
 8002e7e:	4630      	mov	r0, r6
 8002e80:	f000 f9f8 	bl	8003274 <__malloc_unlock>
 8002e84:	f104 000b 	add.w	r0, r4, #11
 8002e88:	1d23      	adds	r3, r4, #4
 8002e8a:	f020 0007 	bic.w	r0, r0, #7
 8002e8e:	1ac2      	subs	r2, r0, r3
 8002e90:	d0cc      	beq.n	8002e2c <_malloc_r+0x20>
 8002e92:	1a1b      	subs	r3, r3, r0
 8002e94:	50a3      	str	r3, [r4, r2]
 8002e96:	e7c9      	b.n	8002e2c <_malloc_r+0x20>
 8002e98:	4622      	mov	r2, r4
 8002e9a:	6864      	ldr	r4, [r4, #4]
 8002e9c:	e7cc      	b.n	8002e38 <_malloc_r+0x2c>
 8002e9e:	1cc4      	adds	r4, r0, #3
 8002ea0:	f024 0403 	bic.w	r4, r4, #3
 8002ea4:	42a0      	cmp	r0, r4
 8002ea6:	d0e3      	beq.n	8002e70 <_malloc_r+0x64>
 8002ea8:	1a21      	subs	r1, r4, r0
 8002eaa:	4630      	mov	r0, r6
 8002eac:	f000 f8ae 	bl	800300c <_sbrk_r>
 8002eb0:	3001      	adds	r0, #1
 8002eb2:	d1dd      	bne.n	8002e70 <_malloc_r+0x64>
 8002eb4:	e7cf      	b.n	8002e56 <_malloc_r+0x4a>
 8002eb6:	bf00      	nop
 8002eb8:	20000094 	.word	0x20000094
 8002ebc:	20000098 	.word	0x20000098

08002ec0 <_open_r>:
 8002ec0:	b538      	push	{r3, r4, r5, lr}
 8002ec2:	4d07      	ldr	r5, [pc, #28]	; (8002ee0 <_open_r+0x20>)
 8002ec4:	4604      	mov	r4, r0
 8002ec6:	4608      	mov	r0, r1
 8002ec8:	4611      	mov	r1, r2
 8002eca:	2200      	movs	r2, #0
 8002ecc:	602a      	str	r2, [r5, #0]
 8002ece:	461a      	mov	r2, r3
 8002ed0:	f7fd fe59 	bl	8000b86 <_open>
 8002ed4:	1c43      	adds	r3, r0, #1
 8002ed6:	d102      	bne.n	8002ede <_open_r+0x1e>
 8002ed8:	682b      	ldr	r3, [r5, #0]
 8002eda:	b103      	cbz	r3, 8002ede <_open_r+0x1e>
 8002edc:	6023      	str	r3, [r4, #0]
 8002ede:	bd38      	pop	{r3, r4, r5, pc}
 8002ee0:	20000134 	.word	0x20000134

08002ee4 <lflush>:
 8002ee4:	8983      	ldrh	r3, [r0, #12]
 8002ee6:	f003 0309 	and.w	r3, r3, #9
 8002eea:	2b09      	cmp	r3, #9
 8002eec:	d101      	bne.n	8002ef2 <lflush+0xe>
 8002eee:	f7ff bb87 	b.w	8002600 <fflush>
 8002ef2:	2000      	movs	r0, #0
 8002ef4:	4770      	bx	lr
	...

08002ef8 <__srefill_r>:
 8002ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002efa:	460c      	mov	r4, r1
 8002efc:	4605      	mov	r5, r0
 8002efe:	b118      	cbz	r0, 8002f08 <__srefill_r+0x10>
 8002f00:	6983      	ldr	r3, [r0, #24]
 8002f02:	b90b      	cbnz	r3, 8002f08 <__srefill_r+0x10>
 8002f04:	f7ff fc6a 	bl	80027dc <__sinit>
 8002f08:	4b3b      	ldr	r3, [pc, #236]	; (8002ff8 <__srefill_r+0x100>)
 8002f0a:	429c      	cmp	r4, r3
 8002f0c:	d10a      	bne.n	8002f24 <__srefill_r+0x2c>
 8002f0e:	686c      	ldr	r4, [r5, #4]
 8002f10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002f14:	2300      	movs	r3, #0
 8002f16:	6063      	str	r3, [r4, #4]
 8002f18:	89a3      	ldrh	r3, [r4, #12]
 8002f1a:	069e      	lsls	r6, r3, #26
 8002f1c:	d50c      	bpl.n	8002f38 <__srefill_r+0x40>
 8002f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8002f22:	e066      	b.n	8002ff2 <__srefill_r+0xfa>
 8002f24:	4b35      	ldr	r3, [pc, #212]	; (8002ffc <__srefill_r+0x104>)
 8002f26:	429c      	cmp	r4, r3
 8002f28:	d101      	bne.n	8002f2e <__srefill_r+0x36>
 8002f2a:	68ac      	ldr	r4, [r5, #8]
 8002f2c:	e7f0      	b.n	8002f10 <__srefill_r+0x18>
 8002f2e:	4b34      	ldr	r3, [pc, #208]	; (8003000 <__srefill_r+0x108>)
 8002f30:	429c      	cmp	r4, r3
 8002f32:	bf08      	it	eq
 8002f34:	68ec      	ldreq	r4, [r5, #12]
 8002f36:	e7eb      	b.n	8002f10 <__srefill_r+0x18>
 8002f38:	0758      	lsls	r0, r3, #29
 8002f3a:	d448      	bmi.n	8002fce <__srefill_r+0xd6>
 8002f3c:	06d9      	lsls	r1, r3, #27
 8002f3e:	d405      	bmi.n	8002f4c <__srefill_r+0x54>
 8002f40:	2309      	movs	r3, #9
 8002f42:	602b      	str	r3, [r5, #0]
 8002f44:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002f48:	81a3      	strh	r3, [r4, #12]
 8002f4a:	e7e8      	b.n	8002f1e <__srefill_r+0x26>
 8002f4c:	071a      	lsls	r2, r3, #28
 8002f4e:	d50b      	bpl.n	8002f68 <__srefill_r+0x70>
 8002f50:	4621      	mov	r1, r4
 8002f52:	4628      	mov	r0, r5
 8002f54:	f7ff fb18 	bl	8002588 <_fflush_r>
 8002f58:	2800      	cmp	r0, #0
 8002f5a:	d1e0      	bne.n	8002f1e <__srefill_r+0x26>
 8002f5c:	89a3      	ldrh	r3, [r4, #12]
 8002f5e:	60a0      	str	r0, [r4, #8]
 8002f60:	f023 0308 	bic.w	r3, r3, #8
 8002f64:	81a3      	strh	r3, [r4, #12]
 8002f66:	61a0      	str	r0, [r4, #24]
 8002f68:	89a3      	ldrh	r3, [r4, #12]
 8002f6a:	f043 0304 	orr.w	r3, r3, #4
 8002f6e:	81a3      	strh	r3, [r4, #12]
 8002f70:	6923      	ldr	r3, [r4, #16]
 8002f72:	b91b      	cbnz	r3, 8002f7c <__srefill_r+0x84>
 8002f74:	4621      	mov	r1, r4
 8002f76:	4628      	mov	r0, r5
 8002f78:	f7ff fea2 	bl	8002cc0 <__smakebuf_r>
 8002f7c:	89a6      	ldrh	r6, [r4, #12]
 8002f7e:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8002f82:	07b3      	lsls	r3, r6, #30
 8002f84:	d00f      	beq.n	8002fa6 <__srefill_r+0xae>
 8002f86:	2301      	movs	r3, #1
 8002f88:	81a3      	strh	r3, [r4, #12]
 8002f8a:	4b1e      	ldr	r3, [pc, #120]	; (8003004 <__srefill_r+0x10c>)
 8002f8c:	491e      	ldr	r1, [pc, #120]	; (8003008 <__srefill_r+0x110>)
 8002f8e:	6818      	ldr	r0, [r3, #0]
 8002f90:	f006 0609 	and.w	r6, r6, #9
 8002f94:	f7ff fe0c 	bl	8002bb0 <_fwalk>
 8002f98:	2e09      	cmp	r6, #9
 8002f9a:	81a7      	strh	r7, [r4, #12]
 8002f9c:	d103      	bne.n	8002fa6 <__srefill_r+0xae>
 8002f9e:	4621      	mov	r1, r4
 8002fa0:	4628      	mov	r0, r5
 8002fa2:	f7ff fa6b 	bl	800247c <__sflush_r>
 8002fa6:	6922      	ldr	r2, [r4, #16]
 8002fa8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8002faa:	6963      	ldr	r3, [r4, #20]
 8002fac:	6a21      	ldr	r1, [r4, #32]
 8002fae:	6022      	str	r2, [r4, #0]
 8002fb0:	4628      	mov	r0, r5
 8002fb2:	47b0      	blx	r6
 8002fb4:	2800      	cmp	r0, #0
 8002fb6:	6060      	str	r0, [r4, #4]
 8002fb8:	dc1c      	bgt.n	8002ff4 <__srefill_r+0xfc>
 8002fba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002fbe:	bf17      	itett	ne
 8002fc0:	2200      	movne	r2, #0
 8002fc2:	f043 0320 	orreq.w	r3, r3, #32
 8002fc6:	6062      	strne	r2, [r4, #4]
 8002fc8:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8002fcc:	e7bc      	b.n	8002f48 <__srefill_r+0x50>
 8002fce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002fd0:	2900      	cmp	r1, #0
 8002fd2:	d0cd      	beq.n	8002f70 <__srefill_r+0x78>
 8002fd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002fd8:	4299      	cmp	r1, r3
 8002fda:	d002      	beq.n	8002fe2 <__srefill_r+0xea>
 8002fdc:	4628      	mov	r0, r5
 8002fde:	f7ff fec5 	bl	8002d6c <_free_r>
 8002fe2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002fe4:	6063      	str	r3, [r4, #4]
 8002fe6:	2000      	movs	r0, #0
 8002fe8:	6360      	str	r0, [r4, #52]	; 0x34
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d0c0      	beq.n	8002f70 <__srefill_r+0x78>
 8002fee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002ff0:	6023      	str	r3, [r4, #0]
 8002ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ff4:	2000      	movs	r0, #0
 8002ff6:	e7fc      	b.n	8002ff2 <__srefill_r+0xfa>
 8002ff8:	080042b8 	.word	0x080042b8
 8002ffc:	080042d8 	.word	0x080042d8
 8003000:	08004298 	.word	0x08004298
 8003004:	080042f8 	.word	0x080042f8
 8003008:	08002ee5 	.word	0x08002ee5

0800300c <_sbrk_r>:
 800300c:	b538      	push	{r3, r4, r5, lr}
 800300e:	4d06      	ldr	r5, [pc, #24]	; (8003028 <_sbrk_r+0x1c>)
 8003010:	2300      	movs	r3, #0
 8003012:	4604      	mov	r4, r0
 8003014:	4608      	mov	r0, r1
 8003016:	602b      	str	r3, [r5, #0]
 8003018:	f7fd fdc4 	bl	8000ba4 <_sbrk>
 800301c:	1c43      	adds	r3, r0, #1
 800301e:	d102      	bne.n	8003026 <_sbrk_r+0x1a>
 8003020:	682b      	ldr	r3, [r5, #0]
 8003022:	b103      	cbz	r3, 8003026 <_sbrk_r+0x1a>
 8003024:	6023      	str	r3, [r4, #0]
 8003026:	bd38      	pop	{r3, r4, r5, pc}
 8003028:	20000134 	.word	0x20000134

0800302c <siprintf>:
 800302c:	b40e      	push	{r1, r2, r3}
 800302e:	b500      	push	{lr}
 8003030:	b09c      	sub	sp, #112	; 0x70
 8003032:	ab1d      	add	r3, sp, #116	; 0x74
 8003034:	9002      	str	r0, [sp, #8]
 8003036:	9006      	str	r0, [sp, #24]
 8003038:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800303c:	4809      	ldr	r0, [pc, #36]	; (8003064 <siprintf+0x38>)
 800303e:	9107      	str	r1, [sp, #28]
 8003040:	9104      	str	r1, [sp, #16]
 8003042:	4909      	ldr	r1, [pc, #36]	; (8003068 <siprintf+0x3c>)
 8003044:	f853 2b04 	ldr.w	r2, [r3], #4
 8003048:	9105      	str	r1, [sp, #20]
 800304a:	6800      	ldr	r0, [r0, #0]
 800304c:	9301      	str	r3, [sp, #4]
 800304e:	a902      	add	r1, sp, #8
 8003050:	f000 f972 	bl	8003338 <_svfiprintf_r>
 8003054:	9b02      	ldr	r3, [sp, #8]
 8003056:	2200      	movs	r2, #0
 8003058:	701a      	strb	r2, [r3, #0]
 800305a:	b01c      	add	sp, #112	; 0x70
 800305c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003060:	b003      	add	sp, #12
 8003062:	4770      	bx	lr
 8003064:	2000000c 	.word	0x2000000c
 8003068:	ffff0208 	.word	0xffff0208

0800306c <siscanf>:
 800306c:	b40e      	push	{r1, r2, r3}
 800306e:	b510      	push	{r4, lr}
 8003070:	b09f      	sub	sp, #124	; 0x7c
 8003072:	ac21      	add	r4, sp, #132	; 0x84
 8003074:	f44f 7101 	mov.w	r1, #516	; 0x204
 8003078:	f854 2b04 	ldr.w	r2, [r4], #4
 800307c:	9201      	str	r2, [sp, #4]
 800307e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8003082:	9004      	str	r0, [sp, #16]
 8003084:	9008      	str	r0, [sp, #32]
 8003086:	f7fd f8fb 	bl	8000280 <strlen>
 800308a:	4b0c      	ldr	r3, [pc, #48]	; (80030bc <siscanf+0x50>)
 800308c:	9005      	str	r0, [sp, #20]
 800308e:	9009      	str	r0, [sp, #36]	; 0x24
 8003090:	930d      	str	r3, [sp, #52]	; 0x34
 8003092:	480b      	ldr	r0, [pc, #44]	; (80030c0 <siscanf+0x54>)
 8003094:	9a01      	ldr	r2, [sp, #4]
 8003096:	6800      	ldr	r0, [r0, #0]
 8003098:	9403      	str	r4, [sp, #12]
 800309a:	2300      	movs	r3, #0
 800309c:	9311      	str	r3, [sp, #68]	; 0x44
 800309e:	9316      	str	r3, [sp, #88]	; 0x58
 80030a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030a4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80030a8:	a904      	add	r1, sp, #16
 80030aa:	4623      	mov	r3, r4
 80030ac:	f000 fa9e 	bl	80035ec <__ssvfiscanf_r>
 80030b0:	b01f      	add	sp, #124	; 0x7c
 80030b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80030b6:	b003      	add	sp, #12
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	080030e7 	.word	0x080030e7
 80030c0:	2000000c 	.word	0x2000000c

080030c4 <__sread>:
 80030c4:	b510      	push	{r4, lr}
 80030c6:	460c      	mov	r4, r1
 80030c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030cc:	f000 fee6 	bl	8003e9c <_read_r>
 80030d0:	2800      	cmp	r0, #0
 80030d2:	bfab      	itete	ge
 80030d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80030d6:	89a3      	ldrhlt	r3, [r4, #12]
 80030d8:	181b      	addge	r3, r3, r0
 80030da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80030de:	bfac      	ite	ge
 80030e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80030e2:	81a3      	strhlt	r3, [r4, #12]
 80030e4:	bd10      	pop	{r4, pc}

080030e6 <__seofread>:
 80030e6:	2000      	movs	r0, #0
 80030e8:	4770      	bx	lr

080030ea <__swrite>:
 80030ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030ee:	461f      	mov	r7, r3
 80030f0:	898b      	ldrh	r3, [r1, #12]
 80030f2:	05db      	lsls	r3, r3, #23
 80030f4:	4605      	mov	r5, r0
 80030f6:	460c      	mov	r4, r1
 80030f8:	4616      	mov	r6, r2
 80030fa:	d505      	bpl.n	8003108 <__swrite+0x1e>
 80030fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003100:	2302      	movs	r3, #2
 8003102:	2200      	movs	r2, #0
 8003104:	f000 f89e 	bl	8003244 <_lseek_r>
 8003108:	89a3      	ldrh	r3, [r4, #12]
 800310a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800310e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003112:	81a3      	strh	r3, [r4, #12]
 8003114:	4632      	mov	r2, r6
 8003116:	463b      	mov	r3, r7
 8003118:	4628      	mov	r0, r5
 800311a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800311e:	f000 b817 	b.w	8003150 <_write_r>

08003122 <__sseek>:
 8003122:	b510      	push	{r4, lr}
 8003124:	460c      	mov	r4, r1
 8003126:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800312a:	f000 f88b 	bl	8003244 <_lseek_r>
 800312e:	1c43      	adds	r3, r0, #1
 8003130:	89a3      	ldrh	r3, [r4, #12]
 8003132:	bf15      	itete	ne
 8003134:	6560      	strne	r0, [r4, #84]	; 0x54
 8003136:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800313a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800313e:	81a3      	strheq	r3, [r4, #12]
 8003140:	bf18      	it	ne
 8003142:	81a3      	strhne	r3, [r4, #12]
 8003144:	bd10      	pop	{r4, pc}

08003146 <__sclose>:
 8003146:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800314a:	f000 b813 	b.w	8003174 <_close_r>
	...

08003150 <_write_r>:
 8003150:	b538      	push	{r3, r4, r5, lr}
 8003152:	4d07      	ldr	r5, [pc, #28]	; (8003170 <_write_r+0x20>)
 8003154:	4604      	mov	r4, r0
 8003156:	4608      	mov	r0, r1
 8003158:	4611      	mov	r1, r2
 800315a:	2200      	movs	r2, #0
 800315c:	602a      	str	r2, [r5, #0]
 800315e:	461a      	mov	r2, r3
 8003160:	f7fd fcc1 	bl	8000ae6 <_write>
 8003164:	1c43      	adds	r3, r0, #1
 8003166:	d102      	bne.n	800316e <_write_r+0x1e>
 8003168:	682b      	ldr	r3, [r5, #0]
 800316a:	b103      	cbz	r3, 800316e <_write_r+0x1e>
 800316c:	6023      	str	r3, [r4, #0]
 800316e:	bd38      	pop	{r3, r4, r5, pc}
 8003170:	20000134 	.word	0x20000134

08003174 <_close_r>:
 8003174:	b538      	push	{r3, r4, r5, lr}
 8003176:	4d06      	ldr	r5, [pc, #24]	; (8003190 <_close_r+0x1c>)
 8003178:	2300      	movs	r3, #0
 800317a:	4604      	mov	r4, r0
 800317c:	4608      	mov	r0, r1
 800317e:	602b      	str	r3, [r5, #0]
 8003180:	f7fd fccd 	bl	8000b1e <_close>
 8003184:	1c43      	adds	r3, r0, #1
 8003186:	d102      	bne.n	800318e <_close_r+0x1a>
 8003188:	682b      	ldr	r3, [r5, #0]
 800318a:	b103      	cbz	r3, 800318e <_close_r+0x1a>
 800318c:	6023      	str	r3, [r4, #0]
 800318e:	bd38      	pop	{r3, r4, r5, pc}
 8003190:	20000134 	.word	0x20000134

08003194 <__sflags>:
 8003194:	780b      	ldrb	r3, [r1, #0]
 8003196:	2b72      	cmp	r3, #114	; 0x72
 8003198:	b530      	push	{r4, r5, lr}
 800319a:	d022      	beq.n	80031e2 <__sflags+0x4e>
 800319c:	2b77      	cmp	r3, #119	; 0x77
 800319e:	d024      	beq.n	80031ea <__sflags+0x56>
 80031a0:	2b61      	cmp	r3, #97	; 0x61
 80031a2:	d027      	beq.n	80031f4 <__sflags+0x60>
 80031a4:	2316      	movs	r3, #22
 80031a6:	6003      	str	r3, [r0, #0]
 80031a8:	2000      	movs	r0, #0
 80031aa:	bd30      	pop	{r4, r5, pc}
 80031ac:	2d62      	cmp	r5, #98	; 0x62
 80031ae:	d012      	beq.n	80031d6 <__sflags+0x42>
 80031b0:	2d78      	cmp	r5, #120	; 0x78
 80031b2:	d013      	beq.n	80031dc <__sflags+0x48>
 80031b4:	2d2b      	cmp	r5, #43	; 0x2b
 80031b6:	d107      	bne.n	80031c8 <__sflags+0x34>
 80031b8:	f020 001c 	bic.w	r0, r0, #28
 80031bc:	f023 0303 	bic.w	r3, r3, #3
 80031c0:	f040 0010 	orr.w	r0, r0, #16
 80031c4:	f043 0302 	orr.w	r3, r3, #2
 80031c8:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 80031cc:	2d00      	cmp	r5, #0
 80031ce:	d1ed      	bne.n	80031ac <__sflags+0x18>
 80031d0:	4323      	orrs	r3, r4
 80031d2:	6013      	str	r3, [r2, #0]
 80031d4:	e7e9      	b.n	80031aa <__sflags+0x16>
 80031d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031da:	e7f5      	b.n	80031c8 <__sflags+0x34>
 80031dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80031e0:	e7f2      	b.n	80031c8 <__sflags+0x34>
 80031e2:	2400      	movs	r4, #0
 80031e4:	4623      	mov	r3, r4
 80031e6:	2004      	movs	r0, #4
 80031e8:	e7ee      	b.n	80031c8 <__sflags+0x34>
 80031ea:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 80031ee:	2301      	movs	r3, #1
 80031f0:	2008      	movs	r0, #8
 80031f2:	e7e9      	b.n	80031c8 <__sflags+0x34>
 80031f4:	f44f 7402 	mov.w	r4, #520	; 0x208
 80031f8:	2301      	movs	r3, #1
 80031fa:	f44f 7084 	mov.w	r0, #264	; 0x108
 80031fe:	e7e3      	b.n	80031c8 <__sflags+0x34>

08003200 <_fstat_r>:
 8003200:	b538      	push	{r3, r4, r5, lr}
 8003202:	4d07      	ldr	r5, [pc, #28]	; (8003220 <_fstat_r+0x20>)
 8003204:	2300      	movs	r3, #0
 8003206:	4604      	mov	r4, r0
 8003208:	4608      	mov	r0, r1
 800320a:	4611      	mov	r1, r2
 800320c:	602b      	str	r3, [r5, #0]
 800320e:	f7fd fc92 	bl	8000b36 <_fstat>
 8003212:	1c43      	adds	r3, r0, #1
 8003214:	d102      	bne.n	800321c <_fstat_r+0x1c>
 8003216:	682b      	ldr	r3, [r5, #0]
 8003218:	b103      	cbz	r3, 800321c <_fstat_r+0x1c>
 800321a:	6023      	str	r3, [r4, #0]
 800321c:	bd38      	pop	{r3, r4, r5, pc}
 800321e:	bf00      	nop
 8003220:	20000134 	.word	0x20000134

08003224 <_isatty_r>:
 8003224:	b538      	push	{r3, r4, r5, lr}
 8003226:	4d06      	ldr	r5, [pc, #24]	; (8003240 <_isatty_r+0x1c>)
 8003228:	2300      	movs	r3, #0
 800322a:	4604      	mov	r4, r0
 800322c:	4608      	mov	r0, r1
 800322e:	602b      	str	r3, [r5, #0]
 8003230:	f7fd fc91 	bl	8000b56 <_isatty>
 8003234:	1c43      	adds	r3, r0, #1
 8003236:	d102      	bne.n	800323e <_isatty_r+0x1a>
 8003238:	682b      	ldr	r3, [r5, #0]
 800323a:	b103      	cbz	r3, 800323e <_isatty_r+0x1a>
 800323c:	6023      	str	r3, [r4, #0]
 800323e:	bd38      	pop	{r3, r4, r5, pc}
 8003240:	20000134 	.word	0x20000134

08003244 <_lseek_r>:
 8003244:	b538      	push	{r3, r4, r5, lr}
 8003246:	4d07      	ldr	r5, [pc, #28]	; (8003264 <_lseek_r+0x20>)
 8003248:	4604      	mov	r4, r0
 800324a:	4608      	mov	r0, r1
 800324c:	4611      	mov	r1, r2
 800324e:	2200      	movs	r2, #0
 8003250:	602a      	str	r2, [r5, #0]
 8003252:	461a      	mov	r2, r3
 8003254:	f7fd fc8a 	bl	8000b6c <_lseek>
 8003258:	1c43      	adds	r3, r0, #1
 800325a:	d102      	bne.n	8003262 <_lseek_r+0x1e>
 800325c:	682b      	ldr	r3, [r5, #0]
 800325e:	b103      	cbz	r3, 8003262 <_lseek_r+0x1e>
 8003260:	6023      	str	r3, [r4, #0]
 8003262:	bd38      	pop	{r3, r4, r5, pc}
 8003264:	20000134 	.word	0x20000134

08003268 <__malloc_lock>:
 8003268:	4801      	ldr	r0, [pc, #4]	; (8003270 <__malloc_lock+0x8>)
 800326a:	f7ff bd03 	b.w	8002c74 <__retarget_lock_acquire_recursive>
 800326e:	bf00      	nop
 8003270:	2000012c 	.word	0x2000012c

08003274 <__malloc_unlock>:
 8003274:	4801      	ldr	r0, [pc, #4]	; (800327c <__malloc_unlock+0x8>)
 8003276:	f7ff bcfe 	b.w	8002c76 <__retarget_lock_release_recursive>
 800327a:	bf00      	nop
 800327c:	2000012c 	.word	0x2000012c

08003280 <__ssputs_r>:
 8003280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003284:	688e      	ldr	r6, [r1, #8]
 8003286:	429e      	cmp	r6, r3
 8003288:	4682      	mov	sl, r0
 800328a:	460c      	mov	r4, r1
 800328c:	4690      	mov	r8, r2
 800328e:	461f      	mov	r7, r3
 8003290:	d838      	bhi.n	8003304 <__ssputs_r+0x84>
 8003292:	898a      	ldrh	r2, [r1, #12]
 8003294:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003298:	d032      	beq.n	8003300 <__ssputs_r+0x80>
 800329a:	6825      	ldr	r5, [r4, #0]
 800329c:	6909      	ldr	r1, [r1, #16]
 800329e:	eba5 0901 	sub.w	r9, r5, r1
 80032a2:	6965      	ldr	r5, [r4, #20]
 80032a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80032a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80032ac:	3301      	adds	r3, #1
 80032ae:	444b      	add	r3, r9
 80032b0:	106d      	asrs	r5, r5, #1
 80032b2:	429d      	cmp	r5, r3
 80032b4:	bf38      	it	cc
 80032b6:	461d      	movcc	r5, r3
 80032b8:	0553      	lsls	r3, r2, #21
 80032ba:	d531      	bpl.n	8003320 <__ssputs_r+0xa0>
 80032bc:	4629      	mov	r1, r5
 80032be:	f7ff fda5 	bl	8002e0c <_malloc_r>
 80032c2:	4606      	mov	r6, r0
 80032c4:	b950      	cbnz	r0, 80032dc <__ssputs_r+0x5c>
 80032c6:	230c      	movs	r3, #12
 80032c8:	f8ca 3000 	str.w	r3, [sl]
 80032cc:	89a3      	ldrh	r3, [r4, #12]
 80032ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032d2:	81a3      	strh	r3, [r4, #12]
 80032d4:	f04f 30ff 	mov.w	r0, #4294967295
 80032d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032dc:	6921      	ldr	r1, [r4, #16]
 80032de:	464a      	mov	r2, r9
 80032e0:	f7ff fd2e 	bl	8002d40 <memcpy>
 80032e4:	89a3      	ldrh	r3, [r4, #12]
 80032e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80032ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032ee:	81a3      	strh	r3, [r4, #12]
 80032f0:	6126      	str	r6, [r4, #16]
 80032f2:	6165      	str	r5, [r4, #20]
 80032f4:	444e      	add	r6, r9
 80032f6:	eba5 0509 	sub.w	r5, r5, r9
 80032fa:	6026      	str	r6, [r4, #0]
 80032fc:	60a5      	str	r5, [r4, #8]
 80032fe:	463e      	mov	r6, r7
 8003300:	42be      	cmp	r6, r7
 8003302:	d900      	bls.n	8003306 <__ssputs_r+0x86>
 8003304:	463e      	mov	r6, r7
 8003306:	4632      	mov	r2, r6
 8003308:	6820      	ldr	r0, [r4, #0]
 800330a:	4641      	mov	r1, r8
 800330c:	f000 ff50 	bl	80041b0 <memmove>
 8003310:	68a3      	ldr	r3, [r4, #8]
 8003312:	6822      	ldr	r2, [r4, #0]
 8003314:	1b9b      	subs	r3, r3, r6
 8003316:	4432      	add	r2, r6
 8003318:	60a3      	str	r3, [r4, #8]
 800331a:	6022      	str	r2, [r4, #0]
 800331c:	2000      	movs	r0, #0
 800331e:	e7db      	b.n	80032d8 <__ssputs_r+0x58>
 8003320:	462a      	mov	r2, r5
 8003322:	f000 ff5f 	bl	80041e4 <_realloc_r>
 8003326:	4606      	mov	r6, r0
 8003328:	2800      	cmp	r0, #0
 800332a:	d1e1      	bne.n	80032f0 <__ssputs_r+0x70>
 800332c:	6921      	ldr	r1, [r4, #16]
 800332e:	4650      	mov	r0, sl
 8003330:	f7ff fd1c 	bl	8002d6c <_free_r>
 8003334:	e7c7      	b.n	80032c6 <__ssputs_r+0x46>
	...

08003338 <_svfiprintf_r>:
 8003338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800333c:	4698      	mov	r8, r3
 800333e:	898b      	ldrh	r3, [r1, #12]
 8003340:	061b      	lsls	r3, r3, #24
 8003342:	b09d      	sub	sp, #116	; 0x74
 8003344:	4607      	mov	r7, r0
 8003346:	460d      	mov	r5, r1
 8003348:	4614      	mov	r4, r2
 800334a:	d50e      	bpl.n	800336a <_svfiprintf_r+0x32>
 800334c:	690b      	ldr	r3, [r1, #16]
 800334e:	b963      	cbnz	r3, 800336a <_svfiprintf_r+0x32>
 8003350:	2140      	movs	r1, #64	; 0x40
 8003352:	f7ff fd5b 	bl	8002e0c <_malloc_r>
 8003356:	6028      	str	r0, [r5, #0]
 8003358:	6128      	str	r0, [r5, #16]
 800335a:	b920      	cbnz	r0, 8003366 <_svfiprintf_r+0x2e>
 800335c:	230c      	movs	r3, #12
 800335e:	603b      	str	r3, [r7, #0]
 8003360:	f04f 30ff 	mov.w	r0, #4294967295
 8003364:	e0d1      	b.n	800350a <_svfiprintf_r+0x1d2>
 8003366:	2340      	movs	r3, #64	; 0x40
 8003368:	616b      	str	r3, [r5, #20]
 800336a:	2300      	movs	r3, #0
 800336c:	9309      	str	r3, [sp, #36]	; 0x24
 800336e:	2320      	movs	r3, #32
 8003370:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003374:	f8cd 800c 	str.w	r8, [sp, #12]
 8003378:	2330      	movs	r3, #48	; 0x30
 800337a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003524 <_svfiprintf_r+0x1ec>
 800337e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003382:	f04f 0901 	mov.w	r9, #1
 8003386:	4623      	mov	r3, r4
 8003388:	469a      	mov	sl, r3
 800338a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800338e:	b10a      	cbz	r2, 8003394 <_svfiprintf_r+0x5c>
 8003390:	2a25      	cmp	r2, #37	; 0x25
 8003392:	d1f9      	bne.n	8003388 <_svfiprintf_r+0x50>
 8003394:	ebba 0b04 	subs.w	fp, sl, r4
 8003398:	d00b      	beq.n	80033b2 <_svfiprintf_r+0x7a>
 800339a:	465b      	mov	r3, fp
 800339c:	4622      	mov	r2, r4
 800339e:	4629      	mov	r1, r5
 80033a0:	4638      	mov	r0, r7
 80033a2:	f7ff ff6d 	bl	8003280 <__ssputs_r>
 80033a6:	3001      	adds	r0, #1
 80033a8:	f000 80aa 	beq.w	8003500 <_svfiprintf_r+0x1c8>
 80033ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80033ae:	445a      	add	r2, fp
 80033b0:	9209      	str	r2, [sp, #36]	; 0x24
 80033b2:	f89a 3000 	ldrb.w	r3, [sl]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	f000 80a2 	beq.w	8003500 <_svfiprintf_r+0x1c8>
 80033bc:	2300      	movs	r3, #0
 80033be:	f04f 32ff 	mov.w	r2, #4294967295
 80033c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033c6:	f10a 0a01 	add.w	sl, sl, #1
 80033ca:	9304      	str	r3, [sp, #16]
 80033cc:	9307      	str	r3, [sp, #28]
 80033ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80033d2:	931a      	str	r3, [sp, #104]	; 0x68
 80033d4:	4654      	mov	r4, sl
 80033d6:	2205      	movs	r2, #5
 80033d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033dc:	4851      	ldr	r0, [pc, #324]	; (8003524 <_svfiprintf_r+0x1ec>)
 80033de:	f7fc feff 	bl	80001e0 <memchr>
 80033e2:	9a04      	ldr	r2, [sp, #16]
 80033e4:	b9d8      	cbnz	r0, 800341e <_svfiprintf_r+0xe6>
 80033e6:	06d0      	lsls	r0, r2, #27
 80033e8:	bf44      	itt	mi
 80033ea:	2320      	movmi	r3, #32
 80033ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80033f0:	0711      	lsls	r1, r2, #28
 80033f2:	bf44      	itt	mi
 80033f4:	232b      	movmi	r3, #43	; 0x2b
 80033f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80033fa:	f89a 3000 	ldrb.w	r3, [sl]
 80033fe:	2b2a      	cmp	r3, #42	; 0x2a
 8003400:	d015      	beq.n	800342e <_svfiprintf_r+0xf6>
 8003402:	9a07      	ldr	r2, [sp, #28]
 8003404:	4654      	mov	r4, sl
 8003406:	2000      	movs	r0, #0
 8003408:	f04f 0c0a 	mov.w	ip, #10
 800340c:	4621      	mov	r1, r4
 800340e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003412:	3b30      	subs	r3, #48	; 0x30
 8003414:	2b09      	cmp	r3, #9
 8003416:	d94e      	bls.n	80034b6 <_svfiprintf_r+0x17e>
 8003418:	b1b0      	cbz	r0, 8003448 <_svfiprintf_r+0x110>
 800341a:	9207      	str	r2, [sp, #28]
 800341c:	e014      	b.n	8003448 <_svfiprintf_r+0x110>
 800341e:	eba0 0308 	sub.w	r3, r0, r8
 8003422:	fa09 f303 	lsl.w	r3, r9, r3
 8003426:	4313      	orrs	r3, r2
 8003428:	9304      	str	r3, [sp, #16]
 800342a:	46a2      	mov	sl, r4
 800342c:	e7d2      	b.n	80033d4 <_svfiprintf_r+0x9c>
 800342e:	9b03      	ldr	r3, [sp, #12]
 8003430:	1d19      	adds	r1, r3, #4
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	9103      	str	r1, [sp, #12]
 8003436:	2b00      	cmp	r3, #0
 8003438:	bfbb      	ittet	lt
 800343a:	425b      	neglt	r3, r3
 800343c:	f042 0202 	orrlt.w	r2, r2, #2
 8003440:	9307      	strge	r3, [sp, #28]
 8003442:	9307      	strlt	r3, [sp, #28]
 8003444:	bfb8      	it	lt
 8003446:	9204      	strlt	r2, [sp, #16]
 8003448:	7823      	ldrb	r3, [r4, #0]
 800344a:	2b2e      	cmp	r3, #46	; 0x2e
 800344c:	d10c      	bne.n	8003468 <_svfiprintf_r+0x130>
 800344e:	7863      	ldrb	r3, [r4, #1]
 8003450:	2b2a      	cmp	r3, #42	; 0x2a
 8003452:	d135      	bne.n	80034c0 <_svfiprintf_r+0x188>
 8003454:	9b03      	ldr	r3, [sp, #12]
 8003456:	1d1a      	adds	r2, r3, #4
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	9203      	str	r2, [sp, #12]
 800345c:	2b00      	cmp	r3, #0
 800345e:	bfb8      	it	lt
 8003460:	f04f 33ff 	movlt.w	r3, #4294967295
 8003464:	3402      	adds	r4, #2
 8003466:	9305      	str	r3, [sp, #20]
 8003468:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003534 <_svfiprintf_r+0x1fc>
 800346c:	7821      	ldrb	r1, [r4, #0]
 800346e:	2203      	movs	r2, #3
 8003470:	4650      	mov	r0, sl
 8003472:	f7fc feb5 	bl	80001e0 <memchr>
 8003476:	b140      	cbz	r0, 800348a <_svfiprintf_r+0x152>
 8003478:	2340      	movs	r3, #64	; 0x40
 800347a:	eba0 000a 	sub.w	r0, r0, sl
 800347e:	fa03 f000 	lsl.w	r0, r3, r0
 8003482:	9b04      	ldr	r3, [sp, #16]
 8003484:	4303      	orrs	r3, r0
 8003486:	3401      	adds	r4, #1
 8003488:	9304      	str	r3, [sp, #16]
 800348a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800348e:	4826      	ldr	r0, [pc, #152]	; (8003528 <_svfiprintf_r+0x1f0>)
 8003490:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003494:	2206      	movs	r2, #6
 8003496:	f7fc fea3 	bl	80001e0 <memchr>
 800349a:	2800      	cmp	r0, #0
 800349c:	d038      	beq.n	8003510 <_svfiprintf_r+0x1d8>
 800349e:	4b23      	ldr	r3, [pc, #140]	; (800352c <_svfiprintf_r+0x1f4>)
 80034a0:	bb1b      	cbnz	r3, 80034ea <_svfiprintf_r+0x1b2>
 80034a2:	9b03      	ldr	r3, [sp, #12]
 80034a4:	3307      	adds	r3, #7
 80034a6:	f023 0307 	bic.w	r3, r3, #7
 80034aa:	3308      	adds	r3, #8
 80034ac:	9303      	str	r3, [sp, #12]
 80034ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034b0:	4433      	add	r3, r6
 80034b2:	9309      	str	r3, [sp, #36]	; 0x24
 80034b4:	e767      	b.n	8003386 <_svfiprintf_r+0x4e>
 80034b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80034ba:	460c      	mov	r4, r1
 80034bc:	2001      	movs	r0, #1
 80034be:	e7a5      	b.n	800340c <_svfiprintf_r+0xd4>
 80034c0:	2300      	movs	r3, #0
 80034c2:	3401      	adds	r4, #1
 80034c4:	9305      	str	r3, [sp, #20]
 80034c6:	4619      	mov	r1, r3
 80034c8:	f04f 0c0a 	mov.w	ip, #10
 80034cc:	4620      	mov	r0, r4
 80034ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80034d2:	3a30      	subs	r2, #48	; 0x30
 80034d4:	2a09      	cmp	r2, #9
 80034d6:	d903      	bls.n	80034e0 <_svfiprintf_r+0x1a8>
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d0c5      	beq.n	8003468 <_svfiprintf_r+0x130>
 80034dc:	9105      	str	r1, [sp, #20]
 80034de:	e7c3      	b.n	8003468 <_svfiprintf_r+0x130>
 80034e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80034e4:	4604      	mov	r4, r0
 80034e6:	2301      	movs	r3, #1
 80034e8:	e7f0      	b.n	80034cc <_svfiprintf_r+0x194>
 80034ea:	ab03      	add	r3, sp, #12
 80034ec:	9300      	str	r3, [sp, #0]
 80034ee:	462a      	mov	r2, r5
 80034f0:	4b0f      	ldr	r3, [pc, #60]	; (8003530 <_svfiprintf_r+0x1f8>)
 80034f2:	a904      	add	r1, sp, #16
 80034f4:	4638      	mov	r0, r7
 80034f6:	f3af 8000 	nop.w
 80034fa:	1c42      	adds	r2, r0, #1
 80034fc:	4606      	mov	r6, r0
 80034fe:	d1d6      	bne.n	80034ae <_svfiprintf_r+0x176>
 8003500:	89ab      	ldrh	r3, [r5, #12]
 8003502:	065b      	lsls	r3, r3, #25
 8003504:	f53f af2c 	bmi.w	8003360 <_svfiprintf_r+0x28>
 8003508:	9809      	ldr	r0, [sp, #36]	; 0x24
 800350a:	b01d      	add	sp, #116	; 0x74
 800350c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003510:	ab03      	add	r3, sp, #12
 8003512:	9300      	str	r3, [sp, #0]
 8003514:	462a      	mov	r2, r5
 8003516:	4b06      	ldr	r3, [pc, #24]	; (8003530 <_svfiprintf_r+0x1f8>)
 8003518:	a904      	add	r1, sp, #16
 800351a:	4638      	mov	r0, r7
 800351c:	f000 fa4c 	bl	80039b8 <_printf_i>
 8003520:	e7eb      	b.n	80034fa <_svfiprintf_r+0x1c2>
 8003522:	bf00      	nop
 8003524:	080042fc 	.word	0x080042fc
 8003528:	08004306 	.word	0x08004306
 800352c:	00000000 	.word	0x00000000
 8003530:	08003281 	.word	0x08003281
 8003534:	08004302 	.word	0x08004302

08003538 <_sungetc_r>:
 8003538:	b538      	push	{r3, r4, r5, lr}
 800353a:	1c4b      	adds	r3, r1, #1
 800353c:	4614      	mov	r4, r2
 800353e:	d103      	bne.n	8003548 <_sungetc_r+0x10>
 8003540:	f04f 35ff 	mov.w	r5, #4294967295
 8003544:	4628      	mov	r0, r5
 8003546:	bd38      	pop	{r3, r4, r5, pc}
 8003548:	8993      	ldrh	r3, [r2, #12]
 800354a:	f023 0320 	bic.w	r3, r3, #32
 800354e:	8193      	strh	r3, [r2, #12]
 8003550:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003552:	6852      	ldr	r2, [r2, #4]
 8003554:	b2cd      	uxtb	r5, r1
 8003556:	b18b      	cbz	r3, 800357c <_sungetc_r+0x44>
 8003558:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800355a:	4293      	cmp	r3, r2
 800355c:	dd08      	ble.n	8003570 <_sungetc_r+0x38>
 800355e:	6823      	ldr	r3, [r4, #0]
 8003560:	1e5a      	subs	r2, r3, #1
 8003562:	6022      	str	r2, [r4, #0]
 8003564:	f803 5c01 	strb.w	r5, [r3, #-1]
 8003568:	6863      	ldr	r3, [r4, #4]
 800356a:	3301      	adds	r3, #1
 800356c:	6063      	str	r3, [r4, #4]
 800356e:	e7e9      	b.n	8003544 <_sungetc_r+0xc>
 8003570:	4621      	mov	r1, r4
 8003572:	f000 fde3 	bl	800413c <__submore>
 8003576:	2800      	cmp	r0, #0
 8003578:	d0f1      	beq.n	800355e <_sungetc_r+0x26>
 800357a:	e7e1      	b.n	8003540 <_sungetc_r+0x8>
 800357c:	6921      	ldr	r1, [r4, #16]
 800357e:	6823      	ldr	r3, [r4, #0]
 8003580:	b151      	cbz	r1, 8003598 <_sungetc_r+0x60>
 8003582:	4299      	cmp	r1, r3
 8003584:	d208      	bcs.n	8003598 <_sungetc_r+0x60>
 8003586:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800358a:	42a9      	cmp	r1, r5
 800358c:	d104      	bne.n	8003598 <_sungetc_r+0x60>
 800358e:	3b01      	subs	r3, #1
 8003590:	3201      	adds	r2, #1
 8003592:	6023      	str	r3, [r4, #0]
 8003594:	6062      	str	r2, [r4, #4]
 8003596:	e7d5      	b.n	8003544 <_sungetc_r+0xc>
 8003598:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800359c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80035a0:	6363      	str	r3, [r4, #52]	; 0x34
 80035a2:	2303      	movs	r3, #3
 80035a4:	63a3      	str	r3, [r4, #56]	; 0x38
 80035a6:	4623      	mov	r3, r4
 80035a8:	f803 5f46 	strb.w	r5, [r3, #70]!
 80035ac:	6023      	str	r3, [r4, #0]
 80035ae:	2301      	movs	r3, #1
 80035b0:	e7dc      	b.n	800356c <_sungetc_r+0x34>

080035b2 <__ssrefill_r>:
 80035b2:	b510      	push	{r4, lr}
 80035b4:	460c      	mov	r4, r1
 80035b6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80035b8:	b169      	cbz	r1, 80035d6 <__ssrefill_r+0x24>
 80035ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80035be:	4299      	cmp	r1, r3
 80035c0:	d001      	beq.n	80035c6 <__ssrefill_r+0x14>
 80035c2:	f7ff fbd3 	bl	8002d6c <_free_r>
 80035c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80035c8:	6063      	str	r3, [r4, #4]
 80035ca:	2000      	movs	r0, #0
 80035cc:	6360      	str	r0, [r4, #52]	; 0x34
 80035ce:	b113      	cbz	r3, 80035d6 <__ssrefill_r+0x24>
 80035d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80035d2:	6023      	str	r3, [r4, #0]
 80035d4:	bd10      	pop	{r4, pc}
 80035d6:	6923      	ldr	r3, [r4, #16]
 80035d8:	6023      	str	r3, [r4, #0]
 80035da:	2300      	movs	r3, #0
 80035dc:	6063      	str	r3, [r4, #4]
 80035de:	89a3      	ldrh	r3, [r4, #12]
 80035e0:	f043 0320 	orr.w	r3, r3, #32
 80035e4:	81a3      	strh	r3, [r4, #12]
 80035e6:	f04f 30ff 	mov.w	r0, #4294967295
 80035ea:	e7f3      	b.n	80035d4 <__ssrefill_r+0x22>

080035ec <__ssvfiscanf_r>:
 80035ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035f0:	460c      	mov	r4, r1
 80035f2:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80035f6:	2100      	movs	r1, #0
 80035f8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80035fc:	49b2      	ldr	r1, [pc, #712]	; (80038c8 <__ssvfiscanf_r+0x2dc>)
 80035fe:	91a0      	str	r1, [sp, #640]	; 0x280
 8003600:	f10d 0804 	add.w	r8, sp, #4
 8003604:	49b1      	ldr	r1, [pc, #708]	; (80038cc <__ssvfiscanf_r+0x2e0>)
 8003606:	4fb2      	ldr	r7, [pc, #712]	; (80038d0 <__ssvfiscanf_r+0x2e4>)
 8003608:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 80038d4 <__ssvfiscanf_r+0x2e8>
 800360c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8003610:	4606      	mov	r6, r0
 8003612:	91a1      	str	r1, [sp, #644]	; 0x284
 8003614:	9300      	str	r3, [sp, #0]
 8003616:	f892 a000 	ldrb.w	sl, [r2]
 800361a:	f1ba 0f00 	cmp.w	sl, #0
 800361e:	f000 8151 	beq.w	80038c4 <__ssvfiscanf_r+0x2d8>
 8003622:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8003626:	f013 0308 	ands.w	r3, r3, #8
 800362a:	f102 0501 	add.w	r5, r2, #1
 800362e:	d019      	beq.n	8003664 <__ssvfiscanf_r+0x78>
 8003630:	6863      	ldr	r3, [r4, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	dd0f      	ble.n	8003656 <__ssvfiscanf_r+0x6a>
 8003636:	6823      	ldr	r3, [r4, #0]
 8003638:	781a      	ldrb	r2, [r3, #0]
 800363a:	5cba      	ldrb	r2, [r7, r2]
 800363c:	0712      	lsls	r2, r2, #28
 800363e:	d401      	bmi.n	8003644 <__ssvfiscanf_r+0x58>
 8003640:	462a      	mov	r2, r5
 8003642:	e7e8      	b.n	8003616 <__ssvfiscanf_r+0x2a>
 8003644:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003646:	3201      	adds	r2, #1
 8003648:	9245      	str	r2, [sp, #276]	; 0x114
 800364a:	6862      	ldr	r2, [r4, #4]
 800364c:	3301      	adds	r3, #1
 800364e:	3a01      	subs	r2, #1
 8003650:	6062      	str	r2, [r4, #4]
 8003652:	6023      	str	r3, [r4, #0]
 8003654:	e7ec      	b.n	8003630 <__ssvfiscanf_r+0x44>
 8003656:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003658:	4621      	mov	r1, r4
 800365a:	4630      	mov	r0, r6
 800365c:	4798      	blx	r3
 800365e:	2800      	cmp	r0, #0
 8003660:	d0e9      	beq.n	8003636 <__ssvfiscanf_r+0x4a>
 8003662:	e7ed      	b.n	8003640 <__ssvfiscanf_r+0x54>
 8003664:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8003668:	f040 8083 	bne.w	8003772 <__ssvfiscanf_r+0x186>
 800366c:	9341      	str	r3, [sp, #260]	; 0x104
 800366e:	9343      	str	r3, [sp, #268]	; 0x10c
 8003670:	7853      	ldrb	r3, [r2, #1]
 8003672:	2b2a      	cmp	r3, #42	; 0x2a
 8003674:	bf02      	ittt	eq
 8003676:	2310      	moveq	r3, #16
 8003678:	1c95      	addeq	r5, r2, #2
 800367a:	9341      	streq	r3, [sp, #260]	; 0x104
 800367c:	220a      	movs	r2, #10
 800367e:	46ab      	mov	fp, r5
 8003680:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8003684:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8003688:	2b09      	cmp	r3, #9
 800368a:	d91d      	bls.n	80036c8 <__ssvfiscanf_r+0xdc>
 800368c:	4891      	ldr	r0, [pc, #580]	; (80038d4 <__ssvfiscanf_r+0x2e8>)
 800368e:	2203      	movs	r2, #3
 8003690:	f7fc fda6 	bl	80001e0 <memchr>
 8003694:	b140      	cbz	r0, 80036a8 <__ssvfiscanf_r+0xbc>
 8003696:	2301      	movs	r3, #1
 8003698:	eba0 0009 	sub.w	r0, r0, r9
 800369c:	fa03 f000 	lsl.w	r0, r3, r0
 80036a0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80036a2:	4318      	orrs	r0, r3
 80036a4:	9041      	str	r0, [sp, #260]	; 0x104
 80036a6:	465d      	mov	r5, fp
 80036a8:	f815 3b01 	ldrb.w	r3, [r5], #1
 80036ac:	2b78      	cmp	r3, #120	; 0x78
 80036ae:	d806      	bhi.n	80036be <__ssvfiscanf_r+0xd2>
 80036b0:	2b57      	cmp	r3, #87	; 0x57
 80036b2:	d810      	bhi.n	80036d6 <__ssvfiscanf_r+0xea>
 80036b4:	2b25      	cmp	r3, #37	; 0x25
 80036b6:	d05c      	beq.n	8003772 <__ssvfiscanf_r+0x186>
 80036b8:	d856      	bhi.n	8003768 <__ssvfiscanf_r+0x17c>
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d074      	beq.n	80037a8 <__ssvfiscanf_r+0x1bc>
 80036be:	2303      	movs	r3, #3
 80036c0:	9347      	str	r3, [sp, #284]	; 0x11c
 80036c2:	230a      	movs	r3, #10
 80036c4:	9342      	str	r3, [sp, #264]	; 0x108
 80036c6:	e081      	b.n	80037cc <__ssvfiscanf_r+0x1e0>
 80036c8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80036ca:	fb02 1303 	mla	r3, r2, r3, r1
 80036ce:	3b30      	subs	r3, #48	; 0x30
 80036d0:	9343      	str	r3, [sp, #268]	; 0x10c
 80036d2:	465d      	mov	r5, fp
 80036d4:	e7d3      	b.n	800367e <__ssvfiscanf_r+0x92>
 80036d6:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80036da:	2a20      	cmp	r2, #32
 80036dc:	d8ef      	bhi.n	80036be <__ssvfiscanf_r+0xd2>
 80036de:	a101      	add	r1, pc, #4	; (adr r1, 80036e4 <__ssvfiscanf_r+0xf8>)
 80036e0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80036e4:	080037b7 	.word	0x080037b7
 80036e8:	080036bf 	.word	0x080036bf
 80036ec:	080036bf 	.word	0x080036bf
 80036f0:	08003815 	.word	0x08003815
 80036f4:	080036bf 	.word	0x080036bf
 80036f8:	080036bf 	.word	0x080036bf
 80036fc:	080036bf 	.word	0x080036bf
 8003700:	080036bf 	.word	0x080036bf
 8003704:	080036bf 	.word	0x080036bf
 8003708:	080036bf 	.word	0x080036bf
 800370c:	080036bf 	.word	0x080036bf
 8003710:	0800382b 	.word	0x0800382b
 8003714:	08003801 	.word	0x08003801
 8003718:	0800376f 	.word	0x0800376f
 800371c:	0800376f 	.word	0x0800376f
 8003720:	0800376f 	.word	0x0800376f
 8003724:	080036bf 	.word	0x080036bf
 8003728:	08003805 	.word	0x08003805
 800372c:	080036bf 	.word	0x080036bf
 8003730:	080036bf 	.word	0x080036bf
 8003734:	080036bf 	.word	0x080036bf
 8003738:	080036bf 	.word	0x080036bf
 800373c:	0800383b 	.word	0x0800383b
 8003740:	0800380d 	.word	0x0800380d
 8003744:	080037af 	.word	0x080037af
 8003748:	080036bf 	.word	0x080036bf
 800374c:	080036bf 	.word	0x080036bf
 8003750:	08003837 	.word	0x08003837
 8003754:	080036bf 	.word	0x080036bf
 8003758:	08003801 	.word	0x08003801
 800375c:	080036bf 	.word	0x080036bf
 8003760:	080036bf 	.word	0x080036bf
 8003764:	080037b7 	.word	0x080037b7
 8003768:	3b45      	subs	r3, #69	; 0x45
 800376a:	2b02      	cmp	r3, #2
 800376c:	d8a7      	bhi.n	80036be <__ssvfiscanf_r+0xd2>
 800376e:	2305      	movs	r3, #5
 8003770:	e02b      	b.n	80037ca <__ssvfiscanf_r+0x1de>
 8003772:	6863      	ldr	r3, [r4, #4]
 8003774:	2b00      	cmp	r3, #0
 8003776:	dd0d      	ble.n	8003794 <__ssvfiscanf_r+0x1a8>
 8003778:	6823      	ldr	r3, [r4, #0]
 800377a:	781a      	ldrb	r2, [r3, #0]
 800377c:	4552      	cmp	r2, sl
 800377e:	f040 80a1 	bne.w	80038c4 <__ssvfiscanf_r+0x2d8>
 8003782:	3301      	adds	r3, #1
 8003784:	6862      	ldr	r2, [r4, #4]
 8003786:	6023      	str	r3, [r4, #0]
 8003788:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800378a:	3a01      	subs	r2, #1
 800378c:	3301      	adds	r3, #1
 800378e:	6062      	str	r2, [r4, #4]
 8003790:	9345      	str	r3, [sp, #276]	; 0x114
 8003792:	e755      	b.n	8003640 <__ssvfiscanf_r+0x54>
 8003794:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003796:	4621      	mov	r1, r4
 8003798:	4630      	mov	r0, r6
 800379a:	4798      	blx	r3
 800379c:	2800      	cmp	r0, #0
 800379e:	d0eb      	beq.n	8003778 <__ssvfiscanf_r+0x18c>
 80037a0:	9844      	ldr	r0, [sp, #272]	; 0x110
 80037a2:	2800      	cmp	r0, #0
 80037a4:	f040 8084 	bne.w	80038b0 <__ssvfiscanf_r+0x2c4>
 80037a8:	f04f 30ff 	mov.w	r0, #4294967295
 80037ac:	e086      	b.n	80038bc <__ssvfiscanf_r+0x2d0>
 80037ae:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80037b0:	f042 0220 	orr.w	r2, r2, #32
 80037b4:	9241      	str	r2, [sp, #260]	; 0x104
 80037b6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80037b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037bc:	9241      	str	r2, [sp, #260]	; 0x104
 80037be:	2210      	movs	r2, #16
 80037c0:	2b6f      	cmp	r3, #111	; 0x6f
 80037c2:	9242      	str	r2, [sp, #264]	; 0x108
 80037c4:	bf34      	ite	cc
 80037c6:	2303      	movcc	r3, #3
 80037c8:	2304      	movcs	r3, #4
 80037ca:	9347      	str	r3, [sp, #284]	; 0x11c
 80037cc:	6863      	ldr	r3, [r4, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	dd41      	ble.n	8003856 <__ssvfiscanf_r+0x26a>
 80037d2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80037d4:	0659      	lsls	r1, r3, #25
 80037d6:	d404      	bmi.n	80037e2 <__ssvfiscanf_r+0x1f6>
 80037d8:	6823      	ldr	r3, [r4, #0]
 80037da:	781a      	ldrb	r2, [r3, #0]
 80037dc:	5cba      	ldrb	r2, [r7, r2]
 80037de:	0712      	lsls	r2, r2, #28
 80037e0:	d440      	bmi.n	8003864 <__ssvfiscanf_r+0x278>
 80037e2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	dc4f      	bgt.n	8003888 <__ssvfiscanf_r+0x29c>
 80037e8:	466b      	mov	r3, sp
 80037ea:	4622      	mov	r2, r4
 80037ec:	a941      	add	r1, sp, #260	; 0x104
 80037ee:	4630      	mov	r0, r6
 80037f0:	f000 fa08 	bl	8003c04 <_scanf_chars>
 80037f4:	2801      	cmp	r0, #1
 80037f6:	d065      	beq.n	80038c4 <__ssvfiscanf_r+0x2d8>
 80037f8:	2802      	cmp	r0, #2
 80037fa:	f47f af21 	bne.w	8003640 <__ssvfiscanf_r+0x54>
 80037fe:	e7cf      	b.n	80037a0 <__ssvfiscanf_r+0x1b4>
 8003800:	220a      	movs	r2, #10
 8003802:	e7dd      	b.n	80037c0 <__ssvfiscanf_r+0x1d4>
 8003804:	2300      	movs	r3, #0
 8003806:	9342      	str	r3, [sp, #264]	; 0x108
 8003808:	2303      	movs	r3, #3
 800380a:	e7de      	b.n	80037ca <__ssvfiscanf_r+0x1de>
 800380c:	2308      	movs	r3, #8
 800380e:	9342      	str	r3, [sp, #264]	; 0x108
 8003810:	2304      	movs	r3, #4
 8003812:	e7da      	b.n	80037ca <__ssvfiscanf_r+0x1de>
 8003814:	4629      	mov	r1, r5
 8003816:	4640      	mov	r0, r8
 8003818:	f000 fb52 	bl	8003ec0 <__sccl>
 800381c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800381e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003822:	9341      	str	r3, [sp, #260]	; 0x104
 8003824:	4605      	mov	r5, r0
 8003826:	2301      	movs	r3, #1
 8003828:	e7cf      	b.n	80037ca <__ssvfiscanf_r+0x1de>
 800382a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800382c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003830:	9341      	str	r3, [sp, #260]	; 0x104
 8003832:	2300      	movs	r3, #0
 8003834:	e7c9      	b.n	80037ca <__ssvfiscanf_r+0x1de>
 8003836:	2302      	movs	r3, #2
 8003838:	e7c7      	b.n	80037ca <__ssvfiscanf_r+0x1de>
 800383a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800383c:	06c3      	lsls	r3, r0, #27
 800383e:	f53f aeff 	bmi.w	8003640 <__ssvfiscanf_r+0x54>
 8003842:	9b00      	ldr	r3, [sp, #0]
 8003844:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003846:	1d19      	adds	r1, r3, #4
 8003848:	9100      	str	r1, [sp, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	07c0      	lsls	r0, r0, #31
 800384e:	bf4c      	ite	mi
 8003850:	801a      	strhmi	r2, [r3, #0]
 8003852:	601a      	strpl	r2, [r3, #0]
 8003854:	e6f4      	b.n	8003640 <__ssvfiscanf_r+0x54>
 8003856:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003858:	4621      	mov	r1, r4
 800385a:	4630      	mov	r0, r6
 800385c:	4798      	blx	r3
 800385e:	2800      	cmp	r0, #0
 8003860:	d0b7      	beq.n	80037d2 <__ssvfiscanf_r+0x1e6>
 8003862:	e79d      	b.n	80037a0 <__ssvfiscanf_r+0x1b4>
 8003864:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003866:	3201      	adds	r2, #1
 8003868:	9245      	str	r2, [sp, #276]	; 0x114
 800386a:	6862      	ldr	r2, [r4, #4]
 800386c:	3a01      	subs	r2, #1
 800386e:	2a00      	cmp	r2, #0
 8003870:	6062      	str	r2, [r4, #4]
 8003872:	dd02      	ble.n	800387a <__ssvfiscanf_r+0x28e>
 8003874:	3301      	adds	r3, #1
 8003876:	6023      	str	r3, [r4, #0]
 8003878:	e7ae      	b.n	80037d8 <__ssvfiscanf_r+0x1ec>
 800387a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800387c:	4621      	mov	r1, r4
 800387e:	4630      	mov	r0, r6
 8003880:	4798      	blx	r3
 8003882:	2800      	cmp	r0, #0
 8003884:	d0a8      	beq.n	80037d8 <__ssvfiscanf_r+0x1ec>
 8003886:	e78b      	b.n	80037a0 <__ssvfiscanf_r+0x1b4>
 8003888:	2b04      	cmp	r3, #4
 800388a:	dc06      	bgt.n	800389a <__ssvfiscanf_r+0x2ae>
 800388c:	466b      	mov	r3, sp
 800388e:	4622      	mov	r2, r4
 8003890:	a941      	add	r1, sp, #260	; 0x104
 8003892:	4630      	mov	r0, r6
 8003894:	f000 fa0e 	bl	8003cb4 <_scanf_i>
 8003898:	e7ac      	b.n	80037f4 <__ssvfiscanf_r+0x208>
 800389a:	4b0f      	ldr	r3, [pc, #60]	; (80038d8 <__ssvfiscanf_r+0x2ec>)
 800389c:	2b00      	cmp	r3, #0
 800389e:	f43f aecf 	beq.w	8003640 <__ssvfiscanf_r+0x54>
 80038a2:	466b      	mov	r3, sp
 80038a4:	4622      	mov	r2, r4
 80038a6:	a941      	add	r1, sp, #260	; 0x104
 80038a8:	4630      	mov	r0, r6
 80038aa:	f3af 8000 	nop.w
 80038ae:	e7a1      	b.n	80037f4 <__ssvfiscanf_r+0x208>
 80038b0:	89a3      	ldrh	r3, [r4, #12]
 80038b2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80038b6:	bf18      	it	ne
 80038b8:	f04f 30ff 	movne.w	r0, #4294967295
 80038bc:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80038c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038c4:	9844      	ldr	r0, [sp, #272]	; 0x110
 80038c6:	e7f9      	b.n	80038bc <__ssvfiscanf_r+0x2d0>
 80038c8:	08003539 	.word	0x08003539
 80038cc:	080035b3 	.word	0x080035b3
 80038d0:	0800434b 	.word	0x0800434b
 80038d4:	08004302 	.word	0x08004302
 80038d8:	00000000 	.word	0x00000000

080038dc <_printf_common>:
 80038dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038e0:	4616      	mov	r6, r2
 80038e2:	4699      	mov	r9, r3
 80038e4:	688a      	ldr	r2, [r1, #8]
 80038e6:	690b      	ldr	r3, [r1, #16]
 80038e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80038ec:	4293      	cmp	r3, r2
 80038ee:	bfb8      	it	lt
 80038f0:	4613      	movlt	r3, r2
 80038f2:	6033      	str	r3, [r6, #0]
 80038f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80038f8:	4607      	mov	r7, r0
 80038fa:	460c      	mov	r4, r1
 80038fc:	b10a      	cbz	r2, 8003902 <_printf_common+0x26>
 80038fe:	3301      	adds	r3, #1
 8003900:	6033      	str	r3, [r6, #0]
 8003902:	6823      	ldr	r3, [r4, #0]
 8003904:	0699      	lsls	r1, r3, #26
 8003906:	bf42      	ittt	mi
 8003908:	6833      	ldrmi	r3, [r6, #0]
 800390a:	3302      	addmi	r3, #2
 800390c:	6033      	strmi	r3, [r6, #0]
 800390e:	6825      	ldr	r5, [r4, #0]
 8003910:	f015 0506 	ands.w	r5, r5, #6
 8003914:	d106      	bne.n	8003924 <_printf_common+0x48>
 8003916:	f104 0a19 	add.w	sl, r4, #25
 800391a:	68e3      	ldr	r3, [r4, #12]
 800391c:	6832      	ldr	r2, [r6, #0]
 800391e:	1a9b      	subs	r3, r3, r2
 8003920:	42ab      	cmp	r3, r5
 8003922:	dc26      	bgt.n	8003972 <_printf_common+0x96>
 8003924:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003928:	1e13      	subs	r3, r2, #0
 800392a:	6822      	ldr	r2, [r4, #0]
 800392c:	bf18      	it	ne
 800392e:	2301      	movne	r3, #1
 8003930:	0692      	lsls	r2, r2, #26
 8003932:	d42b      	bmi.n	800398c <_printf_common+0xb0>
 8003934:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003938:	4649      	mov	r1, r9
 800393a:	4638      	mov	r0, r7
 800393c:	47c0      	blx	r8
 800393e:	3001      	adds	r0, #1
 8003940:	d01e      	beq.n	8003980 <_printf_common+0xa4>
 8003942:	6823      	ldr	r3, [r4, #0]
 8003944:	68e5      	ldr	r5, [r4, #12]
 8003946:	6832      	ldr	r2, [r6, #0]
 8003948:	f003 0306 	and.w	r3, r3, #6
 800394c:	2b04      	cmp	r3, #4
 800394e:	bf08      	it	eq
 8003950:	1aad      	subeq	r5, r5, r2
 8003952:	68a3      	ldr	r3, [r4, #8]
 8003954:	6922      	ldr	r2, [r4, #16]
 8003956:	bf0c      	ite	eq
 8003958:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800395c:	2500      	movne	r5, #0
 800395e:	4293      	cmp	r3, r2
 8003960:	bfc4      	itt	gt
 8003962:	1a9b      	subgt	r3, r3, r2
 8003964:	18ed      	addgt	r5, r5, r3
 8003966:	2600      	movs	r6, #0
 8003968:	341a      	adds	r4, #26
 800396a:	42b5      	cmp	r5, r6
 800396c:	d11a      	bne.n	80039a4 <_printf_common+0xc8>
 800396e:	2000      	movs	r0, #0
 8003970:	e008      	b.n	8003984 <_printf_common+0xa8>
 8003972:	2301      	movs	r3, #1
 8003974:	4652      	mov	r2, sl
 8003976:	4649      	mov	r1, r9
 8003978:	4638      	mov	r0, r7
 800397a:	47c0      	blx	r8
 800397c:	3001      	adds	r0, #1
 800397e:	d103      	bne.n	8003988 <_printf_common+0xac>
 8003980:	f04f 30ff 	mov.w	r0, #4294967295
 8003984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003988:	3501      	adds	r5, #1
 800398a:	e7c6      	b.n	800391a <_printf_common+0x3e>
 800398c:	18e1      	adds	r1, r4, r3
 800398e:	1c5a      	adds	r2, r3, #1
 8003990:	2030      	movs	r0, #48	; 0x30
 8003992:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003996:	4422      	add	r2, r4
 8003998:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800399c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80039a0:	3302      	adds	r3, #2
 80039a2:	e7c7      	b.n	8003934 <_printf_common+0x58>
 80039a4:	2301      	movs	r3, #1
 80039a6:	4622      	mov	r2, r4
 80039a8:	4649      	mov	r1, r9
 80039aa:	4638      	mov	r0, r7
 80039ac:	47c0      	blx	r8
 80039ae:	3001      	adds	r0, #1
 80039b0:	d0e6      	beq.n	8003980 <_printf_common+0xa4>
 80039b2:	3601      	adds	r6, #1
 80039b4:	e7d9      	b.n	800396a <_printf_common+0x8e>
	...

080039b8 <_printf_i>:
 80039b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80039bc:	460c      	mov	r4, r1
 80039be:	4691      	mov	r9, r2
 80039c0:	7e27      	ldrb	r7, [r4, #24]
 80039c2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80039c4:	2f78      	cmp	r7, #120	; 0x78
 80039c6:	4680      	mov	r8, r0
 80039c8:	469a      	mov	sl, r3
 80039ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80039ce:	d807      	bhi.n	80039e0 <_printf_i+0x28>
 80039d0:	2f62      	cmp	r7, #98	; 0x62
 80039d2:	d80a      	bhi.n	80039ea <_printf_i+0x32>
 80039d4:	2f00      	cmp	r7, #0
 80039d6:	f000 80d8 	beq.w	8003b8a <_printf_i+0x1d2>
 80039da:	2f58      	cmp	r7, #88	; 0x58
 80039dc:	f000 80a3 	beq.w	8003b26 <_printf_i+0x16e>
 80039e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80039e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80039e8:	e03a      	b.n	8003a60 <_printf_i+0xa8>
 80039ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80039ee:	2b15      	cmp	r3, #21
 80039f0:	d8f6      	bhi.n	80039e0 <_printf_i+0x28>
 80039f2:	a001      	add	r0, pc, #4	; (adr r0, 80039f8 <_printf_i+0x40>)
 80039f4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80039f8:	08003a51 	.word	0x08003a51
 80039fc:	08003a65 	.word	0x08003a65
 8003a00:	080039e1 	.word	0x080039e1
 8003a04:	080039e1 	.word	0x080039e1
 8003a08:	080039e1 	.word	0x080039e1
 8003a0c:	080039e1 	.word	0x080039e1
 8003a10:	08003a65 	.word	0x08003a65
 8003a14:	080039e1 	.word	0x080039e1
 8003a18:	080039e1 	.word	0x080039e1
 8003a1c:	080039e1 	.word	0x080039e1
 8003a20:	080039e1 	.word	0x080039e1
 8003a24:	08003b71 	.word	0x08003b71
 8003a28:	08003a95 	.word	0x08003a95
 8003a2c:	08003b53 	.word	0x08003b53
 8003a30:	080039e1 	.word	0x080039e1
 8003a34:	080039e1 	.word	0x080039e1
 8003a38:	08003b93 	.word	0x08003b93
 8003a3c:	080039e1 	.word	0x080039e1
 8003a40:	08003a95 	.word	0x08003a95
 8003a44:	080039e1 	.word	0x080039e1
 8003a48:	080039e1 	.word	0x080039e1
 8003a4c:	08003b5b 	.word	0x08003b5b
 8003a50:	680b      	ldr	r3, [r1, #0]
 8003a52:	1d1a      	adds	r2, r3, #4
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	600a      	str	r2, [r1, #0]
 8003a58:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003a5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a60:	2301      	movs	r3, #1
 8003a62:	e0a3      	b.n	8003bac <_printf_i+0x1f4>
 8003a64:	6825      	ldr	r5, [r4, #0]
 8003a66:	6808      	ldr	r0, [r1, #0]
 8003a68:	062e      	lsls	r6, r5, #24
 8003a6a:	f100 0304 	add.w	r3, r0, #4
 8003a6e:	d50a      	bpl.n	8003a86 <_printf_i+0xce>
 8003a70:	6805      	ldr	r5, [r0, #0]
 8003a72:	600b      	str	r3, [r1, #0]
 8003a74:	2d00      	cmp	r5, #0
 8003a76:	da03      	bge.n	8003a80 <_printf_i+0xc8>
 8003a78:	232d      	movs	r3, #45	; 0x2d
 8003a7a:	426d      	negs	r5, r5
 8003a7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a80:	485e      	ldr	r0, [pc, #376]	; (8003bfc <_printf_i+0x244>)
 8003a82:	230a      	movs	r3, #10
 8003a84:	e019      	b.n	8003aba <_printf_i+0x102>
 8003a86:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003a8a:	6805      	ldr	r5, [r0, #0]
 8003a8c:	600b      	str	r3, [r1, #0]
 8003a8e:	bf18      	it	ne
 8003a90:	b22d      	sxthne	r5, r5
 8003a92:	e7ef      	b.n	8003a74 <_printf_i+0xbc>
 8003a94:	680b      	ldr	r3, [r1, #0]
 8003a96:	6825      	ldr	r5, [r4, #0]
 8003a98:	1d18      	adds	r0, r3, #4
 8003a9a:	6008      	str	r0, [r1, #0]
 8003a9c:	0628      	lsls	r0, r5, #24
 8003a9e:	d501      	bpl.n	8003aa4 <_printf_i+0xec>
 8003aa0:	681d      	ldr	r5, [r3, #0]
 8003aa2:	e002      	b.n	8003aaa <_printf_i+0xf2>
 8003aa4:	0669      	lsls	r1, r5, #25
 8003aa6:	d5fb      	bpl.n	8003aa0 <_printf_i+0xe8>
 8003aa8:	881d      	ldrh	r5, [r3, #0]
 8003aaa:	4854      	ldr	r0, [pc, #336]	; (8003bfc <_printf_i+0x244>)
 8003aac:	2f6f      	cmp	r7, #111	; 0x6f
 8003aae:	bf0c      	ite	eq
 8003ab0:	2308      	moveq	r3, #8
 8003ab2:	230a      	movne	r3, #10
 8003ab4:	2100      	movs	r1, #0
 8003ab6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003aba:	6866      	ldr	r6, [r4, #4]
 8003abc:	60a6      	str	r6, [r4, #8]
 8003abe:	2e00      	cmp	r6, #0
 8003ac0:	bfa2      	ittt	ge
 8003ac2:	6821      	ldrge	r1, [r4, #0]
 8003ac4:	f021 0104 	bicge.w	r1, r1, #4
 8003ac8:	6021      	strge	r1, [r4, #0]
 8003aca:	b90d      	cbnz	r5, 8003ad0 <_printf_i+0x118>
 8003acc:	2e00      	cmp	r6, #0
 8003ace:	d04d      	beq.n	8003b6c <_printf_i+0x1b4>
 8003ad0:	4616      	mov	r6, r2
 8003ad2:	fbb5 f1f3 	udiv	r1, r5, r3
 8003ad6:	fb03 5711 	mls	r7, r3, r1, r5
 8003ada:	5dc7      	ldrb	r7, [r0, r7]
 8003adc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003ae0:	462f      	mov	r7, r5
 8003ae2:	42bb      	cmp	r3, r7
 8003ae4:	460d      	mov	r5, r1
 8003ae6:	d9f4      	bls.n	8003ad2 <_printf_i+0x11a>
 8003ae8:	2b08      	cmp	r3, #8
 8003aea:	d10b      	bne.n	8003b04 <_printf_i+0x14c>
 8003aec:	6823      	ldr	r3, [r4, #0]
 8003aee:	07df      	lsls	r7, r3, #31
 8003af0:	d508      	bpl.n	8003b04 <_printf_i+0x14c>
 8003af2:	6923      	ldr	r3, [r4, #16]
 8003af4:	6861      	ldr	r1, [r4, #4]
 8003af6:	4299      	cmp	r1, r3
 8003af8:	bfde      	ittt	le
 8003afa:	2330      	movle	r3, #48	; 0x30
 8003afc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003b00:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003b04:	1b92      	subs	r2, r2, r6
 8003b06:	6122      	str	r2, [r4, #16]
 8003b08:	f8cd a000 	str.w	sl, [sp]
 8003b0c:	464b      	mov	r3, r9
 8003b0e:	aa03      	add	r2, sp, #12
 8003b10:	4621      	mov	r1, r4
 8003b12:	4640      	mov	r0, r8
 8003b14:	f7ff fee2 	bl	80038dc <_printf_common>
 8003b18:	3001      	adds	r0, #1
 8003b1a:	d14c      	bne.n	8003bb6 <_printf_i+0x1fe>
 8003b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b20:	b004      	add	sp, #16
 8003b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b26:	4835      	ldr	r0, [pc, #212]	; (8003bfc <_printf_i+0x244>)
 8003b28:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003b2c:	6823      	ldr	r3, [r4, #0]
 8003b2e:	680e      	ldr	r6, [r1, #0]
 8003b30:	061f      	lsls	r7, r3, #24
 8003b32:	f856 5b04 	ldr.w	r5, [r6], #4
 8003b36:	600e      	str	r6, [r1, #0]
 8003b38:	d514      	bpl.n	8003b64 <_printf_i+0x1ac>
 8003b3a:	07d9      	lsls	r1, r3, #31
 8003b3c:	bf44      	itt	mi
 8003b3e:	f043 0320 	orrmi.w	r3, r3, #32
 8003b42:	6023      	strmi	r3, [r4, #0]
 8003b44:	b91d      	cbnz	r5, 8003b4e <_printf_i+0x196>
 8003b46:	6823      	ldr	r3, [r4, #0]
 8003b48:	f023 0320 	bic.w	r3, r3, #32
 8003b4c:	6023      	str	r3, [r4, #0]
 8003b4e:	2310      	movs	r3, #16
 8003b50:	e7b0      	b.n	8003ab4 <_printf_i+0xfc>
 8003b52:	6823      	ldr	r3, [r4, #0]
 8003b54:	f043 0320 	orr.w	r3, r3, #32
 8003b58:	6023      	str	r3, [r4, #0]
 8003b5a:	2378      	movs	r3, #120	; 0x78
 8003b5c:	4828      	ldr	r0, [pc, #160]	; (8003c00 <_printf_i+0x248>)
 8003b5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003b62:	e7e3      	b.n	8003b2c <_printf_i+0x174>
 8003b64:	065e      	lsls	r6, r3, #25
 8003b66:	bf48      	it	mi
 8003b68:	b2ad      	uxthmi	r5, r5
 8003b6a:	e7e6      	b.n	8003b3a <_printf_i+0x182>
 8003b6c:	4616      	mov	r6, r2
 8003b6e:	e7bb      	b.n	8003ae8 <_printf_i+0x130>
 8003b70:	680b      	ldr	r3, [r1, #0]
 8003b72:	6826      	ldr	r6, [r4, #0]
 8003b74:	6960      	ldr	r0, [r4, #20]
 8003b76:	1d1d      	adds	r5, r3, #4
 8003b78:	600d      	str	r5, [r1, #0]
 8003b7a:	0635      	lsls	r5, r6, #24
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	d501      	bpl.n	8003b84 <_printf_i+0x1cc>
 8003b80:	6018      	str	r0, [r3, #0]
 8003b82:	e002      	b.n	8003b8a <_printf_i+0x1d2>
 8003b84:	0671      	lsls	r1, r6, #25
 8003b86:	d5fb      	bpl.n	8003b80 <_printf_i+0x1c8>
 8003b88:	8018      	strh	r0, [r3, #0]
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	6123      	str	r3, [r4, #16]
 8003b8e:	4616      	mov	r6, r2
 8003b90:	e7ba      	b.n	8003b08 <_printf_i+0x150>
 8003b92:	680b      	ldr	r3, [r1, #0]
 8003b94:	1d1a      	adds	r2, r3, #4
 8003b96:	600a      	str	r2, [r1, #0]
 8003b98:	681e      	ldr	r6, [r3, #0]
 8003b9a:	6862      	ldr	r2, [r4, #4]
 8003b9c:	2100      	movs	r1, #0
 8003b9e:	4630      	mov	r0, r6
 8003ba0:	f7fc fb1e 	bl	80001e0 <memchr>
 8003ba4:	b108      	cbz	r0, 8003baa <_printf_i+0x1f2>
 8003ba6:	1b80      	subs	r0, r0, r6
 8003ba8:	6060      	str	r0, [r4, #4]
 8003baa:	6863      	ldr	r3, [r4, #4]
 8003bac:	6123      	str	r3, [r4, #16]
 8003bae:	2300      	movs	r3, #0
 8003bb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bb4:	e7a8      	b.n	8003b08 <_printf_i+0x150>
 8003bb6:	6923      	ldr	r3, [r4, #16]
 8003bb8:	4632      	mov	r2, r6
 8003bba:	4649      	mov	r1, r9
 8003bbc:	4640      	mov	r0, r8
 8003bbe:	47d0      	blx	sl
 8003bc0:	3001      	adds	r0, #1
 8003bc2:	d0ab      	beq.n	8003b1c <_printf_i+0x164>
 8003bc4:	6823      	ldr	r3, [r4, #0]
 8003bc6:	079b      	lsls	r3, r3, #30
 8003bc8:	d413      	bmi.n	8003bf2 <_printf_i+0x23a>
 8003bca:	68e0      	ldr	r0, [r4, #12]
 8003bcc:	9b03      	ldr	r3, [sp, #12]
 8003bce:	4298      	cmp	r0, r3
 8003bd0:	bfb8      	it	lt
 8003bd2:	4618      	movlt	r0, r3
 8003bd4:	e7a4      	b.n	8003b20 <_printf_i+0x168>
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	4632      	mov	r2, r6
 8003bda:	4649      	mov	r1, r9
 8003bdc:	4640      	mov	r0, r8
 8003bde:	47d0      	blx	sl
 8003be0:	3001      	adds	r0, #1
 8003be2:	d09b      	beq.n	8003b1c <_printf_i+0x164>
 8003be4:	3501      	adds	r5, #1
 8003be6:	68e3      	ldr	r3, [r4, #12]
 8003be8:	9903      	ldr	r1, [sp, #12]
 8003bea:	1a5b      	subs	r3, r3, r1
 8003bec:	42ab      	cmp	r3, r5
 8003bee:	dcf2      	bgt.n	8003bd6 <_printf_i+0x21e>
 8003bf0:	e7eb      	b.n	8003bca <_printf_i+0x212>
 8003bf2:	2500      	movs	r5, #0
 8003bf4:	f104 0619 	add.w	r6, r4, #25
 8003bf8:	e7f5      	b.n	8003be6 <_printf_i+0x22e>
 8003bfa:	bf00      	nop
 8003bfc:	0800430d 	.word	0x0800430d
 8003c00:	0800431e 	.word	0x0800431e

08003c04 <_scanf_chars>:
 8003c04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c08:	4615      	mov	r5, r2
 8003c0a:	688a      	ldr	r2, [r1, #8]
 8003c0c:	4680      	mov	r8, r0
 8003c0e:	460c      	mov	r4, r1
 8003c10:	b932      	cbnz	r2, 8003c20 <_scanf_chars+0x1c>
 8003c12:	698a      	ldr	r2, [r1, #24]
 8003c14:	2a00      	cmp	r2, #0
 8003c16:	bf0c      	ite	eq
 8003c18:	2201      	moveq	r2, #1
 8003c1a:	f04f 32ff 	movne.w	r2, #4294967295
 8003c1e:	608a      	str	r2, [r1, #8]
 8003c20:	6822      	ldr	r2, [r4, #0]
 8003c22:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8003cb0 <_scanf_chars+0xac>
 8003c26:	06d1      	lsls	r1, r2, #27
 8003c28:	bf5f      	itttt	pl
 8003c2a:	681a      	ldrpl	r2, [r3, #0]
 8003c2c:	1d11      	addpl	r1, r2, #4
 8003c2e:	6019      	strpl	r1, [r3, #0]
 8003c30:	6816      	ldrpl	r6, [r2, #0]
 8003c32:	2700      	movs	r7, #0
 8003c34:	69a0      	ldr	r0, [r4, #24]
 8003c36:	b188      	cbz	r0, 8003c5c <_scanf_chars+0x58>
 8003c38:	2801      	cmp	r0, #1
 8003c3a:	d107      	bne.n	8003c4c <_scanf_chars+0x48>
 8003c3c:	682b      	ldr	r3, [r5, #0]
 8003c3e:	781a      	ldrb	r2, [r3, #0]
 8003c40:	6963      	ldr	r3, [r4, #20]
 8003c42:	5c9b      	ldrb	r3, [r3, r2]
 8003c44:	b953      	cbnz	r3, 8003c5c <_scanf_chars+0x58>
 8003c46:	bb27      	cbnz	r7, 8003c92 <_scanf_chars+0x8e>
 8003c48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c4c:	2802      	cmp	r0, #2
 8003c4e:	d120      	bne.n	8003c92 <_scanf_chars+0x8e>
 8003c50:	682b      	ldr	r3, [r5, #0]
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	f813 3009 	ldrb.w	r3, [r3, r9]
 8003c58:	071b      	lsls	r3, r3, #28
 8003c5a:	d41a      	bmi.n	8003c92 <_scanf_chars+0x8e>
 8003c5c:	6823      	ldr	r3, [r4, #0]
 8003c5e:	06da      	lsls	r2, r3, #27
 8003c60:	bf5e      	ittt	pl
 8003c62:	682b      	ldrpl	r3, [r5, #0]
 8003c64:	781b      	ldrbpl	r3, [r3, #0]
 8003c66:	f806 3b01 	strbpl.w	r3, [r6], #1
 8003c6a:	682a      	ldr	r2, [r5, #0]
 8003c6c:	686b      	ldr	r3, [r5, #4]
 8003c6e:	3201      	adds	r2, #1
 8003c70:	602a      	str	r2, [r5, #0]
 8003c72:	68a2      	ldr	r2, [r4, #8]
 8003c74:	3b01      	subs	r3, #1
 8003c76:	3a01      	subs	r2, #1
 8003c78:	606b      	str	r3, [r5, #4]
 8003c7a:	3701      	adds	r7, #1
 8003c7c:	60a2      	str	r2, [r4, #8]
 8003c7e:	b142      	cbz	r2, 8003c92 <_scanf_chars+0x8e>
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	dcd7      	bgt.n	8003c34 <_scanf_chars+0x30>
 8003c84:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003c88:	4629      	mov	r1, r5
 8003c8a:	4640      	mov	r0, r8
 8003c8c:	4798      	blx	r3
 8003c8e:	2800      	cmp	r0, #0
 8003c90:	d0d0      	beq.n	8003c34 <_scanf_chars+0x30>
 8003c92:	6823      	ldr	r3, [r4, #0]
 8003c94:	f013 0310 	ands.w	r3, r3, #16
 8003c98:	d105      	bne.n	8003ca6 <_scanf_chars+0xa2>
 8003c9a:	68e2      	ldr	r2, [r4, #12]
 8003c9c:	3201      	adds	r2, #1
 8003c9e:	60e2      	str	r2, [r4, #12]
 8003ca0:	69a2      	ldr	r2, [r4, #24]
 8003ca2:	b102      	cbz	r2, 8003ca6 <_scanf_chars+0xa2>
 8003ca4:	7033      	strb	r3, [r6, #0]
 8003ca6:	6923      	ldr	r3, [r4, #16]
 8003ca8:	441f      	add	r7, r3
 8003caa:	6127      	str	r7, [r4, #16]
 8003cac:	2000      	movs	r0, #0
 8003cae:	e7cb      	b.n	8003c48 <_scanf_chars+0x44>
 8003cb0:	0800434b 	.word	0x0800434b

08003cb4 <_scanf_i>:
 8003cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cb8:	4698      	mov	r8, r3
 8003cba:	4b74      	ldr	r3, [pc, #464]	; (8003e8c <_scanf_i+0x1d8>)
 8003cbc:	460c      	mov	r4, r1
 8003cbe:	4682      	mov	sl, r0
 8003cc0:	4616      	mov	r6, r2
 8003cc2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003cc6:	b087      	sub	sp, #28
 8003cc8:	ab03      	add	r3, sp, #12
 8003cca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003cce:	4b70      	ldr	r3, [pc, #448]	; (8003e90 <_scanf_i+0x1dc>)
 8003cd0:	69a1      	ldr	r1, [r4, #24]
 8003cd2:	4a70      	ldr	r2, [pc, #448]	; (8003e94 <_scanf_i+0x1e0>)
 8003cd4:	2903      	cmp	r1, #3
 8003cd6:	bf18      	it	ne
 8003cd8:	461a      	movne	r2, r3
 8003cda:	68a3      	ldr	r3, [r4, #8]
 8003cdc:	9201      	str	r2, [sp, #4]
 8003cde:	1e5a      	subs	r2, r3, #1
 8003ce0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8003ce4:	bf88      	it	hi
 8003ce6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8003cea:	4627      	mov	r7, r4
 8003cec:	bf82      	ittt	hi
 8003cee:	eb03 0905 	addhi.w	r9, r3, r5
 8003cf2:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003cf6:	60a3      	strhi	r3, [r4, #8]
 8003cf8:	f857 3b1c 	ldr.w	r3, [r7], #28
 8003cfc:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8003d00:	bf98      	it	ls
 8003d02:	f04f 0900 	movls.w	r9, #0
 8003d06:	6023      	str	r3, [r4, #0]
 8003d08:	463d      	mov	r5, r7
 8003d0a:	f04f 0b00 	mov.w	fp, #0
 8003d0e:	6831      	ldr	r1, [r6, #0]
 8003d10:	ab03      	add	r3, sp, #12
 8003d12:	7809      	ldrb	r1, [r1, #0]
 8003d14:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8003d18:	2202      	movs	r2, #2
 8003d1a:	f7fc fa61 	bl	80001e0 <memchr>
 8003d1e:	b328      	cbz	r0, 8003d6c <_scanf_i+0xb8>
 8003d20:	f1bb 0f01 	cmp.w	fp, #1
 8003d24:	d159      	bne.n	8003dda <_scanf_i+0x126>
 8003d26:	6862      	ldr	r2, [r4, #4]
 8003d28:	b92a      	cbnz	r2, 8003d36 <_scanf_i+0x82>
 8003d2a:	6822      	ldr	r2, [r4, #0]
 8003d2c:	2308      	movs	r3, #8
 8003d2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d32:	6063      	str	r3, [r4, #4]
 8003d34:	6022      	str	r2, [r4, #0]
 8003d36:	6822      	ldr	r2, [r4, #0]
 8003d38:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8003d3c:	6022      	str	r2, [r4, #0]
 8003d3e:	68a2      	ldr	r2, [r4, #8]
 8003d40:	1e51      	subs	r1, r2, #1
 8003d42:	60a1      	str	r1, [r4, #8]
 8003d44:	b192      	cbz	r2, 8003d6c <_scanf_i+0xb8>
 8003d46:	6832      	ldr	r2, [r6, #0]
 8003d48:	1c51      	adds	r1, r2, #1
 8003d4a:	6031      	str	r1, [r6, #0]
 8003d4c:	7812      	ldrb	r2, [r2, #0]
 8003d4e:	f805 2b01 	strb.w	r2, [r5], #1
 8003d52:	6872      	ldr	r2, [r6, #4]
 8003d54:	3a01      	subs	r2, #1
 8003d56:	2a00      	cmp	r2, #0
 8003d58:	6072      	str	r2, [r6, #4]
 8003d5a:	dc07      	bgt.n	8003d6c <_scanf_i+0xb8>
 8003d5c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8003d60:	4631      	mov	r1, r6
 8003d62:	4650      	mov	r0, sl
 8003d64:	4790      	blx	r2
 8003d66:	2800      	cmp	r0, #0
 8003d68:	f040 8085 	bne.w	8003e76 <_scanf_i+0x1c2>
 8003d6c:	f10b 0b01 	add.w	fp, fp, #1
 8003d70:	f1bb 0f03 	cmp.w	fp, #3
 8003d74:	d1cb      	bne.n	8003d0e <_scanf_i+0x5a>
 8003d76:	6863      	ldr	r3, [r4, #4]
 8003d78:	b90b      	cbnz	r3, 8003d7e <_scanf_i+0xca>
 8003d7a:	230a      	movs	r3, #10
 8003d7c:	6063      	str	r3, [r4, #4]
 8003d7e:	6863      	ldr	r3, [r4, #4]
 8003d80:	4945      	ldr	r1, [pc, #276]	; (8003e98 <_scanf_i+0x1e4>)
 8003d82:	6960      	ldr	r0, [r4, #20]
 8003d84:	1ac9      	subs	r1, r1, r3
 8003d86:	f000 f89b 	bl	8003ec0 <__sccl>
 8003d8a:	f04f 0b00 	mov.w	fp, #0
 8003d8e:	68a3      	ldr	r3, [r4, #8]
 8003d90:	6822      	ldr	r2, [r4, #0]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d03d      	beq.n	8003e12 <_scanf_i+0x15e>
 8003d96:	6831      	ldr	r1, [r6, #0]
 8003d98:	6960      	ldr	r0, [r4, #20]
 8003d9a:	f891 c000 	ldrb.w	ip, [r1]
 8003d9e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8003da2:	2800      	cmp	r0, #0
 8003da4:	d035      	beq.n	8003e12 <_scanf_i+0x15e>
 8003da6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8003daa:	d124      	bne.n	8003df6 <_scanf_i+0x142>
 8003dac:	0510      	lsls	r0, r2, #20
 8003dae:	d522      	bpl.n	8003df6 <_scanf_i+0x142>
 8003db0:	f10b 0b01 	add.w	fp, fp, #1
 8003db4:	f1b9 0f00 	cmp.w	r9, #0
 8003db8:	d003      	beq.n	8003dc2 <_scanf_i+0x10e>
 8003dba:	3301      	adds	r3, #1
 8003dbc:	f109 39ff 	add.w	r9, r9, #4294967295
 8003dc0:	60a3      	str	r3, [r4, #8]
 8003dc2:	6873      	ldr	r3, [r6, #4]
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	6073      	str	r3, [r6, #4]
 8003dca:	dd1b      	ble.n	8003e04 <_scanf_i+0x150>
 8003dcc:	6833      	ldr	r3, [r6, #0]
 8003dce:	3301      	adds	r3, #1
 8003dd0:	6033      	str	r3, [r6, #0]
 8003dd2:	68a3      	ldr	r3, [r4, #8]
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	60a3      	str	r3, [r4, #8]
 8003dd8:	e7d9      	b.n	8003d8e <_scanf_i+0xda>
 8003dda:	f1bb 0f02 	cmp.w	fp, #2
 8003dde:	d1ae      	bne.n	8003d3e <_scanf_i+0x8a>
 8003de0:	6822      	ldr	r2, [r4, #0]
 8003de2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8003de6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8003dea:	d1bf      	bne.n	8003d6c <_scanf_i+0xb8>
 8003dec:	2310      	movs	r3, #16
 8003dee:	6063      	str	r3, [r4, #4]
 8003df0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003df4:	e7a2      	b.n	8003d3c <_scanf_i+0x88>
 8003df6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8003dfa:	6022      	str	r2, [r4, #0]
 8003dfc:	780b      	ldrb	r3, [r1, #0]
 8003dfe:	f805 3b01 	strb.w	r3, [r5], #1
 8003e02:	e7de      	b.n	8003dc2 <_scanf_i+0x10e>
 8003e04:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003e08:	4631      	mov	r1, r6
 8003e0a:	4650      	mov	r0, sl
 8003e0c:	4798      	blx	r3
 8003e0e:	2800      	cmp	r0, #0
 8003e10:	d0df      	beq.n	8003dd2 <_scanf_i+0x11e>
 8003e12:	6823      	ldr	r3, [r4, #0]
 8003e14:	05d9      	lsls	r1, r3, #23
 8003e16:	d50d      	bpl.n	8003e34 <_scanf_i+0x180>
 8003e18:	42bd      	cmp	r5, r7
 8003e1a:	d909      	bls.n	8003e30 <_scanf_i+0x17c>
 8003e1c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8003e20:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003e24:	4632      	mov	r2, r6
 8003e26:	4650      	mov	r0, sl
 8003e28:	4798      	blx	r3
 8003e2a:	f105 39ff 	add.w	r9, r5, #4294967295
 8003e2e:	464d      	mov	r5, r9
 8003e30:	42bd      	cmp	r5, r7
 8003e32:	d028      	beq.n	8003e86 <_scanf_i+0x1d2>
 8003e34:	6822      	ldr	r2, [r4, #0]
 8003e36:	f012 0210 	ands.w	r2, r2, #16
 8003e3a:	d113      	bne.n	8003e64 <_scanf_i+0x1b0>
 8003e3c:	702a      	strb	r2, [r5, #0]
 8003e3e:	6863      	ldr	r3, [r4, #4]
 8003e40:	9e01      	ldr	r6, [sp, #4]
 8003e42:	4639      	mov	r1, r7
 8003e44:	4650      	mov	r0, sl
 8003e46:	47b0      	blx	r6
 8003e48:	f8d8 3000 	ldr.w	r3, [r8]
 8003e4c:	6821      	ldr	r1, [r4, #0]
 8003e4e:	1d1a      	adds	r2, r3, #4
 8003e50:	f8c8 2000 	str.w	r2, [r8]
 8003e54:	f011 0f20 	tst.w	r1, #32
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	d00f      	beq.n	8003e7c <_scanf_i+0x1c8>
 8003e5c:	6018      	str	r0, [r3, #0]
 8003e5e:	68e3      	ldr	r3, [r4, #12]
 8003e60:	3301      	adds	r3, #1
 8003e62:	60e3      	str	r3, [r4, #12]
 8003e64:	1bed      	subs	r5, r5, r7
 8003e66:	44ab      	add	fp, r5
 8003e68:	6925      	ldr	r5, [r4, #16]
 8003e6a:	445d      	add	r5, fp
 8003e6c:	6125      	str	r5, [r4, #16]
 8003e6e:	2000      	movs	r0, #0
 8003e70:	b007      	add	sp, #28
 8003e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e76:	f04f 0b00 	mov.w	fp, #0
 8003e7a:	e7ca      	b.n	8003e12 <_scanf_i+0x15e>
 8003e7c:	07ca      	lsls	r2, r1, #31
 8003e7e:	bf4c      	ite	mi
 8003e80:	8018      	strhmi	r0, [r3, #0]
 8003e82:	6018      	strpl	r0, [r3, #0]
 8003e84:	e7eb      	b.n	8003e5e <_scanf_i+0x1aa>
 8003e86:	2001      	movs	r0, #1
 8003e88:	e7f2      	b.n	8003e70 <_scanf_i+0x1bc>
 8003e8a:	bf00      	nop
 8003e8c:	08004274 	.word	0x08004274
 8003e90:	08004139 	.word	0x08004139
 8003e94:	0800403d 	.word	0x0800403d
 8003e98:	08004348 	.word	0x08004348

08003e9c <_read_r>:
 8003e9c:	b538      	push	{r3, r4, r5, lr}
 8003e9e:	4d07      	ldr	r5, [pc, #28]	; (8003ebc <_read_r+0x20>)
 8003ea0:	4604      	mov	r4, r0
 8003ea2:	4608      	mov	r0, r1
 8003ea4:	4611      	mov	r1, r2
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	602a      	str	r2, [r5, #0]
 8003eaa:	461a      	mov	r2, r3
 8003eac:	f7fc fdfe 	bl	8000aac <_read>
 8003eb0:	1c43      	adds	r3, r0, #1
 8003eb2:	d102      	bne.n	8003eba <_read_r+0x1e>
 8003eb4:	682b      	ldr	r3, [r5, #0]
 8003eb6:	b103      	cbz	r3, 8003eba <_read_r+0x1e>
 8003eb8:	6023      	str	r3, [r4, #0]
 8003eba:	bd38      	pop	{r3, r4, r5, pc}
 8003ebc:	20000134 	.word	0x20000134

08003ec0 <__sccl>:
 8003ec0:	b570      	push	{r4, r5, r6, lr}
 8003ec2:	780b      	ldrb	r3, [r1, #0]
 8003ec4:	4604      	mov	r4, r0
 8003ec6:	2b5e      	cmp	r3, #94	; 0x5e
 8003ec8:	bf0b      	itete	eq
 8003eca:	784b      	ldrbeq	r3, [r1, #1]
 8003ecc:	1c48      	addne	r0, r1, #1
 8003ece:	1c88      	addeq	r0, r1, #2
 8003ed0:	2200      	movne	r2, #0
 8003ed2:	bf08      	it	eq
 8003ed4:	2201      	moveq	r2, #1
 8003ed6:	1e61      	subs	r1, r4, #1
 8003ed8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8003edc:	f801 2f01 	strb.w	r2, [r1, #1]!
 8003ee0:	42a9      	cmp	r1, r5
 8003ee2:	d1fb      	bne.n	8003edc <__sccl+0x1c>
 8003ee4:	b90b      	cbnz	r3, 8003eea <__sccl+0x2a>
 8003ee6:	3801      	subs	r0, #1
 8003ee8:	bd70      	pop	{r4, r5, r6, pc}
 8003eea:	f082 0101 	eor.w	r1, r2, #1
 8003eee:	54e1      	strb	r1, [r4, r3]
 8003ef0:	1c42      	adds	r2, r0, #1
 8003ef2:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8003ef6:	2d2d      	cmp	r5, #45	; 0x2d
 8003ef8:	f102 36ff 	add.w	r6, r2, #4294967295
 8003efc:	4610      	mov	r0, r2
 8003efe:	d006      	beq.n	8003f0e <__sccl+0x4e>
 8003f00:	2d5d      	cmp	r5, #93	; 0x5d
 8003f02:	d0f1      	beq.n	8003ee8 <__sccl+0x28>
 8003f04:	b90d      	cbnz	r5, 8003f0a <__sccl+0x4a>
 8003f06:	4630      	mov	r0, r6
 8003f08:	e7ee      	b.n	8003ee8 <__sccl+0x28>
 8003f0a:	462b      	mov	r3, r5
 8003f0c:	e7ef      	b.n	8003eee <__sccl+0x2e>
 8003f0e:	7816      	ldrb	r6, [r2, #0]
 8003f10:	2e5d      	cmp	r6, #93	; 0x5d
 8003f12:	d0fa      	beq.n	8003f0a <__sccl+0x4a>
 8003f14:	42b3      	cmp	r3, r6
 8003f16:	dcf8      	bgt.n	8003f0a <__sccl+0x4a>
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3001      	adds	r0, #1
 8003f1c:	4286      	cmp	r6, r0
 8003f1e:	5421      	strb	r1, [r4, r0]
 8003f20:	dcfb      	bgt.n	8003f1a <__sccl+0x5a>
 8003f22:	43d8      	mvns	r0, r3
 8003f24:	4430      	add	r0, r6
 8003f26:	1c5d      	adds	r5, r3, #1
 8003f28:	42b3      	cmp	r3, r6
 8003f2a:	bfa8      	it	ge
 8003f2c:	2000      	movge	r0, #0
 8003f2e:	182b      	adds	r3, r5, r0
 8003f30:	3202      	adds	r2, #2
 8003f32:	e7de      	b.n	8003ef2 <__sccl+0x32>

08003f34 <_strtol_l.isra.0>:
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f3a:	d001      	beq.n	8003f40 <_strtol_l.isra.0+0xc>
 8003f3c:	2b24      	cmp	r3, #36	; 0x24
 8003f3e:	d906      	bls.n	8003f4e <_strtol_l.isra.0+0x1a>
 8003f40:	f7fe fa22 	bl	8002388 <__errno>
 8003f44:	2316      	movs	r3, #22
 8003f46:	6003      	str	r3, [r0, #0]
 8003f48:	2000      	movs	r0, #0
 8003f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f4e:	4f3a      	ldr	r7, [pc, #232]	; (8004038 <_strtol_l.isra.0+0x104>)
 8003f50:	468e      	mov	lr, r1
 8003f52:	4676      	mov	r6, lr
 8003f54:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8003f58:	5de5      	ldrb	r5, [r4, r7]
 8003f5a:	f015 0508 	ands.w	r5, r5, #8
 8003f5e:	d1f8      	bne.n	8003f52 <_strtol_l.isra.0+0x1e>
 8003f60:	2c2d      	cmp	r4, #45	; 0x2d
 8003f62:	d134      	bne.n	8003fce <_strtol_l.isra.0+0x9a>
 8003f64:	f89e 4000 	ldrb.w	r4, [lr]
 8003f68:	f04f 0801 	mov.w	r8, #1
 8003f6c:	f106 0e02 	add.w	lr, r6, #2
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d05c      	beq.n	800402e <_strtol_l.isra.0+0xfa>
 8003f74:	2b10      	cmp	r3, #16
 8003f76:	d10c      	bne.n	8003f92 <_strtol_l.isra.0+0x5e>
 8003f78:	2c30      	cmp	r4, #48	; 0x30
 8003f7a:	d10a      	bne.n	8003f92 <_strtol_l.isra.0+0x5e>
 8003f7c:	f89e 4000 	ldrb.w	r4, [lr]
 8003f80:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8003f84:	2c58      	cmp	r4, #88	; 0x58
 8003f86:	d14d      	bne.n	8004024 <_strtol_l.isra.0+0xf0>
 8003f88:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8003f8c:	2310      	movs	r3, #16
 8003f8e:	f10e 0e02 	add.w	lr, lr, #2
 8003f92:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8003f96:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003f9a:	2600      	movs	r6, #0
 8003f9c:	fbbc f9f3 	udiv	r9, ip, r3
 8003fa0:	4635      	mov	r5, r6
 8003fa2:	fb03 ca19 	mls	sl, r3, r9, ip
 8003fa6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8003faa:	2f09      	cmp	r7, #9
 8003fac:	d818      	bhi.n	8003fe0 <_strtol_l.isra.0+0xac>
 8003fae:	463c      	mov	r4, r7
 8003fb0:	42a3      	cmp	r3, r4
 8003fb2:	dd24      	ble.n	8003ffe <_strtol_l.isra.0+0xca>
 8003fb4:	2e00      	cmp	r6, #0
 8003fb6:	db1f      	blt.n	8003ff8 <_strtol_l.isra.0+0xc4>
 8003fb8:	45a9      	cmp	r9, r5
 8003fba:	d31d      	bcc.n	8003ff8 <_strtol_l.isra.0+0xc4>
 8003fbc:	d101      	bne.n	8003fc2 <_strtol_l.isra.0+0x8e>
 8003fbe:	45a2      	cmp	sl, r4
 8003fc0:	db1a      	blt.n	8003ff8 <_strtol_l.isra.0+0xc4>
 8003fc2:	fb05 4503 	mla	r5, r5, r3, r4
 8003fc6:	2601      	movs	r6, #1
 8003fc8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8003fcc:	e7eb      	b.n	8003fa6 <_strtol_l.isra.0+0x72>
 8003fce:	2c2b      	cmp	r4, #43	; 0x2b
 8003fd0:	bf08      	it	eq
 8003fd2:	f89e 4000 	ldrbeq.w	r4, [lr]
 8003fd6:	46a8      	mov	r8, r5
 8003fd8:	bf08      	it	eq
 8003fda:	f106 0e02 	addeq.w	lr, r6, #2
 8003fde:	e7c7      	b.n	8003f70 <_strtol_l.isra.0+0x3c>
 8003fe0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8003fe4:	2f19      	cmp	r7, #25
 8003fe6:	d801      	bhi.n	8003fec <_strtol_l.isra.0+0xb8>
 8003fe8:	3c37      	subs	r4, #55	; 0x37
 8003fea:	e7e1      	b.n	8003fb0 <_strtol_l.isra.0+0x7c>
 8003fec:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8003ff0:	2f19      	cmp	r7, #25
 8003ff2:	d804      	bhi.n	8003ffe <_strtol_l.isra.0+0xca>
 8003ff4:	3c57      	subs	r4, #87	; 0x57
 8003ff6:	e7db      	b.n	8003fb0 <_strtol_l.isra.0+0x7c>
 8003ff8:	f04f 36ff 	mov.w	r6, #4294967295
 8003ffc:	e7e4      	b.n	8003fc8 <_strtol_l.isra.0+0x94>
 8003ffe:	2e00      	cmp	r6, #0
 8004000:	da05      	bge.n	800400e <_strtol_l.isra.0+0xda>
 8004002:	2322      	movs	r3, #34	; 0x22
 8004004:	6003      	str	r3, [r0, #0]
 8004006:	4665      	mov	r5, ip
 8004008:	b942      	cbnz	r2, 800401c <_strtol_l.isra.0+0xe8>
 800400a:	4628      	mov	r0, r5
 800400c:	e79d      	b.n	8003f4a <_strtol_l.isra.0+0x16>
 800400e:	f1b8 0f00 	cmp.w	r8, #0
 8004012:	d000      	beq.n	8004016 <_strtol_l.isra.0+0xe2>
 8004014:	426d      	negs	r5, r5
 8004016:	2a00      	cmp	r2, #0
 8004018:	d0f7      	beq.n	800400a <_strtol_l.isra.0+0xd6>
 800401a:	b10e      	cbz	r6, 8004020 <_strtol_l.isra.0+0xec>
 800401c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8004020:	6011      	str	r1, [r2, #0]
 8004022:	e7f2      	b.n	800400a <_strtol_l.isra.0+0xd6>
 8004024:	2430      	movs	r4, #48	; 0x30
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1b3      	bne.n	8003f92 <_strtol_l.isra.0+0x5e>
 800402a:	2308      	movs	r3, #8
 800402c:	e7b1      	b.n	8003f92 <_strtol_l.isra.0+0x5e>
 800402e:	2c30      	cmp	r4, #48	; 0x30
 8004030:	d0a4      	beq.n	8003f7c <_strtol_l.isra.0+0x48>
 8004032:	230a      	movs	r3, #10
 8004034:	e7ad      	b.n	8003f92 <_strtol_l.isra.0+0x5e>
 8004036:	bf00      	nop
 8004038:	0800434b 	.word	0x0800434b

0800403c <_strtol_r>:
 800403c:	f7ff bf7a 	b.w	8003f34 <_strtol_l.isra.0>

08004040 <_strtoul_l.isra.0>:
 8004040:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004044:	4e3b      	ldr	r6, [pc, #236]	; (8004134 <_strtoul_l.isra.0+0xf4>)
 8004046:	4686      	mov	lr, r0
 8004048:	468c      	mov	ip, r1
 800404a:	4660      	mov	r0, ip
 800404c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8004050:	5da5      	ldrb	r5, [r4, r6]
 8004052:	f015 0508 	ands.w	r5, r5, #8
 8004056:	d1f8      	bne.n	800404a <_strtoul_l.isra.0+0xa>
 8004058:	2c2d      	cmp	r4, #45	; 0x2d
 800405a:	d134      	bne.n	80040c6 <_strtoul_l.isra.0+0x86>
 800405c:	f89c 4000 	ldrb.w	r4, [ip]
 8004060:	f04f 0801 	mov.w	r8, #1
 8004064:	f100 0c02 	add.w	ip, r0, #2
 8004068:	2b00      	cmp	r3, #0
 800406a:	d05e      	beq.n	800412a <_strtoul_l.isra.0+0xea>
 800406c:	2b10      	cmp	r3, #16
 800406e:	d10c      	bne.n	800408a <_strtoul_l.isra.0+0x4a>
 8004070:	2c30      	cmp	r4, #48	; 0x30
 8004072:	d10a      	bne.n	800408a <_strtoul_l.isra.0+0x4a>
 8004074:	f89c 0000 	ldrb.w	r0, [ip]
 8004078:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800407c:	2858      	cmp	r0, #88	; 0x58
 800407e:	d14f      	bne.n	8004120 <_strtoul_l.isra.0+0xe0>
 8004080:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8004084:	2310      	movs	r3, #16
 8004086:	f10c 0c02 	add.w	ip, ip, #2
 800408a:	f04f 37ff 	mov.w	r7, #4294967295
 800408e:	2500      	movs	r5, #0
 8004090:	fbb7 f7f3 	udiv	r7, r7, r3
 8004094:	fb03 f907 	mul.w	r9, r3, r7
 8004098:	ea6f 0909 	mvn.w	r9, r9
 800409c:	4628      	mov	r0, r5
 800409e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80040a2:	2e09      	cmp	r6, #9
 80040a4:	d818      	bhi.n	80040d8 <_strtoul_l.isra.0+0x98>
 80040a6:	4634      	mov	r4, r6
 80040a8:	42a3      	cmp	r3, r4
 80040aa:	dd24      	ble.n	80040f6 <_strtoul_l.isra.0+0xb6>
 80040ac:	2d00      	cmp	r5, #0
 80040ae:	db1f      	blt.n	80040f0 <_strtoul_l.isra.0+0xb0>
 80040b0:	4287      	cmp	r7, r0
 80040b2:	d31d      	bcc.n	80040f0 <_strtoul_l.isra.0+0xb0>
 80040b4:	d101      	bne.n	80040ba <_strtoul_l.isra.0+0x7a>
 80040b6:	45a1      	cmp	r9, r4
 80040b8:	db1a      	blt.n	80040f0 <_strtoul_l.isra.0+0xb0>
 80040ba:	fb00 4003 	mla	r0, r0, r3, r4
 80040be:	2501      	movs	r5, #1
 80040c0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80040c4:	e7eb      	b.n	800409e <_strtoul_l.isra.0+0x5e>
 80040c6:	2c2b      	cmp	r4, #43	; 0x2b
 80040c8:	bf08      	it	eq
 80040ca:	f89c 4000 	ldrbeq.w	r4, [ip]
 80040ce:	46a8      	mov	r8, r5
 80040d0:	bf08      	it	eq
 80040d2:	f100 0c02 	addeq.w	ip, r0, #2
 80040d6:	e7c7      	b.n	8004068 <_strtoul_l.isra.0+0x28>
 80040d8:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80040dc:	2e19      	cmp	r6, #25
 80040de:	d801      	bhi.n	80040e4 <_strtoul_l.isra.0+0xa4>
 80040e0:	3c37      	subs	r4, #55	; 0x37
 80040e2:	e7e1      	b.n	80040a8 <_strtoul_l.isra.0+0x68>
 80040e4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80040e8:	2e19      	cmp	r6, #25
 80040ea:	d804      	bhi.n	80040f6 <_strtoul_l.isra.0+0xb6>
 80040ec:	3c57      	subs	r4, #87	; 0x57
 80040ee:	e7db      	b.n	80040a8 <_strtoul_l.isra.0+0x68>
 80040f0:	f04f 35ff 	mov.w	r5, #4294967295
 80040f4:	e7e4      	b.n	80040c0 <_strtoul_l.isra.0+0x80>
 80040f6:	2d00      	cmp	r5, #0
 80040f8:	da07      	bge.n	800410a <_strtoul_l.isra.0+0xca>
 80040fa:	2322      	movs	r3, #34	; 0x22
 80040fc:	f8ce 3000 	str.w	r3, [lr]
 8004100:	f04f 30ff 	mov.w	r0, #4294967295
 8004104:	b942      	cbnz	r2, 8004118 <_strtoul_l.isra.0+0xd8>
 8004106:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800410a:	f1b8 0f00 	cmp.w	r8, #0
 800410e:	d000      	beq.n	8004112 <_strtoul_l.isra.0+0xd2>
 8004110:	4240      	negs	r0, r0
 8004112:	2a00      	cmp	r2, #0
 8004114:	d0f7      	beq.n	8004106 <_strtoul_l.isra.0+0xc6>
 8004116:	b10d      	cbz	r5, 800411c <_strtoul_l.isra.0+0xdc>
 8004118:	f10c 31ff 	add.w	r1, ip, #4294967295
 800411c:	6011      	str	r1, [r2, #0]
 800411e:	e7f2      	b.n	8004106 <_strtoul_l.isra.0+0xc6>
 8004120:	2430      	movs	r4, #48	; 0x30
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1b1      	bne.n	800408a <_strtoul_l.isra.0+0x4a>
 8004126:	2308      	movs	r3, #8
 8004128:	e7af      	b.n	800408a <_strtoul_l.isra.0+0x4a>
 800412a:	2c30      	cmp	r4, #48	; 0x30
 800412c:	d0a2      	beq.n	8004074 <_strtoul_l.isra.0+0x34>
 800412e:	230a      	movs	r3, #10
 8004130:	e7ab      	b.n	800408a <_strtoul_l.isra.0+0x4a>
 8004132:	bf00      	nop
 8004134:	0800434b 	.word	0x0800434b

08004138 <_strtoul_r>:
 8004138:	f7ff bf82 	b.w	8004040 <_strtoul_l.isra.0>

0800413c <__submore>:
 800413c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004140:	460c      	mov	r4, r1
 8004142:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004144:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004148:	4299      	cmp	r1, r3
 800414a:	d11d      	bne.n	8004188 <__submore+0x4c>
 800414c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004150:	f7fe fe5c 	bl	8002e0c <_malloc_r>
 8004154:	b918      	cbnz	r0, 800415e <__submore+0x22>
 8004156:	f04f 30ff 	mov.w	r0, #4294967295
 800415a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800415e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004162:	63a3      	str	r3, [r4, #56]	; 0x38
 8004164:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8004168:	6360      	str	r0, [r4, #52]	; 0x34
 800416a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800416e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004172:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8004176:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800417a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800417e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8004182:	6020      	str	r0, [r4, #0]
 8004184:	2000      	movs	r0, #0
 8004186:	e7e8      	b.n	800415a <__submore+0x1e>
 8004188:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800418a:	0077      	lsls	r7, r6, #1
 800418c:	463a      	mov	r2, r7
 800418e:	f000 f829 	bl	80041e4 <_realloc_r>
 8004192:	4605      	mov	r5, r0
 8004194:	2800      	cmp	r0, #0
 8004196:	d0de      	beq.n	8004156 <__submore+0x1a>
 8004198:	eb00 0806 	add.w	r8, r0, r6
 800419c:	4601      	mov	r1, r0
 800419e:	4632      	mov	r2, r6
 80041a0:	4640      	mov	r0, r8
 80041a2:	f7fe fdcd 	bl	8002d40 <memcpy>
 80041a6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80041aa:	f8c4 8000 	str.w	r8, [r4]
 80041ae:	e7e9      	b.n	8004184 <__submore+0x48>

080041b0 <memmove>:
 80041b0:	4288      	cmp	r0, r1
 80041b2:	b510      	push	{r4, lr}
 80041b4:	eb01 0402 	add.w	r4, r1, r2
 80041b8:	d902      	bls.n	80041c0 <memmove+0x10>
 80041ba:	4284      	cmp	r4, r0
 80041bc:	4623      	mov	r3, r4
 80041be:	d807      	bhi.n	80041d0 <memmove+0x20>
 80041c0:	1e43      	subs	r3, r0, #1
 80041c2:	42a1      	cmp	r1, r4
 80041c4:	d008      	beq.n	80041d8 <memmove+0x28>
 80041c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80041ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80041ce:	e7f8      	b.n	80041c2 <memmove+0x12>
 80041d0:	4402      	add	r2, r0
 80041d2:	4601      	mov	r1, r0
 80041d4:	428a      	cmp	r2, r1
 80041d6:	d100      	bne.n	80041da <memmove+0x2a>
 80041d8:	bd10      	pop	{r4, pc}
 80041da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80041de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80041e2:	e7f7      	b.n	80041d4 <memmove+0x24>

080041e4 <_realloc_r>:
 80041e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041e6:	4607      	mov	r7, r0
 80041e8:	4614      	mov	r4, r2
 80041ea:	460e      	mov	r6, r1
 80041ec:	b921      	cbnz	r1, 80041f8 <_realloc_r+0x14>
 80041ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80041f2:	4611      	mov	r1, r2
 80041f4:	f7fe be0a 	b.w	8002e0c <_malloc_r>
 80041f8:	b922      	cbnz	r2, 8004204 <_realloc_r+0x20>
 80041fa:	f7fe fdb7 	bl	8002d6c <_free_r>
 80041fe:	4625      	mov	r5, r4
 8004200:	4628      	mov	r0, r5
 8004202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004204:	f000 f814 	bl	8004230 <_malloc_usable_size_r>
 8004208:	42a0      	cmp	r0, r4
 800420a:	d20f      	bcs.n	800422c <_realloc_r+0x48>
 800420c:	4621      	mov	r1, r4
 800420e:	4638      	mov	r0, r7
 8004210:	f7fe fdfc 	bl	8002e0c <_malloc_r>
 8004214:	4605      	mov	r5, r0
 8004216:	2800      	cmp	r0, #0
 8004218:	d0f2      	beq.n	8004200 <_realloc_r+0x1c>
 800421a:	4631      	mov	r1, r6
 800421c:	4622      	mov	r2, r4
 800421e:	f7fe fd8f 	bl	8002d40 <memcpy>
 8004222:	4631      	mov	r1, r6
 8004224:	4638      	mov	r0, r7
 8004226:	f7fe fda1 	bl	8002d6c <_free_r>
 800422a:	e7e9      	b.n	8004200 <_realloc_r+0x1c>
 800422c:	4635      	mov	r5, r6
 800422e:	e7e7      	b.n	8004200 <_realloc_r+0x1c>

08004230 <_malloc_usable_size_r>:
 8004230:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004234:	1f18      	subs	r0, r3, #4
 8004236:	2b00      	cmp	r3, #0
 8004238:	bfbc      	itt	lt
 800423a:	580b      	ldrlt	r3, [r1, r0]
 800423c:	18c0      	addlt	r0, r0, r3
 800423e:	4770      	bx	lr

08004240 <_init>:
 8004240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004242:	bf00      	nop
 8004244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004246:	bc08      	pop	{r3}
 8004248:	469e      	mov	lr, r3
 800424a:	4770      	bx	lr

0800424c <_fini>:
 800424c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800424e:	bf00      	nop
 8004250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004252:	bc08      	pop	{r3}
 8004254:	469e      	mov	lr, r3
 8004256:	4770      	bx	lr
